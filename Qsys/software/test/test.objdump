
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x028001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x02800000 paddr 0x02800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02800020 paddr 0x02800020 align 2**12
         filesz 0x0000d9d0 memsz 0x0000d9d0 flags r-x
    LOAD off    0x0000e9f0 vaddr 0x0280d9f0 paddr 0x0280f538 align 2**12
         filesz 0x00001b48 memsz 0x00001b48 flags rw-
    LOAD off    0x00011080 vaddr 0x02811080 paddr 0x02811080 align 2**12
         filesz 0x00000000 memsz 0x000002f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02800000  02800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02800020  02800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d4e8  028001b4  028001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000354  0280d69c  0280d69c  0000e69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b48  0280d9f0  0280f538  0000e9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f4  02811080  02811080  00011080  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00010538  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cf8  00000000  00000000  00010560  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000014da  00000000  00000000  00011258  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000243b4  00000000  00000000  00012732  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007d34  00000000  00000000  00036ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000145c5  00000000  00000000  0003e81a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a50  00000000  00000000  00052de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000022c8  00000000  00000000  00054830  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c04c  00000000  00000000  00056af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00062b44  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00062b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00066721  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  00066724  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006672c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006672d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0006672e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00066737  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00066740  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  00066749  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000025  00000000  00000000  00066750  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0007352e  00000000  00000000  00066775  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02800000 l    d  .entry	00000000 .entry
02800020 l    d  .exceptions	00000000 .exceptions
028001b4 l    d  .text	00000000 .text
0280d69c l    d  .rodata	00000000 .rodata
0280d9f0 l    d  .rwdata	00000000 .rwdata
02811080 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
028001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 count_binary.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
028004b8 l     F .text	00000058 __sprint_r
0280d71a l     O .rodata	00000010 blanks.3452
0280d70a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
02802534 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02803f5c l     F .text	00000058 std
02804068 l     F .text	00000008 __fp_lock
02804070 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0280d9f0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0280f4f4 l     O .rwdata	00000004 charset
0280d750 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0280d898 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0280841c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
02809548 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
02809e84 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02809ee4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02809fe8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0280a10c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0280a1ec l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0280a34c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0280a57c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0280f518 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0280a864 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0280e3ac l     O .rwdata	000000a4 dma_priv
0280e450 l     O .rwdata	0000001c dma_tx
0280e46c l     O .rwdata	0000001c dma_rx
0280e488 l     O .rwdata	00001060 jtag_uart
0280a984 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
0280aadc l     F .text	000000a8 alt_avalon_dma_launch_txonly
0280ab84 l     F .text	000000a8 alt_avalon_dma_launch_rxonly
0280ac2c l     F .text	000003a4 alt_avalon_dma_ioctl
0280b380 l     F .text	000001c8 alt_avalon_dma_irq
0280b5f8 l     F .text	00000038 alt_dma_txchan_reg
0280b630 l     F .text	00000038 alt_dma_rxchan_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0280b870 l     F .text	00000228 altera_avalon_jtag_uart_irq
0280ba98 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0280c494 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
0280c54c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
0280c604 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0280caa8 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0280cbf8 l     F .text	000000f8 alt_file_locked
0280ce7c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0280d484 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0280d638 l     F .text	00000040 alt_sim_halt
02805d4c g     F .text	00000094 _mprec_log10
02805e38 g     F .text	00000088 __any_on
028075f0 g     F .text	00000070 _isatty_r
0280d870 g     O .rodata	00000028 __mprec_tinytens
0280a3ac g     F .text	0000006c alt_main
02800390 g     F .text	000000a0 _puts_r
028110e4 g     O .bss	00000100 alt_irq
02807660 g     F .text	00000078 _lseek_r
0280f538 g       *ABS*	00000000 __flash_rwdata_start
02808f3c g     F .text	00000088 __eqdf2
02811374 g       *ABS*	00000000 __alt_heap_start
02800318 g     F .text	00000044 printf
028070a8 g     F .text	00000068 __sseek
02803fc4 g     F .text	000000a4 __sinit
0280b548 g     F .text	000000b0 alt_avalon_dma_init
02804cd0 g     F .text	00000084 _setlocale_r
028040c4 g     F .text	0000009c __sfmoreglue
0280a438 g     F .text	00000020 __malloc_unlock
028110ac g     O .bss	00000004 altera_avalon_timer_ts_freq
028057c8 g     F .text	000000e0 memmove
028040b4 g     F .text	00000010 _cleanup
02805ec0 g     F .text	000000bc _Balloc
0280904c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
02800000 g     F .entry	0000000c __reset
02800020 g       *ABS*	00000000 __flash_exceptions_start
0280757c g     F .text	00000074 _fstat_r
02811098 g     O .bss	00000004 errno
028110a0 g     O .bss	00000004 alt_argv
028174e8 g       *ABS*	00000000 _gp
0280a710 g     F .text	00000030 usleep
0280c5ac g     F .text	00000058 alt_dma_txchan_open
0280e22c g     O .rwdata	00000180 alt_fd_list
0280c72c g     F .text	00000094 alt_find_dev
02805728 g     F .text	000000a0 memcpy
028040a8 g     F .text	0000000c _cleanup_r
028091e4 g     F .text	000000f8 __floatsidf
0280cb80 g     F .text	00000078 alt_io_redirect
0280915c g     F .text	00000088 __ltdf2
0280d69c g       *ABS*	00000000 __DTOR_END__
02800430 g     F .text	00000014 puts
02805c9c g     F .text	000000b0 __ratio
0280bcb0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0280035c g     F .text	00000034 _printf_r
02809684 g     F .text	00000008 __udivsi3
0280a048 g     F .text	000000c4 isatty
0280d780 g     O .rodata	000000c8 __mprec_tens
02804cac g     F .text	00000008 __locale_charset
0281108c g     O .bss	00000004 __malloc_top_pad
0280f4f0 g     O .rwdata	00000004 __mb_cur_max
02804cb4 g     F .text	0000000c _localeconv_r
02806624 g     F .text	0000003c __i2b
02804690 g     F .text	0000049c __sfvwrite_r
02807030 g     F .text	00000070 _sbrk_r
028076d8 g     F .text	00000078 _read_r
0280ddf0 g     O .rwdata	0000000c __lc_ctype
0280f510 g     O .rwdata	00000004 alt_max_fd
02809b84 g     F .text	00000138 __unpack_d
02807458 g     F .text	00000110 _fclose_r
02803f28 g     F .text	00000034 fflush
02811090 g     O .bss	00000004 __malloc_max_sbrked_mem
028088ac g     F .text	00000074 __adddf3
0280a9bc g     F .text	00000120 alt_avalon_dma_launch_bidir
02805b7c g     F .text	00000120 __b2d
0280c4f4 g     F .text	00000058 alt_dma_rxchan_open
02807dbc g     F .text	00000660 __umoddi3
0280a258 g     F .text	000000f4 lseek
0280f4ec g     O .rwdata	00000004 _global_impure_ptr
028069cc g     F .text	000005f4 _realloc_r
02811374 g       *ABS*	00000000 __bss_end
0280c9b0 g     F .text	000000f8 alt_iic_isr_register
0280cf74 g     F .text	0000010c alt_tick
02807750 g     F .text	0000066c __udivdi3
0280d848 g     O .rodata	00000028 __mprec_bigtens
028068ac g     F .text	00000120 __s2b
028093b4 g     F .text	00000194 __floatunsidf
02805a9c g     F .text	00000060 __mcmp
02804090 g     F .text	00000018 __fp_lock_all
0280c968 g     F .text	00000048 alt_ic_irq_enabled
0280cedc g     F .text	00000098 alt_alarm_stop
028110b0 g     O .bss	00000004 alt_irq_active
028000ec g     F .exceptions	000000c8 alt_irq_handler
0280e204 g     O .rwdata	00000028 alt_dev_null
0280c3c4 g     F .text	0000001c alt_dcache_flush_all
02805968 g     F .text	00000070 __hi0bits
028092dc g     F .text	000000d8 __fixdfsi
0280f538 g       *ABS*	00000000 __ram_rwdata_end
0280f508 g     O .rwdata	00000008 alt_dev_list
0280b1ac g     F .text	00000080 alt_avalon_dma_space
0280a740 g     F .text	00000124 write
0280d9f0 g       *ABS*	00000000 __ram_rodata_end
02809f10 g     F .text	000000d8 fstat
0280678c g     F .text	00000120 __pow5mult
02811080 g     O .bss	00000004 __nlocale_changed
0280968c g     F .text	00000008 __umodsi3
02811374 g       *ABS*	00000000 end
0280b7b0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0280d698 g       *ABS*	00000000 __CTOR_LIST__
03000000 g       *ABS*	00000000 __alt_stack_pointer
028097f0 g     F .text	00000080 __clzsi2
0280bed4 g     F .text	00000240 altera_avalon_jtag_uart_write
02803fb4 g     F .text	00000004 __sfp_lock_acquire
02805644 g     F .text	000000e4 memchr
02800510 g     F .text	00001ec4 ___vfprintf_internal_r
0280437c g     F .text	00000314 _free_r
0280b22c g     F .text	00000154 alt_avalon_dma_send
0280d488 g     F .text	000001b0 __call_exitprocs
0280f524 g     O .rwdata	00000008 alt_dma_txchan_list
02811084 g     O .bss	00000004 __mlocale_changed
0280f4fc g     O .rwdata	00000004 __malloc_sbrk_base
028001b4 g     F .text	0000003c _start
028110b4 g     O .bss	00000004 _alt_tick_rate
02806284 g     F .text	0000014c __lshift
028110b8 g     O .bss	00000004 _alt_nticks
0280a458 g     F .text	00000124 read
0280a8f8 g     F .text	0000008c alt_sys_init
0280d350 g     F .text	00000134 __register_exitproc
028063d0 g     F .text	00000254 __multiply
0280bb48 g     F .text	00000074 altera_avalon_jtag_uart_close
02809694 g     F .text	00000038 __mulsi3
0280d9f0 g       *ABS*	00000000 __ram_rwdata_start
0280d69c g       *ABS*	00000000 __ram_rodata_start
028110bc g     O .bss	00000028 __malloc_current_mallinfo
02805f7c g     F .text	0000017c __d2b
0280b668 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0280d1c0 g     F .text	000000d0 alt_get_fd
0280c268 g     F .text	0000015c alt_busy_sleep
02809cbc g     F .text	000000c8 __fpcmp_parts_d
02800000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
028073e8 g     F .text	00000070 _close_r
0280d2dc g     F .text	00000074 memcmp
0280b718 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
02811374 g       *ABS*	00000000 __alt_stack_base
0280b760 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
028023f8 g     F .text	0000013c __swsetup_r
02808ce4 g     F .text	00000258 __divdf3
02804160 g     F .text	000000f0 __sfp
02805de0 g     F .text	00000058 __copybits
0280ddfc g     O .rwdata	00000408 __malloc_av_
02803fc0 g     F .text	00000004 __sinit_lock_release
02808920 g     F .text	000003c4 __muldf3
0280718c g     F .text	00000060 __sread
0280d0a0 g     F .text	00000120 alt_find_file
0280c3e0 g     F .text	000000b4 alt_dev_llist_insert
0280a418 g     F .text	00000020 __malloc_lock
0280a654 g     F .text	000000bc sbrk
02803d2c g     F .text	000001fc _fflush_r
02807320 g     F .text	000000c8 _calloc_r
02811080 g       *ABS*	00000000 __bss_start
028058a8 g     F .text	00000098 memset
028001f0 g     F .text	00000128 main
0280b014 g     F .text	00000044 alt_avalon_dma_rx_ioctl
028110a4 g     O .bss	00000004 alt_envp
02811094 g     O .bss	00000004 __malloc_max_total_mem
0280b6c0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
028070a0 g     F .text	00000008 __sclose
03000000 g       *ABS*	00000000 __alt_heap_limit
02807568 g     F .text	00000014 fclose
028111e4 g     O .bss	00000190 _atexit0
02802778 g     F .text	000015b4 _dtoa_r
02804f04 g     F .text	00000740 _malloc_r
0280f514 g     O .rwdata	00000004 alt_errno
02804bf4 g     F .text	000000b8 _fwalk
028095c4 g     F .text	00000060 __divsi3
0280d8a4 g     O .rodata	00000014 __thenan_df
02804250 g     F .text	0000012c _malloc_trim_r
0280d69c g       *ABS*	00000000 __CTOR_END__
028071ec g     F .text	000000bc strcmp
0280d69c g       *ABS*	00000000 __flash_rodata_start
0280d69c g       *ABS*	00000000 __DTOR_LIST__
02808fc4 g     F .text	00000088 __nedf2
0280a8c4 g     F .text	00000034 alt_irq_init
0280a5dc g     F .text	00000078 alt_release_fd
0280d8b8 g     O .rodata	00000100 __clz_tab
02811088 g     O .bss	00000004 _PathLocale
0280d290 g     F .text	00000014 atexit
028072a8 g     F .text	00000078 _write_r
02804d54 g     F .text	0000001c setlocale
0280f4e8 g     O .rwdata	00000004 _impure_ptr
0281109c g     O .bss	00000004 alt_argc
028110a8 g     O .bss	00000004 altera_avalon_timer_ts_base
0280c6c8 g     F .text	00000064 _do_dtors
02800020 g       .exceptions	00000000 alt_irq_entry
02805afc g     F .text	00000080 __ulp
02806fc0 g     F .text	00000040 __isinfd
02804078 g     F .text	00000018 __fp_unlock_all
0280f500 g     O .rwdata	00000008 alt_fs_list
02800020 g       *ABS*	00000000 __ram_exceptions_start
02804cc0 g     F .text	00000010 localeconv
0280c7dc g     F .text	00000050 alt_ic_isr_register
0280f538 g       *ABS*	00000000 _edata
02811374 g       *ABS*	00000000 _end
028001b4 g       *ABS*	00000000 __ram_exceptions_end
0280bbbc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0280c8c8 g     F .text	000000a0 alt_ic_irq_disable
02807110 g     F .text	0000007c __swrite
0280f4f8 g     O .rwdata	00000004 __malloc_trim_threshold
0280d080 g     F .text	00000020 altera_nios2_qsys_irq_init
0280d2a4 g     F .text	00000038 exit
02804b2c g     F .text	000000c8 _fwalk_reent
028060f8 g     F .text	0000018c __mdiff
02809624 g     F .text	00000060 __modsi3
03000000 g       *ABS*	00000000 __alt_data_end
02800020 g     F .exceptions	00000000 alt_exception
02803fb8 g     F .text	00000004 __sfp_lock_release
0280d678 g     F .text	00000020 _exit
02807000 g     F .text	00000030 __isnand
0280c114 g     F .text	00000154 alt_alarm_start
028096cc g     F .text	00000124 __muldi3
02804d70 g     F .text	00000194 __smakebuf_r
02800444 g     F .text	00000074 strlen
0280ccf0 g     F .text	0000018c open
028090d4 g     F .text	00000088 __gedf2
0280c7c0 g     F .text	0000001c alt_icache_flush_all
0280f52c g     O .rwdata	00000004 alt_priority_mask
0280c82c g     F .text	0000009c alt_ic_irq_enable
028023d4 g     F .text	00000024 __vfprintf_internal
0280b058 g     F .text	00000154 alt_avalon_dma_prepare
0280882c g     F .text	00000080 __subdf3
0280f51c g     O .rwdata	00000008 alt_dma_rxchan_list
028059d8 g     F .text	000000c4 __lo0bits
0280f530 g     O .rwdata	00000008 alt_alarm_list
0280c664 g     F .text	00000064 _do_ctors
02809d84 g     F .text	00000100 close
0280a16c g     F .text	00000080 alt_load
02809870 g     F .text	00000314 __pack_d
0280afd0 g     F .text	00000044 alt_avalon_dma_tx_ioctl
00000000  w      *UND*	00000000 free
02803fbc g     F .text	00000004 __sinit_lock_acquire
02806660 g     F .text	0000012c __multadd
02805940 g     F .text	00000028 _Bfree



Disassembly of section .entry:

02800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2800000:	0040a034 	movhi	at,640
    ori r1, r1, %lo(_start)
 2800004:	08406d14 	ori	at,at,436
    jmp r1
 2800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 280002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 280003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 280004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 280005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 280006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 280007c:	10000326 	beq	r2,zero,280008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2800080:	20000226 	beq	r4,zero,280008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2800084:	28000ec0 	call	28000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2800088:	00000306 	br	2800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 280008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 280009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 28000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 28000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 28000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 28000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 28000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 28000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 28000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 28000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 28000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 28000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 28000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 28000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 28000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 28000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 28000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 28000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 28000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 28000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 28000e8:	ef80083a 	eret

028000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 28000ec:	defff904 	addi	sp,sp,-28
 28000f0:	dfc00615 	stw	ra,24(sp)
 28000f4:	df000515 	stw	fp,20(sp)
 28000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 28000fc:	0005313a 	rdctl	r2,ipending
 2800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 280010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2800110:	00800044 	movi	r2,1
 2800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2800118:	e0ffff17 	ldw	r3,-4(fp)
 280011c:	e0bffe17 	ldw	r2,-8(fp)
 2800120:	1884703a 	and	r2,r3,r2
 2800124:	1005003a 	cmpeq	r2,r2,zero
 2800128:	1000161e 	bne	r2,zero,2800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 280012c:	e0bffd17 	ldw	r2,-12(fp)
 2800130:	00c0a074 	movhi	r3,641
 2800134:	18c43904 	addi	r3,r3,4324
 2800138:	100490fa 	slli	r2,r2,3
 280013c:	10c5883a 	add	r2,r2,r3
 2800140:	11400017 	ldw	r5,0(r2)
 2800144:	e0bffd17 	ldw	r2,-12(fp)
 2800148:	00c0a074 	movhi	r3,641
 280014c:	18c43904 	addi	r3,r3,4324
 2800150:	100490fa 	slli	r2,r2,3
 2800154:	10c5883a 	add	r2,r2,r3
 2800158:	10800104 	addi	r2,r2,4
 280015c:	11000017 	ldw	r4,0(r2)
 2800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2800164:	0005313a 	rdctl	r2,ipending
 2800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 280016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2800174:	e0bfff17 	ldw	r2,-4(fp)
 2800178:	1004c03a 	cmpne	r2,r2,zero
 280017c:	103fe31e 	bne	r2,zero,280010c <alt_irq_handler+0x20>
 2800180:	00000706 	br	28001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2800184:	e0bffe17 	ldw	r2,-8(fp)
 2800188:	1085883a 	add	r2,r2,r2
 280018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2800190:	e0bffd17 	ldw	r2,-12(fp)
 2800194:	10800044 	addi	r2,r2,1
 2800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 280019c:	003fde06 	br	2800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 28001a0:	e037883a 	mov	sp,fp
 28001a4:	dfc00117 	ldw	ra,4(sp)
 28001a8:	df000017 	ldw	fp,0(sp)
 28001ac:	dec00204 	addi	sp,sp,8
 28001b0:	f800283a 	ret

Disassembly of section .text:

028001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 28001b4:	06c0c034 	movhi	sp,768
    ori sp, sp, %lo(__alt_stack_pointer)
 28001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 28001bc:	0680a074 	movhi	gp,641
    ori gp, gp, %lo(_gp)
 28001c0:	d69d3a14 	ori	gp,gp,29928
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 28001c4:	0080a074 	movhi	r2,641
    ori r2, r2, %lo(__bss_start)
 28001c8:	10842014 	ori	r2,r2,4224

    movhi r3, %hi(__bss_end)
 28001cc:	00c0a074 	movhi	r3,641
    ori r3, r3, %lo(__bss_end)
 28001d0:	18c4dd14 	ori	r3,r3,4980

    beq r2, r3, 1f
 28001d4:	10c00326 	beq	r2,r3,28001e4 <_start+0x30>

0:
    stw zero, (r2)
 28001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 28001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 28001e0:	10fffd36 	bltu	r2,r3,28001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 28001e4:	280a16c0 	call	280a16c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 28001e8:	280a3ac0 	call	280a3ac <alt_main>

028001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 28001ec:	003fff06 	br	28001ec <alt_after_alt_main>

028001f0 <main>:
#include <system.h>
#include <io.h>
#include <unistd.h>

int main()
{
 28001f0:	defffb04 	addi	sp,sp,-20
 28001f4:	dfc00415 	stw	ra,16(sp)
 28001f8:	df000315 	stw	fp,12(sp)
 28001fc:	df000304 	addi	fp,sp,12
  int bt,led,i;
  led=0x02;
 2800200:	00800084 	movi	r2,2
 2800204:	e0bffe15 	stw	r2,-8(fp)
  printf("test\n");
 2800208:	0100a074 	movhi	r4,641
 280020c:	2135a704 	addi	r4,r4,-10596
 2800210:	28004300 	call	2800430 <puts>
 2800214:	00000006 	br	2800218 <main+0x28>
  while(1){
	  bt=IORD(BUTTON_BASE, 3);
 2800218:	00804034 	movhi	r2,256
 280021c:	10801b04 	addi	r2,r2,108
 2800220:	10800037 	ldwio	r2,0(r2)
 2800224:	e0bfff15 	stw	r2,-4(fp)
	  if(bt==2){
 2800228:	e0bfff17 	ldw	r2,-4(fp)
 280022c:	10800098 	cmpnei	r2,r2,2
 2800230:	103ff91e 	bne	r2,zero,2800218 <main+0x28>
		  IOWR(BUTTON_BASE, 3, 0);
 2800234:	00804034 	movhi	r2,256
 2800238:	10801b04 	addi	r2,r2,108
 280023c:	10000035 	stwio	zero,0(r2)
		  printf("%d\n",bt);
 2800240:	0100a074 	movhi	r4,641
 2800244:	2135a904 	addi	r4,r4,-10588
 2800248:	e17fff17 	ldw	r5,-4(fp)
 280024c:	28003180 	call	2800318 <printf>
		  for(i=0;i<5;i++){
 2800250:	e03ffd15 	stw	zero,-12(fp)
 2800254:	00001406 	br	28002a8 <main+0xb8>
			  IOWR(LED_BASE, 0, led);
 2800258:	00c04034 	movhi	r3,256
 280025c:	18c01c04 	addi	r3,r3,112
 2800260:	e0bffe17 	ldw	r2,-8(fp)
 2800264:	18800035 	stwio	r2,0(r3)
			  usleep(100000);
 2800268:	010000b4 	movhi	r4,2
 280026c:	2121a804 	addi	r4,r4,-31072
 2800270:	280a7100 	call	280a710 <usleep>
			  led = led << 2;
 2800274:	e0bffe17 	ldw	r2,-8(fp)
 2800278:	1085883a 	add	r2,r2,r2
 280027c:	1085883a 	add	r2,r2,r2
 2800280:	e0bffe15 	stw	r2,-8(fp)
			  if(led > 0x200){
 2800284:	e0bffe17 	ldw	r2,-8(fp)
 2800288:	10808050 	cmplti	r2,r2,513
 280028c:	1000031e 	bne	r2,zero,280029c <main+0xac>
				  led = 0x100;
 2800290:	00804004 	movi	r2,256
 2800294:	e0bffe15 	stw	r2,-8(fp)
				  break;
 2800298:	00000606 	br	28002b4 <main+0xc4>
  while(1){
	  bt=IORD(BUTTON_BASE, 3);
	  if(bt==2){
		  IOWR(BUTTON_BASE, 3, 0);
		  printf("%d\n",bt);
		  for(i=0;i<5;i++){
 280029c:	e0bffd17 	ldw	r2,-12(fp)
 28002a0:	10800044 	addi	r2,r2,1
 28002a4:	e0bffd15 	stw	r2,-12(fp)
 28002a8:	e0bffd17 	ldw	r2,-12(fp)
 28002ac:	10800150 	cmplti	r2,r2,5
 28002b0:	103fe91e 	bne	r2,zero,2800258 <main+0x68>
			  if(led > 0x200){
				  led = 0x100;
				  break;
			  }
		  }
		  for(i=0;i<5;i++){
 28002b4:	e03ffd15 	stw	zero,-12(fp)
 28002b8:	00001306 	br	2800308 <main+0x118>
			  IOWR(LED_BASE, 0, led);
 28002bc:	00c04034 	movhi	r3,256
 28002c0:	18c01c04 	addi	r3,r3,112
 28002c4:	e0bffe17 	ldw	r2,-8(fp)
 28002c8:	18800035 	stwio	r2,0(r3)
			  usleep(100000);
 28002cc:	010000b4 	movhi	r4,2
 28002d0:	2121a804 	addi	r4,r4,-31072
 28002d4:	280a7100 	call	280a710 <usleep>
			  led = led >> 2;
 28002d8:	e0bffe17 	ldw	r2,-8(fp)
 28002dc:	1005d0ba 	srai	r2,r2,2
 28002e0:	e0bffe15 	stw	r2,-8(fp)
			  if(led < 0x01){
 28002e4:	e0bffe17 	ldw	r2,-8(fp)
 28002e8:	10800048 	cmpgei	r2,r2,1
 28002ec:	1000031e 	bne	r2,zero,28002fc <main+0x10c>
				  led = 0x02;
 28002f0:	00800084 	movi	r2,2
 28002f4:	e0bffe15 	stw	r2,-8(fp)
				  break;
 28002f8:	003fc706 	br	2800218 <main+0x28>
			  if(led > 0x200){
				  led = 0x100;
				  break;
			  }
		  }
		  for(i=0;i<5;i++){
 28002fc:	e0bffd17 	ldw	r2,-12(fp)
 2800300:	10800044 	addi	r2,r2,1
 2800304:	e0bffd15 	stw	r2,-12(fp)
 2800308:	e0bffd17 	ldw	r2,-12(fp)
 280030c:	10800150 	cmplti	r2,r2,5
 2800310:	103fea1e 	bne	r2,zero,28002bc <main+0xcc>
				  led = 0x02;
				  break;
			  }
		  }
	  }
  }
 2800314:	003fc006 	br	2800218 <main+0x28>

02800318 <printf>:
 2800318:	defffb04 	addi	sp,sp,-20
 280031c:	dfc00115 	stw	ra,4(sp)
 2800320:	d9400215 	stw	r5,8(sp)
 2800324:	d9800315 	stw	r6,12(sp)
 2800328:	d9c00415 	stw	r7,16(sp)
 280032c:	0080a074 	movhi	r2,641
 2800330:	10bd3a04 	addi	r2,r2,-2840
 2800334:	10c00017 	ldw	r3,0(r2)
 2800338:	200b883a 	mov	r5,r4
 280033c:	d8800204 	addi	r2,sp,8
 2800340:	19000217 	ldw	r4,8(r3)
 2800344:	100d883a 	mov	r6,r2
 2800348:	d8800015 	stw	r2,0(sp)
 280034c:	28023d40 	call	28023d4 <__vfprintf_internal>
 2800350:	dfc00117 	ldw	ra,4(sp)
 2800354:	dec00504 	addi	sp,sp,20
 2800358:	f800283a 	ret

0280035c <_printf_r>:
 280035c:	defffc04 	addi	sp,sp,-16
 2800360:	dfc00115 	stw	ra,4(sp)
 2800364:	d9800215 	stw	r6,8(sp)
 2800368:	d9c00315 	stw	r7,12(sp)
 280036c:	280d883a 	mov	r6,r5
 2800370:	21400217 	ldw	r5,8(r4)
 2800374:	d8c00204 	addi	r3,sp,8
 2800378:	180f883a 	mov	r7,r3
 280037c:	d8c00015 	stw	r3,0(sp)
 2800380:	28005100 	call	2800510 <___vfprintf_internal_r>
 2800384:	dfc00117 	ldw	ra,4(sp)
 2800388:	dec00404 	addi	sp,sp,16
 280038c:	f800283a 	ret

02800390 <_puts_r>:
 2800390:	defff604 	addi	sp,sp,-40
 2800394:	dc400715 	stw	r17,28(sp)
 2800398:	2023883a 	mov	r17,r4
 280039c:	2809883a 	mov	r4,r5
 28003a0:	dfc00915 	stw	ra,36(sp)
 28003a4:	dcc00815 	stw	r19,32(sp)
 28003a8:	2827883a 	mov	r19,r5
 28003ac:	28004440 	call	2800444 <strlen>
 28003b0:	89400217 	ldw	r5,8(r17)
 28003b4:	00c0a074 	movhi	r3,641
 28003b8:	18f5aa04 	addi	r3,r3,-10584
 28003bc:	01c00044 	movi	r7,1
 28003c0:	12000044 	addi	r8,r2,1
 28003c4:	d8c00515 	stw	r3,20(sp)
 28003c8:	d9c00615 	stw	r7,24(sp)
 28003cc:	d8c00304 	addi	r3,sp,12
 28003d0:	01c00084 	movi	r7,2
 28003d4:	8809883a 	mov	r4,r17
 28003d8:	d80d883a 	mov	r6,sp
 28003dc:	d8c00015 	stw	r3,0(sp)
 28003e0:	dcc00315 	stw	r19,12(sp)
 28003e4:	da000215 	stw	r8,8(sp)
 28003e8:	d9c00115 	stw	r7,4(sp)
 28003ec:	d8800415 	stw	r2,16(sp)
 28003f0:	28046900 	call	2804690 <__sfvwrite_r>
 28003f4:	00ffffc4 	movi	r3,-1
 28003f8:	10000626 	beq	r2,zero,2800414 <_puts_r+0x84>
 28003fc:	1805883a 	mov	r2,r3
 2800400:	dfc00917 	ldw	ra,36(sp)
 2800404:	dcc00817 	ldw	r19,32(sp)
 2800408:	dc400717 	ldw	r17,28(sp)
 280040c:	dec00a04 	addi	sp,sp,40
 2800410:	f800283a 	ret
 2800414:	00c00284 	movi	r3,10
 2800418:	1805883a 	mov	r2,r3
 280041c:	dfc00917 	ldw	ra,36(sp)
 2800420:	dcc00817 	ldw	r19,32(sp)
 2800424:	dc400717 	ldw	r17,28(sp)
 2800428:	dec00a04 	addi	sp,sp,40
 280042c:	f800283a 	ret

02800430 <puts>:
 2800430:	0080a074 	movhi	r2,641
 2800434:	10bd3a04 	addi	r2,r2,-2840
 2800438:	200b883a 	mov	r5,r4
 280043c:	11000017 	ldw	r4,0(r2)
 2800440:	28003901 	jmpi	2800390 <_puts_r>

02800444 <strlen>:
 2800444:	208000cc 	andi	r2,r4,3
 2800448:	2011883a 	mov	r8,r4
 280044c:	1000161e 	bne	r2,zero,28004a8 <strlen+0x64>
 2800450:	20c00017 	ldw	r3,0(r4)
 2800454:	017fbff4 	movhi	r5,65279
 2800458:	297fbfc4 	addi	r5,r5,-257
 280045c:	01e02074 	movhi	r7,32897
 2800460:	39e02004 	addi	r7,r7,-32640
 2800464:	1945883a 	add	r2,r3,r5
 2800468:	11c4703a 	and	r2,r2,r7
 280046c:	00c6303a 	nor	r3,zero,r3
 2800470:	1886703a 	and	r3,r3,r2
 2800474:	18000c1e 	bne	r3,zero,28004a8 <strlen+0x64>
 2800478:	280d883a 	mov	r6,r5
 280047c:	380b883a 	mov	r5,r7
 2800480:	21000104 	addi	r4,r4,4
 2800484:	20800017 	ldw	r2,0(r4)
 2800488:	1187883a 	add	r3,r2,r6
 280048c:	1946703a 	and	r3,r3,r5
 2800490:	0084303a 	nor	r2,zero,r2
 2800494:	10c4703a 	and	r2,r2,r3
 2800498:	103ff926 	beq	r2,zero,2800480 <strlen+0x3c>
 280049c:	20800007 	ldb	r2,0(r4)
 28004a0:	10000326 	beq	r2,zero,28004b0 <strlen+0x6c>
 28004a4:	21000044 	addi	r4,r4,1
 28004a8:	20800007 	ldb	r2,0(r4)
 28004ac:	103ffd1e 	bne	r2,zero,28004a4 <strlen+0x60>
 28004b0:	2205c83a 	sub	r2,r4,r8
 28004b4:	f800283a 	ret

028004b8 <__sprint_r>:
 28004b8:	30800217 	ldw	r2,8(r6)
 28004bc:	defffe04 	addi	sp,sp,-8
 28004c0:	dc000015 	stw	r16,0(sp)
 28004c4:	dfc00115 	stw	ra,4(sp)
 28004c8:	3021883a 	mov	r16,r6
 28004cc:	0007883a 	mov	r3,zero
 28004d0:	1000061e 	bne	r2,zero,28004ec <__sprint_r+0x34>
 28004d4:	1805883a 	mov	r2,r3
 28004d8:	30000115 	stw	zero,4(r6)
 28004dc:	dfc00117 	ldw	ra,4(sp)
 28004e0:	dc000017 	ldw	r16,0(sp)
 28004e4:	dec00204 	addi	sp,sp,8
 28004e8:	f800283a 	ret
 28004ec:	28046900 	call	2804690 <__sfvwrite_r>
 28004f0:	1007883a 	mov	r3,r2
 28004f4:	1805883a 	mov	r2,r3
 28004f8:	80000115 	stw	zero,4(r16)
 28004fc:	80000215 	stw	zero,8(r16)
 2800500:	dfc00117 	ldw	ra,4(sp)
 2800504:	dc000017 	ldw	r16,0(sp)
 2800508:	dec00204 	addi	sp,sp,8
 280050c:	f800283a 	ret

02800510 <___vfprintf_internal_r>:
 2800510:	defea404 	addi	sp,sp,-1392
 2800514:	dd815815 	stw	r22,1376(sp)
 2800518:	dc015215 	stw	r16,1352(sp)
 280051c:	d9c15115 	stw	r7,1348(sp)
 2800520:	dfc15b15 	stw	ra,1388(sp)
 2800524:	df015a15 	stw	fp,1384(sp)
 2800528:	ddc15915 	stw	r23,1380(sp)
 280052c:	dd415715 	stw	r21,1372(sp)
 2800530:	dd015615 	stw	r20,1368(sp)
 2800534:	dcc15515 	stw	r19,1364(sp)
 2800538:	dc815415 	stw	r18,1360(sp)
 280053c:	dc415315 	stw	r17,1356(sp)
 2800540:	282d883a 	mov	r22,r5
 2800544:	3021883a 	mov	r16,r6
 2800548:	d9014f15 	stw	r4,1340(sp)
 280054c:	2804cb40 	call	2804cb4 <_localeconv_r>
 2800550:	10800017 	ldw	r2,0(r2)
 2800554:	d9c15117 	ldw	r7,1348(sp)
 2800558:	d8814915 	stw	r2,1316(sp)
 280055c:	d8814f17 	ldw	r2,1340(sp)
 2800560:	10000226 	beq	r2,zero,280056c <___vfprintf_internal_r+0x5c>
 2800564:	10800e17 	ldw	r2,56(r2)
 2800568:	10020d26 	beq	r2,zero,2800da0 <___vfprintf_internal_r+0x890>
 280056c:	b080030b 	ldhu	r2,12(r22)
 2800570:	1080020c 	andi	r2,r2,8
 2800574:	10020e26 	beq	r2,zero,2800db0 <___vfprintf_internal_r+0x8a0>
 2800578:	b0800417 	ldw	r2,16(r22)
 280057c:	10020c26 	beq	r2,zero,2800db0 <___vfprintf_internal_r+0x8a0>
 2800580:	b200030b 	ldhu	r8,12(r22)
 2800584:	00800284 	movi	r2,10
 2800588:	40c0068c 	andi	r3,r8,26
 280058c:	18802f1e 	bne	r3,r2,280064c <___vfprintf_internal_r+0x13c>
 2800590:	b080038f 	ldh	r2,14(r22)
 2800594:	10002d16 	blt	r2,zero,280064c <___vfprintf_internal_r+0x13c>
 2800598:	b240038b 	ldhu	r9,14(r22)
 280059c:	b2800717 	ldw	r10,28(r22)
 28005a0:	b2c00917 	ldw	r11,36(r22)
 28005a4:	d9014f17 	ldw	r4,1340(sp)
 28005a8:	dc402904 	addi	r17,sp,164
 28005ac:	d8804004 	addi	r2,sp,256
 28005b0:	00c10004 	movi	r3,1024
 28005b4:	423fff4c 	andi	r8,r8,65533
 28005b8:	800d883a 	mov	r6,r16
 28005bc:	880b883a 	mov	r5,r17
 28005c0:	da002c0d 	sth	r8,176(sp)
 28005c4:	da402c8d 	sth	r9,178(sp)
 28005c8:	da803015 	stw	r10,192(sp)
 28005cc:	dac03215 	stw	r11,200(sp)
 28005d0:	d8802d15 	stw	r2,180(sp)
 28005d4:	d8c02e15 	stw	r3,184(sp)
 28005d8:	d8802915 	stw	r2,164(sp)
 28005dc:	d8c02b15 	stw	r3,172(sp)
 28005e0:	d8002f15 	stw	zero,188(sp)
 28005e4:	28005100 	call	2800510 <___vfprintf_internal_r>
 28005e8:	d8814b15 	stw	r2,1324(sp)
 28005ec:	10000416 	blt	r2,zero,2800600 <___vfprintf_internal_r+0xf0>
 28005f0:	d9014f17 	ldw	r4,1340(sp)
 28005f4:	880b883a 	mov	r5,r17
 28005f8:	2803d2c0 	call	2803d2c <_fflush_r>
 28005fc:	1002321e 	bne	r2,zero,2800ec8 <___vfprintf_internal_r+0x9b8>
 2800600:	d8802c0b 	ldhu	r2,176(sp)
 2800604:	1080100c 	andi	r2,r2,64
 2800608:	10000326 	beq	r2,zero,2800618 <___vfprintf_internal_r+0x108>
 280060c:	b080030b 	ldhu	r2,12(r22)
 2800610:	10801014 	ori	r2,r2,64
 2800614:	b080030d 	sth	r2,12(r22)
 2800618:	d8814b17 	ldw	r2,1324(sp)
 280061c:	dfc15b17 	ldw	ra,1388(sp)
 2800620:	df015a17 	ldw	fp,1384(sp)
 2800624:	ddc15917 	ldw	r23,1380(sp)
 2800628:	dd815817 	ldw	r22,1376(sp)
 280062c:	dd415717 	ldw	r21,1372(sp)
 2800630:	dd015617 	ldw	r20,1368(sp)
 2800634:	dcc15517 	ldw	r19,1364(sp)
 2800638:	dc815417 	ldw	r18,1360(sp)
 280063c:	dc415317 	ldw	r17,1356(sp)
 2800640:	dc015217 	ldw	r16,1352(sp)
 2800644:	dec15c04 	addi	sp,sp,1392
 2800648:	f800283a 	ret
 280064c:	0005883a 	mov	r2,zero
 2800650:	0007883a 	mov	r3,zero
 2800654:	dd401904 	addi	r21,sp,100
 2800658:	d8814215 	stw	r2,1288(sp)
 280065c:	802f883a 	mov	r23,r16
 2800660:	d8c14315 	stw	r3,1292(sp)
 2800664:	d8014b15 	stw	zero,1324(sp)
 2800668:	d8014815 	stw	zero,1312(sp)
 280066c:	d8014415 	stw	zero,1296(sp)
 2800670:	d8014715 	stw	zero,1308(sp)
 2800674:	dd400c15 	stw	r21,48(sp)
 2800678:	d8000e15 	stw	zero,56(sp)
 280067c:	d8000d15 	stw	zero,52(sp)
 2800680:	b8800007 	ldb	r2,0(r23)
 2800684:	10001926 	beq	r2,zero,28006ec <___vfprintf_internal_r+0x1dc>
 2800688:	00c00944 	movi	r3,37
 280068c:	10c01726 	beq	r2,r3,28006ec <___vfprintf_internal_r+0x1dc>
 2800690:	b821883a 	mov	r16,r23
 2800694:	00000106 	br	280069c <___vfprintf_internal_r+0x18c>
 2800698:	10c00326 	beq	r2,r3,28006a8 <___vfprintf_internal_r+0x198>
 280069c:	84000044 	addi	r16,r16,1
 28006a0:	80800007 	ldb	r2,0(r16)
 28006a4:	103ffc1e 	bne	r2,zero,2800698 <___vfprintf_internal_r+0x188>
 28006a8:	85e7c83a 	sub	r19,r16,r23
 28006ac:	98000e26 	beq	r19,zero,28006e8 <___vfprintf_internal_r+0x1d8>
 28006b0:	dc800e17 	ldw	r18,56(sp)
 28006b4:	dc400d17 	ldw	r17,52(sp)
 28006b8:	008001c4 	movi	r2,7
 28006bc:	94e5883a 	add	r18,r18,r19
 28006c0:	8c400044 	addi	r17,r17,1
 28006c4:	adc00015 	stw	r23,0(r21)
 28006c8:	dc800e15 	stw	r18,56(sp)
 28006cc:	acc00115 	stw	r19,4(r21)
 28006d0:	dc400d15 	stw	r17,52(sp)
 28006d4:	14428b16 	blt	r2,r17,2801104 <___vfprintf_internal_r+0xbf4>
 28006d8:	ad400204 	addi	r21,r21,8
 28006dc:	d9014b17 	ldw	r4,1324(sp)
 28006e0:	24c9883a 	add	r4,r4,r19
 28006e4:	d9014b15 	stw	r4,1324(sp)
 28006e8:	802f883a 	mov	r23,r16
 28006ec:	b8800007 	ldb	r2,0(r23)
 28006f0:	10013c26 	beq	r2,zero,2800be4 <___vfprintf_internal_r+0x6d4>
 28006f4:	bdc00044 	addi	r23,r23,1
 28006f8:	d8000405 	stb	zero,16(sp)
 28006fc:	b8c00007 	ldb	r3,0(r23)
 2800700:	04ffffc4 	movi	r19,-1
 2800704:	d8014c15 	stw	zero,1328(sp)
 2800708:	d8014a15 	stw	zero,1320(sp)
 280070c:	d8c14d15 	stw	r3,1332(sp)
 2800710:	bdc00044 	addi	r23,r23,1
 2800714:	d9414d17 	ldw	r5,1332(sp)
 2800718:	00801604 	movi	r2,88
 280071c:	28fff804 	addi	r3,r5,-32
 2800720:	10c06036 	bltu	r2,r3,28008a4 <___vfprintf_internal_r+0x394>
 2800724:	18c5883a 	add	r2,r3,r3
 2800728:	1085883a 	add	r2,r2,r2
 280072c:	00c0a034 	movhi	r3,640
 2800730:	18c1d004 	addi	r3,r3,1856
 2800734:	10c5883a 	add	r2,r2,r3
 2800738:	11000017 	ldw	r4,0(r2)
 280073c:	2000683a 	jmp	r4
 2800740:	028016b4 	movhi	r10,90
 2800744:	028008a4 	muli	r10,zero,34
 2800748:	028008a4 	muli	r10,zero,34
 280074c:	028016a0 	cmpeqi	r10,zero,90
 2800750:	028008a4 	muli	r10,zero,34
 2800754:	028008a4 	muli	r10,zero,34
 2800758:	028008a4 	muli	r10,zero,34
 280075c:	028008a4 	muli	r10,zero,34
 2800760:	028008a4 	muli	r10,zero,34
 2800764:	028008a4 	muli	r10,zero,34
 2800768:	02801480 	call	280148 <__alt_mem_sdram_ctrl-0x257feb8>
 280076c:	02801690 	cmplti	r10,zero,90
 2800770:	028008a4 	muli	r10,zero,34
 2800774:	02801498 	cmpnei	r10,zero,82
 2800778:	02801738 	rdprs	r10,zero,92
 280077c:	028008a4 	muli	r10,zero,34
 2800780:	02801724 	muli	r10,zero,92
 2800784:	028016e0 	cmpeqi	r10,zero,91
 2800788:	028016e0 	cmpeqi	r10,zero,91
 280078c:	028016e0 	cmpeqi	r10,zero,91
 2800790:	028016e0 	cmpeqi	r10,zero,91
 2800794:	028016e0 	cmpeqi	r10,zero,91
 2800798:	028016e0 	cmpeqi	r10,zero,91
 280079c:	028016e0 	cmpeqi	r10,zero,91
 28007a0:	028016e0 	cmpeqi	r10,zero,91
 28007a4:	028016e0 	cmpeqi	r10,zero,91
 28007a8:	028008a4 	muli	r10,zero,34
 28007ac:	028008a4 	muli	r10,zero,34
 28007b0:	028008a4 	muli	r10,zero,34
 28007b4:	028008a4 	muli	r10,zero,34
 28007b8:	028008a4 	muli	r10,zero,34
 28007bc:	028008a4 	muli	r10,zero,34
 28007c0:	028008a4 	muli	r10,zero,34
 28007c4:	028008a4 	muli	r10,zero,34
 28007c8:	028008a4 	muli	r10,zero,34
 28007cc:	028008a4 	muli	r10,zero,34
 28007d0:	02800efc 	xorhi	r10,zero,59
 28007d4:	02801568 	cmpgeui	r10,zero,85
 28007d8:	028008a4 	muli	r10,zero,34
 28007dc:	02801568 	cmpgeui	r10,zero,85
 28007e0:	028008a4 	muli	r10,zero,34
 28007e4:	028008a4 	muli	r10,zero,34
 28007e8:	028008a4 	muli	r10,zero,34
 28007ec:	028008a4 	muli	r10,zero,34
 28007f0:	028016cc 	andi	r10,zero,91
 28007f4:	028008a4 	muli	r10,zero,34
 28007f8:	028008a4 	muli	r10,zero,34
 28007fc:	02800fb0 	cmpltui	r10,zero,62
 2800800:	028008a4 	muli	r10,zero,34
 2800804:	028008a4 	muli	r10,zero,34
 2800808:	028008a4 	muli	r10,zero,34
 280080c:	028008a4 	muli	r10,zero,34
 2800810:	028008a4 	muli	r10,zero,34
 2800814:	02800ffc 	xorhi	r10,zero,63
 2800818:	028008a4 	muli	r10,zero,34
 280081c:	028008a4 	muli	r10,zero,34
 2800820:	0280161c 	xori	r10,zero,88
 2800824:	028008a4 	muli	r10,zero,34
 2800828:	028008a4 	muli	r10,zero,34
 280082c:	028008a4 	muli	r10,zero,34
 2800830:	028008a4 	muli	r10,zero,34
 2800834:	028008a4 	muli	r10,zero,34
 2800838:	028008a4 	muli	r10,zero,34
 280083c:	028008a4 	muli	r10,zero,34
 2800840:	028008a4 	muli	r10,zero,34
 2800844:	028008a4 	muli	r10,zero,34
 2800848:	028008a4 	muli	r10,zero,34
 280084c:	028015f0 	cmpltui	r10,zero,87
 2800850:	02800f08 	cmpgei	r10,zero,60
 2800854:	02801568 	cmpgeui	r10,zero,85
 2800858:	02801568 	cmpgeui	r10,zero,85
 280085c:	02801568 	cmpgeui	r10,zero,85
 2800860:	02801554 	movui	r10,85
 2800864:	02800f08 	cmpgei	r10,zero,60
 2800868:	028008a4 	muli	r10,zero,34
 280086c:	028008a4 	muli	r10,zero,34
 2800870:	028014dc 	xori	r10,zero,83
 2800874:	028008a4 	muli	r10,zero,34
 2800878:	028014ac 	andhi	r10,zero,82
 280087c:	02800fbc 	xorhi	r10,zero,62
 2800880:	0280150c 	andi	r10,zero,84
 2800884:	028014f8 	rdprs	r10,zero,83
 2800888:	028008a4 	muli	r10,zero,34
 280088c:	028017a0 	cmpeqi	r10,zero,94
 2800890:	028008a4 	muli	r10,zero,34
 2800894:	02801008 	cmpgei	r10,zero,64
 2800898:	028008a4 	muli	r10,zero,34
 280089c:	028008a4 	muli	r10,zero,34
 28008a0:	02801680 	call	280168 <__alt_mem_sdram_ctrl-0x257fe98>
 28008a4:	d9014d17 	ldw	r4,1332(sp)
 28008a8:	2000ce26 	beq	r4,zero,2800be4 <___vfprintf_internal_r+0x6d4>
 28008ac:	01400044 	movi	r5,1
 28008b0:	d9800f04 	addi	r6,sp,60
 28008b4:	d9c14015 	stw	r7,1280(sp)
 28008b8:	d9414515 	stw	r5,1300(sp)
 28008bc:	d9814115 	stw	r6,1284(sp)
 28008c0:	280f883a 	mov	r7,r5
 28008c4:	d9000f05 	stb	r4,60(sp)
 28008c8:	d8000405 	stb	zero,16(sp)
 28008cc:	d8014615 	stw	zero,1304(sp)
 28008d0:	d8c14c17 	ldw	r3,1328(sp)
 28008d4:	1880008c 	andi	r2,r3,2
 28008d8:	1005003a 	cmpeq	r2,r2,zero
 28008dc:	d8815015 	stw	r2,1344(sp)
 28008e0:	1000031e 	bne	r2,zero,28008f0 <___vfprintf_internal_r+0x3e0>
 28008e4:	d9014517 	ldw	r4,1300(sp)
 28008e8:	21000084 	addi	r4,r4,2
 28008ec:	d9014515 	stw	r4,1300(sp)
 28008f0:	d9414c17 	ldw	r5,1328(sp)
 28008f4:	2940210c 	andi	r5,r5,132
 28008f8:	d9414e15 	stw	r5,1336(sp)
 28008fc:	28002d1e 	bne	r5,zero,28009b4 <___vfprintf_internal_r+0x4a4>
 2800900:	d9814a17 	ldw	r6,1320(sp)
 2800904:	d8814517 	ldw	r2,1300(sp)
 2800908:	30a1c83a 	sub	r16,r6,r2
 280090c:	0400290e 	bge	zero,r16,28009b4 <___vfprintf_internal_r+0x4a4>
 2800910:	00800404 	movi	r2,16
 2800914:	14045e0e 	bge	r2,r16,2801a90 <___vfprintf_internal_r+0x1580>
 2800918:	dc800e17 	ldw	r18,56(sp)
 280091c:	dc400d17 	ldw	r17,52(sp)
 2800920:	1027883a 	mov	r19,r2
 2800924:	0700a074 	movhi	fp,641
 2800928:	e735c684 	addi	fp,fp,-10470
 280092c:	050001c4 	movi	r20,7
 2800930:	00000306 	br	2800940 <___vfprintf_internal_r+0x430>
 2800934:	843ffc04 	addi	r16,r16,-16
 2800938:	ad400204 	addi	r21,r21,8
 280093c:	9c00130e 	bge	r19,r16,280098c <___vfprintf_internal_r+0x47c>
 2800940:	94800404 	addi	r18,r18,16
 2800944:	8c400044 	addi	r17,r17,1
 2800948:	af000015 	stw	fp,0(r21)
 280094c:	acc00115 	stw	r19,4(r21)
 2800950:	dc800e15 	stw	r18,56(sp)
 2800954:	dc400d15 	stw	r17,52(sp)
 2800958:	a47ff60e 	bge	r20,r17,2800934 <___vfprintf_internal_r+0x424>
 280095c:	d9014f17 	ldw	r4,1340(sp)
 2800960:	b00b883a 	mov	r5,r22
 2800964:	d9800c04 	addi	r6,sp,48
 2800968:	d9c15115 	stw	r7,1348(sp)
 280096c:	28004b80 	call	28004b8 <__sprint_r>
 2800970:	d9c15117 	ldw	r7,1348(sp)
 2800974:	10009e1e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2800978:	843ffc04 	addi	r16,r16,-16
 280097c:	dc800e17 	ldw	r18,56(sp)
 2800980:	dc400d17 	ldw	r17,52(sp)
 2800984:	dd401904 	addi	r21,sp,100
 2800988:	9c3fed16 	blt	r19,r16,2800940 <___vfprintf_internal_r+0x430>
 280098c:	9425883a 	add	r18,r18,r16
 2800990:	8c400044 	addi	r17,r17,1
 2800994:	008001c4 	movi	r2,7
 2800998:	af000015 	stw	fp,0(r21)
 280099c:	ac000115 	stw	r16,4(r21)
 28009a0:	dc800e15 	stw	r18,56(sp)
 28009a4:	dc400d15 	stw	r17,52(sp)
 28009a8:	1441f516 	blt	r2,r17,2801180 <___vfprintf_internal_r+0xc70>
 28009ac:	ad400204 	addi	r21,r21,8
 28009b0:	00000206 	br	28009bc <___vfprintf_internal_r+0x4ac>
 28009b4:	dc800e17 	ldw	r18,56(sp)
 28009b8:	dc400d17 	ldw	r17,52(sp)
 28009bc:	d8800407 	ldb	r2,16(sp)
 28009c0:	10000b26 	beq	r2,zero,28009f0 <___vfprintf_internal_r+0x4e0>
 28009c4:	00800044 	movi	r2,1
 28009c8:	94800044 	addi	r18,r18,1
 28009cc:	8c400044 	addi	r17,r17,1
 28009d0:	a8800115 	stw	r2,4(r21)
 28009d4:	d8c00404 	addi	r3,sp,16
 28009d8:	008001c4 	movi	r2,7
 28009dc:	a8c00015 	stw	r3,0(r21)
 28009e0:	dc800e15 	stw	r18,56(sp)
 28009e4:	dc400d15 	stw	r17,52(sp)
 28009e8:	1441da16 	blt	r2,r17,2801154 <___vfprintf_internal_r+0xc44>
 28009ec:	ad400204 	addi	r21,r21,8
 28009f0:	d9015017 	ldw	r4,1344(sp)
 28009f4:	20000b1e 	bne	r4,zero,2800a24 <___vfprintf_internal_r+0x514>
 28009f8:	d8800444 	addi	r2,sp,17
 28009fc:	94800084 	addi	r18,r18,2
 2800a00:	8c400044 	addi	r17,r17,1
 2800a04:	a8800015 	stw	r2,0(r21)
 2800a08:	00c00084 	movi	r3,2
 2800a0c:	008001c4 	movi	r2,7
 2800a10:	a8c00115 	stw	r3,4(r21)
 2800a14:	dc800e15 	stw	r18,56(sp)
 2800a18:	dc400d15 	stw	r17,52(sp)
 2800a1c:	1441c216 	blt	r2,r17,2801128 <___vfprintf_internal_r+0xc18>
 2800a20:	ad400204 	addi	r21,r21,8
 2800a24:	d9414e17 	ldw	r5,1336(sp)
 2800a28:	00802004 	movi	r2,128
 2800a2c:	2880b126 	beq	r5,r2,2800cf4 <___vfprintf_internal_r+0x7e4>
 2800a30:	d8c14617 	ldw	r3,1304(sp)
 2800a34:	19e1c83a 	sub	r16,r3,r7
 2800a38:	0400260e 	bge	zero,r16,2800ad4 <___vfprintf_internal_r+0x5c4>
 2800a3c:	00800404 	movi	r2,16
 2800a40:	1403cf0e 	bge	r2,r16,2801980 <___vfprintf_internal_r+0x1470>
 2800a44:	1027883a 	mov	r19,r2
 2800a48:	0700a074 	movhi	fp,641
 2800a4c:	e735c284 	addi	fp,fp,-10486
 2800a50:	050001c4 	movi	r20,7
 2800a54:	00000306 	br	2800a64 <___vfprintf_internal_r+0x554>
 2800a58:	843ffc04 	addi	r16,r16,-16
 2800a5c:	ad400204 	addi	r21,r21,8
 2800a60:	9c00130e 	bge	r19,r16,2800ab0 <___vfprintf_internal_r+0x5a0>
 2800a64:	94800404 	addi	r18,r18,16
 2800a68:	8c400044 	addi	r17,r17,1
 2800a6c:	af000015 	stw	fp,0(r21)
 2800a70:	acc00115 	stw	r19,4(r21)
 2800a74:	dc800e15 	stw	r18,56(sp)
 2800a78:	dc400d15 	stw	r17,52(sp)
 2800a7c:	a47ff60e 	bge	r20,r17,2800a58 <___vfprintf_internal_r+0x548>
 2800a80:	d9014f17 	ldw	r4,1340(sp)
 2800a84:	b00b883a 	mov	r5,r22
 2800a88:	d9800c04 	addi	r6,sp,48
 2800a8c:	d9c15115 	stw	r7,1348(sp)
 2800a90:	28004b80 	call	28004b8 <__sprint_r>
 2800a94:	d9c15117 	ldw	r7,1348(sp)
 2800a98:	1000551e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2800a9c:	843ffc04 	addi	r16,r16,-16
 2800aa0:	dc800e17 	ldw	r18,56(sp)
 2800aa4:	dc400d17 	ldw	r17,52(sp)
 2800aa8:	dd401904 	addi	r21,sp,100
 2800aac:	9c3fed16 	blt	r19,r16,2800a64 <___vfprintf_internal_r+0x554>
 2800ab0:	9425883a 	add	r18,r18,r16
 2800ab4:	8c400044 	addi	r17,r17,1
 2800ab8:	008001c4 	movi	r2,7
 2800abc:	af000015 	stw	fp,0(r21)
 2800ac0:	ac000115 	stw	r16,4(r21)
 2800ac4:	dc800e15 	stw	r18,56(sp)
 2800ac8:	dc400d15 	stw	r17,52(sp)
 2800acc:	14418216 	blt	r2,r17,28010d8 <___vfprintf_internal_r+0xbc8>
 2800ad0:	ad400204 	addi	r21,r21,8
 2800ad4:	d9014c17 	ldw	r4,1328(sp)
 2800ad8:	2080400c 	andi	r2,r4,256
 2800adc:	10004a1e 	bne	r2,zero,2800c08 <___vfprintf_internal_r+0x6f8>
 2800ae0:	d9414117 	ldw	r5,1284(sp)
 2800ae4:	91e5883a 	add	r18,r18,r7
 2800ae8:	8c400044 	addi	r17,r17,1
 2800aec:	008001c4 	movi	r2,7
 2800af0:	a9400015 	stw	r5,0(r21)
 2800af4:	a9c00115 	stw	r7,4(r21)
 2800af8:	dc800e15 	stw	r18,56(sp)
 2800afc:	dc400d15 	stw	r17,52(sp)
 2800b00:	14416716 	blt	r2,r17,28010a0 <___vfprintf_internal_r+0xb90>
 2800b04:	a8c00204 	addi	r3,r21,8
 2800b08:	d9814c17 	ldw	r6,1328(sp)
 2800b0c:	3080010c 	andi	r2,r6,4
 2800b10:	10002826 	beq	r2,zero,2800bb4 <___vfprintf_internal_r+0x6a4>
 2800b14:	d8814a17 	ldw	r2,1320(sp)
 2800b18:	d9014517 	ldw	r4,1300(sp)
 2800b1c:	1121c83a 	sub	r16,r2,r4
 2800b20:	0400240e 	bge	zero,r16,2800bb4 <___vfprintf_internal_r+0x6a4>
 2800b24:	00800404 	movi	r2,16
 2800b28:	1404550e 	bge	r2,r16,2801c80 <___vfprintf_internal_r+0x1770>
 2800b2c:	dc400d17 	ldw	r17,52(sp)
 2800b30:	1027883a 	mov	r19,r2
 2800b34:	0700a074 	movhi	fp,641
 2800b38:	e735c684 	addi	fp,fp,-10470
 2800b3c:	050001c4 	movi	r20,7
 2800b40:	00000306 	br	2800b50 <___vfprintf_internal_r+0x640>
 2800b44:	843ffc04 	addi	r16,r16,-16
 2800b48:	18c00204 	addi	r3,r3,8
 2800b4c:	9c00110e 	bge	r19,r16,2800b94 <___vfprintf_internal_r+0x684>
 2800b50:	94800404 	addi	r18,r18,16
 2800b54:	8c400044 	addi	r17,r17,1
 2800b58:	1f000015 	stw	fp,0(r3)
 2800b5c:	1cc00115 	stw	r19,4(r3)
 2800b60:	dc800e15 	stw	r18,56(sp)
 2800b64:	dc400d15 	stw	r17,52(sp)
 2800b68:	a47ff60e 	bge	r20,r17,2800b44 <___vfprintf_internal_r+0x634>
 2800b6c:	d9014f17 	ldw	r4,1340(sp)
 2800b70:	b00b883a 	mov	r5,r22
 2800b74:	d9800c04 	addi	r6,sp,48
 2800b78:	28004b80 	call	28004b8 <__sprint_r>
 2800b7c:	10001c1e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2800b80:	843ffc04 	addi	r16,r16,-16
 2800b84:	dc800e17 	ldw	r18,56(sp)
 2800b88:	dc400d17 	ldw	r17,52(sp)
 2800b8c:	d8c01904 	addi	r3,sp,100
 2800b90:	9c3fef16 	blt	r19,r16,2800b50 <___vfprintf_internal_r+0x640>
 2800b94:	9425883a 	add	r18,r18,r16
 2800b98:	8c400044 	addi	r17,r17,1
 2800b9c:	008001c4 	movi	r2,7
 2800ba0:	1f000015 	stw	fp,0(r3)
 2800ba4:	1c000115 	stw	r16,4(r3)
 2800ba8:	dc800e15 	stw	r18,56(sp)
 2800bac:	dc400d15 	stw	r17,52(sp)
 2800bb0:	1440cb16 	blt	r2,r17,2800ee0 <___vfprintf_internal_r+0x9d0>
 2800bb4:	d8814a17 	ldw	r2,1320(sp)
 2800bb8:	d9414517 	ldw	r5,1300(sp)
 2800bbc:	1140010e 	bge	r2,r5,2800bc4 <___vfprintf_internal_r+0x6b4>
 2800bc0:	2805883a 	mov	r2,r5
 2800bc4:	d9814b17 	ldw	r6,1324(sp)
 2800bc8:	308d883a 	add	r6,r6,r2
 2800bcc:	d9814b15 	stw	r6,1324(sp)
 2800bd0:	90013b1e 	bne	r18,zero,28010c0 <___vfprintf_internal_r+0xbb0>
 2800bd4:	d9c14017 	ldw	r7,1280(sp)
 2800bd8:	dd401904 	addi	r21,sp,100
 2800bdc:	d8000d15 	stw	zero,52(sp)
 2800be0:	003ea706 	br	2800680 <___vfprintf_internal_r+0x170>
 2800be4:	d8800e17 	ldw	r2,56(sp)
 2800be8:	1005451e 	bne	r2,zero,2802100 <___vfprintf_internal_r+0x1bf0>
 2800bec:	d8000d15 	stw	zero,52(sp)
 2800bf0:	b080030b 	ldhu	r2,12(r22)
 2800bf4:	1080100c 	andi	r2,r2,64
 2800bf8:	103e8726 	beq	r2,zero,2800618 <___vfprintf_internal_r+0x108>
 2800bfc:	00bfffc4 	movi	r2,-1
 2800c00:	d8814b15 	stw	r2,1324(sp)
 2800c04:	003e8406 	br	2800618 <___vfprintf_internal_r+0x108>
 2800c08:	d9814d17 	ldw	r6,1332(sp)
 2800c0c:	00801944 	movi	r2,101
 2800c10:	11806e16 	blt	r2,r6,2800dcc <___vfprintf_internal_r+0x8bc>
 2800c14:	d9414717 	ldw	r5,1308(sp)
 2800c18:	00c00044 	movi	r3,1
 2800c1c:	1943490e 	bge	r3,r5,2801944 <___vfprintf_internal_r+0x1434>
 2800c20:	d8814117 	ldw	r2,1284(sp)
 2800c24:	94800044 	addi	r18,r18,1
 2800c28:	8c400044 	addi	r17,r17,1
 2800c2c:	a8800015 	stw	r2,0(r21)
 2800c30:	008001c4 	movi	r2,7
 2800c34:	a8c00115 	stw	r3,4(r21)
 2800c38:	dc800e15 	stw	r18,56(sp)
 2800c3c:	dc400d15 	stw	r17,52(sp)
 2800c40:	1441ca16 	blt	r2,r17,280136c <___vfprintf_internal_r+0xe5c>
 2800c44:	a8c00204 	addi	r3,r21,8
 2800c48:	d9014917 	ldw	r4,1316(sp)
 2800c4c:	00800044 	movi	r2,1
 2800c50:	94800044 	addi	r18,r18,1
 2800c54:	8c400044 	addi	r17,r17,1
 2800c58:	18800115 	stw	r2,4(r3)
 2800c5c:	008001c4 	movi	r2,7
 2800c60:	19000015 	stw	r4,0(r3)
 2800c64:	dc800e15 	stw	r18,56(sp)
 2800c68:	dc400d15 	stw	r17,52(sp)
 2800c6c:	1441b616 	blt	r2,r17,2801348 <___vfprintf_internal_r+0xe38>
 2800c70:	1cc00204 	addi	r19,r3,8
 2800c74:	d9014217 	ldw	r4,1288(sp)
 2800c78:	d9414317 	ldw	r5,1292(sp)
 2800c7c:	000d883a 	mov	r6,zero
 2800c80:	000f883a 	mov	r7,zero
 2800c84:	2808fc40 	call	2808fc4 <__nedf2>
 2800c88:	10017426 	beq	r2,zero,280125c <___vfprintf_internal_r+0xd4c>
 2800c8c:	d9414717 	ldw	r5,1308(sp)
 2800c90:	d9814117 	ldw	r6,1284(sp)
 2800c94:	8c400044 	addi	r17,r17,1
 2800c98:	2c85883a 	add	r2,r5,r18
 2800c9c:	14bfffc4 	addi	r18,r2,-1
 2800ca0:	28bfffc4 	addi	r2,r5,-1
 2800ca4:	30c00044 	addi	r3,r6,1
 2800ca8:	98800115 	stw	r2,4(r19)
 2800cac:	008001c4 	movi	r2,7
 2800cb0:	98c00015 	stw	r3,0(r19)
 2800cb4:	dc800e15 	stw	r18,56(sp)
 2800cb8:	dc400d15 	stw	r17,52(sp)
 2800cbc:	14418e16 	blt	r2,r17,28012f8 <___vfprintf_internal_r+0xde8>
 2800cc0:	9cc00204 	addi	r19,r19,8
 2800cc4:	d9414817 	ldw	r5,1312(sp)
 2800cc8:	d8800804 	addi	r2,sp,32
 2800ccc:	8c400044 	addi	r17,r17,1
 2800cd0:	9165883a 	add	r18,r18,r5
 2800cd4:	98800015 	stw	r2,0(r19)
 2800cd8:	008001c4 	movi	r2,7
 2800cdc:	99400115 	stw	r5,4(r19)
 2800ce0:	dc800e15 	stw	r18,56(sp)
 2800ce4:	dc400d15 	stw	r17,52(sp)
 2800ce8:	1440ed16 	blt	r2,r17,28010a0 <___vfprintf_internal_r+0xb90>
 2800cec:	98c00204 	addi	r3,r19,8
 2800cf0:	003f8506 	br	2800b08 <___vfprintf_internal_r+0x5f8>
 2800cf4:	d9814a17 	ldw	r6,1320(sp)
 2800cf8:	d8814517 	ldw	r2,1300(sp)
 2800cfc:	30a1c83a 	sub	r16,r6,r2
 2800d00:	043f4b0e 	bge	zero,r16,2800a30 <___vfprintf_internal_r+0x520>
 2800d04:	00800404 	movi	r2,16
 2800d08:	14043a0e 	bge	r2,r16,2801df4 <___vfprintf_internal_r+0x18e4>
 2800d0c:	1027883a 	mov	r19,r2
 2800d10:	0700a074 	movhi	fp,641
 2800d14:	e735c284 	addi	fp,fp,-10486
 2800d18:	050001c4 	movi	r20,7
 2800d1c:	00000306 	br	2800d2c <___vfprintf_internal_r+0x81c>
 2800d20:	843ffc04 	addi	r16,r16,-16
 2800d24:	ad400204 	addi	r21,r21,8
 2800d28:	9c00130e 	bge	r19,r16,2800d78 <___vfprintf_internal_r+0x868>
 2800d2c:	94800404 	addi	r18,r18,16
 2800d30:	8c400044 	addi	r17,r17,1
 2800d34:	af000015 	stw	fp,0(r21)
 2800d38:	acc00115 	stw	r19,4(r21)
 2800d3c:	dc800e15 	stw	r18,56(sp)
 2800d40:	dc400d15 	stw	r17,52(sp)
 2800d44:	a47ff60e 	bge	r20,r17,2800d20 <___vfprintf_internal_r+0x810>
 2800d48:	d9014f17 	ldw	r4,1340(sp)
 2800d4c:	b00b883a 	mov	r5,r22
 2800d50:	d9800c04 	addi	r6,sp,48
 2800d54:	d9c15115 	stw	r7,1348(sp)
 2800d58:	28004b80 	call	28004b8 <__sprint_r>
 2800d5c:	d9c15117 	ldw	r7,1348(sp)
 2800d60:	103fa31e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2800d64:	843ffc04 	addi	r16,r16,-16
 2800d68:	dc800e17 	ldw	r18,56(sp)
 2800d6c:	dc400d17 	ldw	r17,52(sp)
 2800d70:	dd401904 	addi	r21,sp,100
 2800d74:	9c3fed16 	blt	r19,r16,2800d2c <___vfprintf_internal_r+0x81c>
 2800d78:	9425883a 	add	r18,r18,r16
 2800d7c:	8c400044 	addi	r17,r17,1
 2800d80:	008001c4 	movi	r2,7
 2800d84:	af000015 	stw	fp,0(r21)
 2800d88:	ac000115 	stw	r16,4(r21)
 2800d8c:	dc800e15 	stw	r18,56(sp)
 2800d90:	dc400d15 	stw	r17,52(sp)
 2800d94:	14416116 	blt	r2,r17,280131c <___vfprintf_internal_r+0xe0c>
 2800d98:	ad400204 	addi	r21,r21,8
 2800d9c:	003f2406 	br	2800a30 <___vfprintf_internal_r+0x520>
 2800da0:	d9014f17 	ldw	r4,1340(sp)
 2800da4:	2803fc40 	call	2803fc4 <__sinit>
 2800da8:	d9c15117 	ldw	r7,1348(sp)
 2800dac:	003def06 	br	280056c <___vfprintf_internal_r+0x5c>
 2800db0:	d9014f17 	ldw	r4,1340(sp)
 2800db4:	b00b883a 	mov	r5,r22
 2800db8:	d9c15115 	stw	r7,1348(sp)
 2800dbc:	28023f80 	call	28023f8 <__swsetup_r>
 2800dc0:	d9c15117 	ldw	r7,1348(sp)
 2800dc4:	103dee26 	beq	r2,zero,2800580 <___vfprintf_internal_r+0x70>
 2800dc8:	003f8c06 	br	2800bfc <___vfprintf_internal_r+0x6ec>
 2800dcc:	d9014217 	ldw	r4,1288(sp)
 2800dd0:	d9414317 	ldw	r5,1292(sp)
 2800dd4:	000d883a 	mov	r6,zero
 2800dd8:	000f883a 	mov	r7,zero
 2800ddc:	2808f3c0 	call	2808f3c <__eqdf2>
 2800de0:	1000f21e 	bne	r2,zero,28011ac <___vfprintf_internal_r+0xc9c>
 2800de4:	0080a074 	movhi	r2,641
 2800de8:	10b5c204 	addi	r2,r2,-10488
 2800dec:	94800044 	addi	r18,r18,1
 2800df0:	8c400044 	addi	r17,r17,1
 2800df4:	a8800015 	stw	r2,0(r21)
 2800df8:	00c00044 	movi	r3,1
 2800dfc:	008001c4 	movi	r2,7
 2800e00:	a8c00115 	stw	r3,4(r21)
 2800e04:	dc800e15 	stw	r18,56(sp)
 2800e08:	dc400d15 	stw	r17,52(sp)
 2800e0c:	14430016 	blt	r2,r17,2801a10 <___vfprintf_internal_r+0x1500>
 2800e10:	a8c00204 	addi	r3,r21,8
 2800e14:	d8800517 	ldw	r2,20(sp)
 2800e18:	d9014717 	ldw	r4,1308(sp)
 2800e1c:	11015c0e 	bge	r2,r4,2801390 <___vfprintf_internal_r+0xe80>
 2800e20:	dc400d17 	ldw	r17,52(sp)
 2800e24:	d9814917 	ldw	r6,1316(sp)
 2800e28:	00800044 	movi	r2,1
 2800e2c:	94800044 	addi	r18,r18,1
 2800e30:	8c400044 	addi	r17,r17,1
 2800e34:	18800115 	stw	r2,4(r3)
 2800e38:	008001c4 	movi	r2,7
 2800e3c:	19800015 	stw	r6,0(r3)
 2800e40:	dc800e15 	stw	r18,56(sp)
 2800e44:	dc400d15 	stw	r17,52(sp)
 2800e48:	14431616 	blt	r2,r17,2801aa4 <___vfprintf_internal_r+0x1594>
 2800e4c:	18c00204 	addi	r3,r3,8
 2800e50:	d8814717 	ldw	r2,1308(sp)
 2800e54:	143fffc4 	addi	r16,r2,-1
 2800e58:	043f2b0e 	bge	zero,r16,2800b08 <___vfprintf_internal_r+0x5f8>
 2800e5c:	00800404 	movi	r2,16
 2800e60:	1402a80e 	bge	r2,r16,2801904 <___vfprintf_internal_r+0x13f4>
 2800e64:	dc400d17 	ldw	r17,52(sp)
 2800e68:	1027883a 	mov	r19,r2
 2800e6c:	0700a074 	movhi	fp,641
 2800e70:	e735c284 	addi	fp,fp,-10486
 2800e74:	050001c4 	movi	r20,7
 2800e78:	00000306 	br	2800e88 <___vfprintf_internal_r+0x978>
 2800e7c:	18c00204 	addi	r3,r3,8
 2800e80:	843ffc04 	addi	r16,r16,-16
 2800e84:	9c02a20e 	bge	r19,r16,2801910 <___vfprintf_internal_r+0x1400>
 2800e88:	94800404 	addi	r18,r18,16
 2800e8c:	8c400044 	addi	r17,r17,1
 2800e90:	1f000015 	stw	fp,0(r3)
 2800e94:	1cc00115 	stw	r19,4(r3)
 2800e98:	dc800e15 	stw	r18,56(sp)
 2800e9c:	dc400d15 	stw	r17,52(sp)
 2800ea0:	a47ff60e 	bge	r20,r17,2800e7c <___vfprintf_internal_r+0x96c>
 2800ea4:	d9014f17 	ldw	r4,1340(sp)
 2800ea8:	b00b883a 	mov	r5,r22
 2800eac:	d9800c04 	addi	r6,sp,48
 2800eb0:	28004b80 	call	28004b8 <__sprint_r>
 2800eb4:	103f4e1e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2800eb8:	dc800e17 	ldw	r18,56(sp)
 2800ebc:	dc400d17 	ldw	r17,52(sp)
 2800ec0:	d8c01904 	addi	r3,sp,100
 2800ec4:	003fee06 	br	2800e80 <___vfprintf_internal_r+0x970>
 2800ec8:	d8802c0b 	ldhu	r2,176(sp)
 2800ecc:	00ffffc4 	movi	r3,-1
 2800ed0:	d8c14b15 	stw	r3,1324(sp)
 2800ed4:	1080100c 	andi	r2,r2,64
 2800ed8:	103dcc1e 	bne	r2,zero,280060c <___vfprintf_internal_r+0xfc>
 2800edc:	003dce06 	br	2800618 <___vfprintf_internal_r+0x108>
 2800ee0:	d9014f17 	ldw	r4,1340(sp)
 2800ee4:	b00b883a 	mov	r5,r22
 2800ee8:	d9800c04 	addi	r6,sp,48
 2800eec:	28004b80 	call	28004b8 <__sprint_r>
 2800ef0:	103f3f1e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2800ef4:	dc800e17 	ldw	r18,56(sp)
 2800ef8:	003f2e06 	br	2800bb4 <___vfprintf_internal_r+0x6a4>
 2800efc:	d9414c17 	ldw	r5,1328(sp)
 2800f00:	29400414 	ori	r5,r5,16
 2800f04:	d9414c15 	stw	r5,1328(sp)
 2800f08:	d9814c17 	ldw	r6,1328(sp)
 2800f0c:	3080080c 	andi	r2,r6,32
 2800f10:	10014f1e 	bne	r2,zero,2801450 <___vfprintf_internal_r+0xf40>
 2800f14:	d8c14c17 	ldw	r3,1328(sp)
 2800f18:	1880040c 	andi	r2,r3,16
 2800f1c:	1002f01e 	bne	r2,zero,2801ae0 <___vfprintf_internal_r+0x15d0>
 2800f20:	d9014c17 	ldw	r4,1328(sp)
 2800f24:	2080100c 	andi	r2,r4,64
 2800f28:	1002ed26 	beq	r2,zero,2801ae0 <___vfprintf_internal_r+0x15d0>
 2800f2c:	3880000f 	ldh	r2,0(r7)
 2800f30:	39c00104 	addi	r7,r7,4
 2800f34:	d9c14015 	stw	r7,1280(sp)
 2800f38:	1023d7fa 	srai	r17,r2,31
 2800f3c:	1021883a 	mov	r16,r2
 2800f40:	88037816 	blt	r17,zero,2801d24 <___vfprintf_internal_r+0x1814>
 2800f44:	01000044 	movi	r4,1
 2800f48:	98000416 	blt	r19,zero,2800f5c <___vfprintf_internal_r+0xa4c>
 2800f4c:	d8c14c17 	ldw	r3,1328(sp)
 2800f50:	00bfdfc4 	movi	r2,-129
 2800f54:	1886703a 	and	r3,r3,r2
 2800f58:	d8c14c15 	stw	r3,1328(sp)
 2800f5c:	8444b03a 	or	r2,r16,r17
 2800f60:	10022c1e 	bne	r2,zero,2801814 <___vfprintf_internal_r+0x1304>
 2800f64:	98022b1e 	bne	r19,zero,2801814 <___vfprintf_internal_r+0x1304>
 2800f68:	20803fcc 	andi	r2,r4,255
 2800f6c:	1002a126 	beq	r2,zero,28019f4 <___vfprintf_internal_r+0x14e4>
 2800f70:	d8c01904 	addi	r3,sp,100
 2800f74:	dd000f04 	addi	r20,sp,60
 2800f78:	d8c14115 	stw	r3,1284(sp)
 2800f7c:	d8c14117 	ldw	r3,1284(sp)
 2800f80:	dcc14515 	stw	r19,1300(sp)
 2800f84:	a0c5c83a 	sub	r2,r20,r3
 2800f88:	11c00a04 	addi	r7,r2,40
 2800f8c:	99c0010e 	bge	r19,r7,2800f94 <___vfprintf_internal_r+0xa84>
 2800f90:	d9c14515 	stw	r7,1300(sp)
 2800f94:	dcc14615 	stw	r19,1304(sp)
 2800f98:	d8800407 	ldb	r2,16(sp)
 2800f9c:	103e4c26 	beq	r2,zero,28008d0 <___vfprintf_internal_r+0x3c0>
 2800fa0:	d8814517 	ldw	r2,1300(sp)
 2800fa4:	10800044 	addi	r2,r2,1
 2800fa8:	d8814515 	stw	r2,1300(sp)
 2800fac:	003e4806 	br	28008d0 <___vfprintf_internal_r+0x3c0>
 2800fb0:	d9814c17 	ldw	r6,1328(sp)
 2800fb4:	31800414 	ori	r6,r6,16
 2800fb8:	d9814c15 	stw	r6,1328(sp)
 2800fbc:	d8c14c17 	ldw	r3,1328(sp)
 2800fc0:	1880080c 	andi	r2,r3,32
 2800fc4:	1001271e 	bne	r2,zero,2801464 <___vfprintf_internal_r+0xf54>
 2800fc8:	d9414c17 	ldw	r5,1328(sp)
 2800fcc:	2880040c 	andi	r2,r5,16
 2800fd0:	1002bc1e 	bne	r2,zero,2801ac4 <___vfprintf_internal_r+0x15b4>
 2800fd4:	d9814c17 	ldw	r6,1328(sp)
 2800fd8:	3080100c 	andi	r2,r6,64
 2800fdc:	1002b926 	beq	r2,zero,2801ac4 <___vfprintf_internal_r+0x15b4>
 2800fe0:	3c00000b 	ldhu	r16,0(r7)
 2800fe4:	0009883a 	mov	r4,zero
 2800fe8:	39c00104 	addi	r7,r7,4
 2800fec:	0023883a 	mov	r17,zero
 2800ff0:	d9c14015 	stw	r7,1280(sp)
 2800ff4:	d8000405 	stb	zero,16(sp)
 2800ff8:	003fd306 	br	2800f48 <___vfprintf_internal_r+0xa38>
 2800ffc:	d9014c17 	ldw	r4,1328(sp)
 2801000:	21000414 	ori	r4,r4,16
 2801004:	d9014c15 	stw	r4,1328(sp)
 2801008:	d9414c17 	ldw	r5,1328(sp)
 280100c:	2880080c 	andi	r2,r5,32
 2801010:	1001081e 	bne	r2,zero,2801434 <___vfprintf_internal_r+0xf24>
 2801014:	d8c14c17 	ldw	r3,1328(sp)
 2801018:	1880040c 	andi	r2,r3,16
 280101c:	1002b61e 	bne	r2,zero,2801af8 <___vfprintf_internal_r+0x15e8>
 2801020:	d9014c17 	ldw	r4,1328(sp)
 2801024:	2080100c 	andi	r2,r4,64
 2801028:	1002b326 	beq	r2,zero,2801af8 <___vfprintf_internal_r+0x15e8>
 280102c:	3c00000b 	ldhu	r16,0(r7)
 2801030:	01000044 	movi	r4,1
 2801034:	39c00104 	addi	r7,r7,4
 2801038:	0023883a 	mov	r17,zero
 280103c:	d9c14015 	stw	r7,1280(sp)
 2801040:	d8000405 	stb	zero,16(sp)
 2801044:	003fc006 	br	2800f48 <___vfprintf_internal_r+0xa38>
 2801048:	d9014f17 	ldw	r4,1340(sp)
 280104c:	b00b883a 	mov	r5,r22
 2801050:	d9800c04 	addi	r6,sp,48
 2801054:	28004b80 	call	28004b8 <__sprint_r>
 2801058:	103ee51e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 280105c:	dc800e17 	ldw	r18,56(sp)
 2801060:	d8c01904 	addi	r3,sp,100
 2801064:	d9814c17 	ldw	r6,1328(sp)
 2801068:	3080004c 	andi	r2,r6,1
 280106c:	1005003a 	cmpeq	r2,r2,zero
 2801070:	103ea51e 	bne	r2,zero,2800b08 <___vfprintf_internal_r+0x5f8>
 2801074:	00800044 	movi	r2,1
 2801078:	dc400d17 	ldw	r17,52(sp)
 280107c:	18800115 	stw	r2,4(r3)
 2801080:	d8814917 	ldw	r2,1316(sp)
 2801084:	94800044 	addi	r18,r18,1
 2801088:	8c400044 	addi	r17,r17,1
 280108c:	18800015 	stw	r2,0(r3)
 2801090:	008001c4 	movi	r2,7
 2801094:	dc800e15 	stw	r18,56(sp)
 2801098:	dc400d15 	stw	r17,52(sp)
 280109c:	1442240e 	bge	r2,r17,2801930 <___vfprintf_internal_r+0x1420>
 28010a0:	d9014f17 	ldw	r4,1340(sp)
 28010a4:	b00b883a 	mov	r5,r22
 28010a8:	d9800c04 	addi	r6,sp,48
 28010ac:	28004b80 	call	28004b8 <__sprint_r>
 28010b0:	103ecf1e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 28010b4:	dc800e17 	ldw	r18,56(sp)
 28010b8:	d8c01904 	addi	r3,sp,100
 28010bc:	003e9206 	br	2800b08 <___vfprintf_internal_r+0x5f8>
 28010c0:	d9014f17 	ldw	r4,1340(sp)
 28010c4:	b00b883a 	mov	r5,r22
 28010c8:	d9800c04 	addi	r6,sp,48
 28010cc:	28004b80 	call	28004b8 <__sprint_r>
 28010d0:	103ec026 	beq	r2,zero,2800bd4 <___vfprintf_internal_r+0x6c4>
 28010d4:	003ec606 	br	2800bf0 <___vfprintf_internal_r+0x6e0>
 28010d8:	d9014f17 	ldw	r4,1340(sp)
 28010dc:	b00b883a 	mov	r5,r22
 28010e0:	d9800c04 	addi	r6,sp,48
 28010e4:	d9c15115 	stw	r7,1348(sp)
 28010e8:	28004b80 	call	28004b8 <__sprint_r>
 28010ec:	d9c15117 	ldw	r7,1348(sp)
 28010f0:	103ebf1e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 28010f4:	dc800e17 	ldw	r18,56(sp)
 28010f8:	dc400d17 	ldw	r17,52(sp)
 28010fc:	dd401904 	addi	r21,sp,100
 2801100:	003e7406 	br	2800ad4 <___vfprintf_internal_r+0x5c4>
 2801104:	d9014f17 	ldw	r4,1340(sp)
 2801108:	b00b883a 	mov	r5,r22
 280110c:	d9800c04 	addi	r6,sp,48
 2801110:	d9c15115 	stw	r7,1348(sp)
 2801114:	28004b80 	call	28004b8 <__sprint_r>
 2801118:	d9c15117 	ldw	r7,1348(sp)
 280111c:	103eb41e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2801120:	dd401904 	addi	r21,sp,100
 2801124:	003d6d06 	br	28006dc <___vfprintf_internal_r+0x1cc>
 2801128:	d9014f17 	ldw	r4,1340(sp)
 280112c:	b00b883a 	mov	r5,r22
 2801130:	d9800c04 	addi	r6,sp,48
 2801134:	d9c15115 	stw	r7,1348(sp)
 2801138:	28004b80 	call	28004b8 <__sprint_r>
 280113c:	d9c15117 	ldw	r7,1348(sp)
 2801140:	103eab1e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2801144:	dc800e17 	ldw	r18,56(sp)
 2801148:	dc400d17 	ldw	r17,52(sp)
 280114c:	dd401904 	addi	r21,sp,100
 2801150:	003e3406 	br	2800a24 <___vfprintf_internal_r+0x514>
 2801154:	d9014f17 	ldw	r4,1340(sp)
 2801158:	b00b883a 	mov	r5,r22
 280115c:	d9800c04 	addi	r6,sp,48
 2801160:	d9c15115 	stw	r7,1348(sp)
 2801164:	28004b80 	call	28004b8 <__sprint_r>
 2801168:	d9c15117 	ldw	r7,1348(sp)
 280116c:	103ea01e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2801170:	dc800e17 	ldw	r18,56(sp)
 2801174:	dc400d17 	ldw	r17,52(sp)
 2801178:	dd401904 	addi	r21,sp,100
 280117c:	003e1c06 	br	28009f0 <___vfprintf_internal_r+0x4e0>
 2801180:	d9014f17 	ldw	r4,1340(sp)
 2801184:	b00b883a 	mov	r5,r22
 2801188:	d9800c04 	addi	r6,sp,48
 280118c:	d9c15115 	stw	r7,1348(sp)
 2801190:	28004b80 	call	28004b8 <__sprint_r>
 2801194:	d9c15117 	ldw	r7,1348(sp)
 2801198:	103e951e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 280119c:	dc800e17 	ldw	r18,56(sp)
 28011a0:	dc400d17 	ldw	r17,52(sp)
 28011a4:	dd401904 	addi	r21,sp,100
 28011a8:	003e0406 	br	28009bc <___vfprintf_internal_r+0x4ac>
 28011ac:	d9000517 	ldw	r4,20(sp)
 28011b0:	0102580e 	bge	zero,r4,2801b14 <___vfprintf_internal_r+0x1604>
 28011b4:	d9814717 	ldw	r6,1308(sp)
 28011b8:	21807a16 	blt	r4,r6,28013a4 <___vfprintf_internal_r+0xe94>
 28011bc:	d8814117 	ldw	r2,1284(sp)
 28011c0:	91a5883a 	add	r18,r18,r6
 28011c4:	8c400044 	addi	r17,r17,1
 28011c8:	a8800015 	stw	r2,0(r21)
 28011cc:	008001c4 	movi	r2,7
 28011d0:	a9800115 	stw	r6,4(r21)
 28011d4:	dc800e15 	stw	r18,56(sp)
 28011d8:	dc400d15 	stw	r17,52(sp)
 28011dc:	1442fc16 	blt	r2,r17,2801dd0 <___vfprintf_internal_r+0x18c0>
 28011e0:	a8c00204 	addi	r3,r21,8
 28011e4:	d9414717 	ldw	r5,1308(sp)
 28011e8:	2161c83a 	sub	r16,r4,r5
 28011ec:	043f9d0e 	bge	zero,r16,2801064 <___vfprintf_internal_r+0xb54>
 28011f0:	00800404 	movi	r2,16
 28011f4:	1402190e 	bge	r2,r16,2801a5c <___vfprintf_internal_r+0x154c>
 28011f8:	dc400d17 	ldw	r17,52(sp)
 28011fc:	1027883a 	mov	r19,r2
 2801200:	0700a074 	movhi	fp,641
 2801204:	e735c284 	addi	fp,fp,-10486
 2801208:	050001c4 	movi	r20,7
 280120c:	00000306 	br	280121c <___vfprintf_internal_r+0xd0c>
 2801210:	18c00204 	addi	r3,r3,8
 2801214:	843ffc04 	addi	r16,r16,-16
 2801218:	9c02130e 	bge	r19,r16,2801a68 <___vfprintf_internal_r+0x1558>
 280121c:	94800404 	addi	r18,r18,16
 2801220:	8c400044 	addi	r17,r17,1
 2801224:	1f000015 	stw	fp,0(r3)
 2801228:	1cc00115 	stw	r19,4(r3)
 280122c:	dc800e15 	stw	r18,56(sp)
 2801230:	dc400d15 	stw	r17,52(sp)
 2801234:	a47ff60e 	bge	r20,r17,2801210 <___vfprintf_internal_r+0xd00>
 2801238:	d9014f17 	ldw	r4,1340(sp)
 280123c:	b00b883a 	mov	r5,r22
 2801240:	d9800c04 	addi	r6,sp,48
 2801244:	28004b80 	call	28004b8 <__sprint_r>
 2801248:	103e691e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 280124c:	dc800e17 	ldw	r18,56(sp)
 2801250:	dc400d17 	ldw	r17,52(sp)
 2801254:	d8c01904 	addi	r3,sp,100
 2801258:	003fee06 	br	2801214 <___vfprintf_internal_r+0xd04>
 280125c:	d8814717 	ldw	r2,1308(sp)
 2801260:	143fffc4 	addi	r16,r2,-1
 2801264:	043e970e 	bge	zero,r16,2800cc4 <___vfprintf_internal_r+0x7b4>
 2801268:	00800404 	movi	r2,16
 280126c:	1400180e 	bge	r2,r16,28012d0 <___vfprintf_internal_r+0xdc0>
 2801270:	1029883a 	mov	r20,r2
 2801274:	0700a074 	movhi	fp,641
 2801278:	e735c284 	addi	fp,fp,-10486
 280127c:	054001c4 	movi	r21,7
 2801280:	00000306 	br	2801290 <___vfprintf_internal_r+0xd80>
 2801284:	9cc00204 	addi	r19,r19,8
 2801288:	843ffc04 	addi	r16,r16,-16
 280128c:	a400120e 	bge	r20,r16,28012d8 <___vfprintf_internal_r+0xdc8>
 2801290:	94800404 	addi	r18,r18,16
 2801294:	8c400044 	addi	r17,r17,1
 2801298:	9f000015 	stw	fp,0(r19)
 280129c:	9d000115 	stw	r20,4(r19)
 28012a0:	dc800e15 	stw	r18,56(sp)
 28012a4:	dc400d15 	stw	r17,52(sp)
 28012a8:	ac7ff60e 	bge	r21,r17,2801284 <___vfprintf_internal_r+0xd74>
 28012ac:	d9014f17 	ldw	r4,1340(sp)
 28012b0:	b00b883a 	mov	r5,r22
 28012b4:	d9800c04 	addi	r6,sp,48
 28012b8:	28004b80 	call	28004b8 <__sprint_r>
 28012bc:	103e4c1e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 28012c0:	dc800e17 	ldw	r18,56(sp)
 28012c4:	dc400d17 	ldw	r17,52(sp)
 28012c8:	dcc01904 	addi	r19,sp,100
 28012cc:	003fee06 	br	2801288 <___vfprintf_internal_r+0xd78>
 28012d0:	0700a074 	movhi	fp,641
 28012d4:	e735c284 	addi	fp,fp,-10486
 28012d8:	9425883a 	add	r18,r18,r16
 28012dc:	8c400044 	addi	r17,r17,1
 28012e0:	008001c4 	movi	r2,7
 28012e4:	9f000015 	stw	fp,0(r19)
 28012e8:	9c000115 	stw	r16,4(r19)
 28012ec:	dc800e15 	stw	r18,56(sp)
 28012f0:	dc400d15 	stw	r17,52(sp)
 28012f4:	147e720e 	bge	r2,r17,2800cc0 <___vfprintf_internal_r+0x7b0>
 28012f8:	d9014f17 	ldw	r4,1340(sp)
 28012fc:	b00b883a 	mov	r5,r22
 2801300:	d9800c04 	addi	r6,sp,48
 2801304:	28004b80 	call	28004b8 <__sprint_r>
 2801308:	103e391e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 280130c:	dc800e17 	ldw	r18,56(sp)
 2801310:	dc400d17 	ldw	r17,52(sp)
 2801314:	dcc01904 	addi	r19,sp,100
 2801318:	003e6a06 	br	2800cc4 <___vfprintf_internal_r+0x7b4>
 280131c:	d9014f17 	ldw	r4,1340(sp)
 2801320:	b00b883a 	mov	r5,r22
 2801324:	d9800c04 	addi	r6,sp,48
 2801328:	d9c15115 	stw	r7,1348(sp)
 280132c:	28004b80 	call	28004b8 <__sprint_r>
 2801330:	d9c15117 	ldw	r7,1348(sp)
 2801334:	103e2e1e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2801338:	dc800e17 	ldw	r18,56(sp)
 280133c:	dc400d17 	ldw	r17,52(sp)
 2801340:	dd401904 	addi	r21,sp,100
 2801344:	003dba06 	br	2800a30 <___vfprintf_internal_r+0x520>
 2801348:	d9014f17 	ldw	r4,1340(sp)
 280134c:	b00b883a 	mov	r5,r22
 2801350:	d9800c04 	addi	r6,sp,48
 2801354:	28004b80 	call	28004b8 <__sprint_r>
 2801358:	103e251e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 280135c:	dc800e17 	ldw	r18,56(sp)
 2801360:	dc400d17 	ldw	r17,52(sp)
 2801364:	dcc01904 	addi	r19,sp,100
 2801368:	003e4206 	br	2800c74 <___vfprintf_internal_r+0x764>
 280136c:	d9014f17 	ldw	r4,1340(sp)
 2801370:	b00b883a 	mov	r5,r22
 2801374:	d9800c04 	addi	r6,sp,48
 2801378:	28004b80 	call	28004b8 <__sprint_r>
 280137c:	103e1c1e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2801380:	dc800e17 	ldw	r18,56(sp)
 2801384:	dc400d17 	ldw	r17,52(sp)
 2801388:	d8c01904 	addi	r3,sp,100
 280138c:	003e2e06 	br	2800c48 <___vfprintf_internal_r+0x738>
 2801390:	d9414c17 	ldw	r5,1328(sp)
 2801394:	2880004c 	andi	r2,r5,1
 2801398:	1005003a 	cmpeq	r2,r2,zero
 280139c:	103dda1e 	bne	r2,zero,2800b08 <___vfprintf_internal_r+0x5f8>
 28013a0:	003e9f06 	br	2800e20 <___vfprintf_internal_r+0x910>
 28013a4:	d8c14117 	ldw	r3,1284(sp)
 28013a8:	9125883a 	add	r18,r18,r4
 28013ac:	8c400044 	addi	r17,r17,1
 28013b0:	008001c4 	movi	r2,7
 28013b4:	a8c00015 	stw	r3,0(r21)
 28013b8:	a9000115 	stw	r4,4(r21)
 28013bc:	dc800e15 	stw	r18,56(sp)
 28013c0:	dc400d15 	stw	r17,52(sp)
 28013c4:	14426c16 	blt	r2,r17,2801d78 <___vfprintf_internal_r+0x1868>
 28013c8:	a8c00204 	addi	r3,r21,8
 28013cc:	d9414917 	ldw	r5,1316(sp)
 28013d0:	00800044 	movi	r2,1
 28013d4:	94800044 	addi	r18,r18,1
 28013d8:	8c400044 	addi	r17,r17,1
 28013dc:	18800115 	stw	r2,4(r3)
 28013e0:	008001c4 	movi	r2,7
 28013e4:	19400015 	stw	r5,0(r3)
 28013e8:	dc800e15 	stw	r18,56(sp)
 28013ec:	dc400d15 	stw	r17,52(sp)
 28013f0:	2021883a 	mov	r16,r4
 28013f4:	14425616 	blt	r2,r17,2801d50 <___vfprintf_internal_r+0x1840>
 28013f8:	19400204 	addi	r5,r3,8
 28013fc:	d9814717 	ldw	r6,1308(sp)
 2801400:	8c400044 	addi	r17,r17,1
 2801404:	dc400d15 	stw	r17,52(sp)
 2801408:	3107c83a 	sub	r3,r6,r4
 280140c:	d9014117 	ldw	r4,1284(sp)
 2801410:	90e5883a 	add	r18,r18,r3
 2801414:	28c00115 	stw	r3,4(r5)
 2801418:	8105883a 	add	r2,r16,r4
 280141c:	28800015 	stw	r2,0(r5)
 2801420:	008001c4 	movi	r2,7
 2801424:	dc800e15 	stw	r18,56(sp)
 2801428:	147f1d16 	blt	r2,r17,28010a0 <___vfprintf_internal_r+0xb90>
 280142c:	28c00204 	addi	r3,r5,8
 2801430:	003db506 	br	2800b08 <___vfprintf_internal_r+0x5f8>
 2801434:	3c000017 	ldw	r16,0(r7)
 2801438:	3c400117 	ldw	r17,4(r7)
 280143c:	39800204 	addi	r6,r7,8
 2801440:	01000044 	movi	r4,1
 2801444:	d9814015 	stw	r6,1280(sp)
 2801448:	d8000405 	stb	zero,16(sp)
 280144c:	003ebe06 	br	2800f48 <___vfprintf_internal_r+0xa38>
 2801450:	3c000017 	ldw	r16,0(r7)
 2801454:	3c400117 	ldw	r17,4(r7)
 2801458:	38800204 	addi	r2,r7,8
 280145c:	d8814015 	stw	r2,1280(sp)
 2801460:	003eb706 	br	2800f40 <___vfprintf_internal_r+0xa30>
 2801464:	3c000017 	ldw	r16,0(r7)
 2801468:	3c400117 	ldw	r17,4(r7)
 280146c:	39000204 	addi	r4,r7,8
 2801470:	d9014015 	stw	r4,1280(sp)
 2801474:	0009883a 	mov	r4,zero
 2801478:	d8000405 	stb	zero,16(sp)
 280147c:	003eb206 	br	2800f48 <___vfprintf_internal_r+0xa38>
 2801480:	38c00017 	ldw	r3,0(r7)
 2801484:	39c00104 	addi	r7,r7,4
 2801488:	d8c14a15 	stw	r3,1320(sp)
 280148c:	1800d70e 	bge	r3,zero,28017ec <___vfprintf_internal_r+0x12dc>
 2801490:	00c7c83a 	sub	r3,zero,r3
 2801494:	d8c14a15 	stw	r3,1320(sp)
 2801498:	d9014c17 	ldw	r4,1328(sp)
 280149c:	b8c00007 	ldb	r3,0(r23)
 28014a0:	21000114 	ori	r4,r4,4
 28014a4:	d9014c15 	stw	r4,1328(sp)
 28014a8:	003c9806 	br	280070c <___vfprintf_internal_r+0x1fc>
 28014ac:	d9814c17 	ldw	r6,1328(sp)
 28014b0:	3080080c 	andi	r2,r6,32
 28014b4:	1001f626 	beq	r2,zero,2801c90 <___vfprintf_internal_r+0x1780>
 28014b8:	d9014b17 	ldw	r4,1324(sp)
 28014bc:	38800017 	ldw	r2,0(r7)
 28014c0:	39c00104 	addi	r7,r7,4
 28014c4:	d9c14015 	stw	r7,1280(sp)
 28014c8:	2007d7fa 	srai	r3,r4,31
 28014cc:	d9c14017 	ldw	r7,1280(sp)
 28014d0:	11000015 	stw	r4,0(r2)
 28014d4:	10c00115 	stw	r3,4(r2)
 28014d8:	003c6906 	br	2800680 <___vfprintf_internal_r+0x170>
 28014dc:	b8c00007 	ldb	r3,0(r23)
 28014e0:	00801b04 	movi	r2,108
 28014e4:	18825526 	beq	r3,r2,2801e3c <___vfprintf_internal_r+0x192c>
 28014e8:	d9414c17 	ldw	r5,1328(sp)
 28014ec:	29400414 	ori	r5,r5,16
 28014f0:	d9414c15 	stw	r5,1328(sp)
 28014f4:	003c8506 	br	280070c <___vfprintf_internal_r+0x1fc>
 28014f8:	d9814c17 	ldw	r6,1328(sp)
 28014fc:	b8c00007 	ldb	r3,0(r23)
 2801500:	31800814 	ori	r6,r6,32
 2801504:	d9814c15 	stw	r6,1328(sp)
 2801508:	003c8006 	br	280070c <___vfprintf_internal_r+0x1fc>
 280150c:	d8814c17 	ldw	r2,1328(sp)
 2801510:	3c000017 	ldw	r16,0(r7)
 2801514:	00c01e04 	movi	r3,120
 2801518:	10800094 	ori	r2,r2,2
 280151c:	d8814c15 	stw	r2,1328(sp)
 2801520:	39c00104 	addi	r7,r7,4
 2801524:	0140a074 	movhi	r5,641
 2801528:	2975ab04 	addi	r5,r5,-10580
 280152c:	00800c04 	movi	r2,48
 2801530:	0023883a 	mov	r17,zero
 2801534:	01000084 	movi	r4,2
 2801538:	d9c14015 	stw	r7,1280(sp)
 280153c:	d8c14d15 	stw	r3,1332(sp)
 2801540:	d9414415 	stw	r5,1296(sp)
 2801544:	d8800445 	stb	r2,17(sp)
 2801548:	d8c00485 	stb	r3,18(sp)
 280154c:	d8000405 	stb	zero,16(sp)
 2801550:	003e7d06 	br	2800f48 <___vfprintf_internal_r+0xa38>
 2801554:	d8814c17 	ldw	r2,1328(sp)
 2801558:	b8c00007 	ldb	r3,0(r23)
 280155c:	10801014 	ori	r2,r2,64
 2801560:	d8814c15 	stw	r2,1328(sp)
 2801564:	003c6906 	br	280070c <___vfprintf_internal_r+0x1fc>
 2801568:	d9414c17 	ldw	r5,1328(sp)
 280156c:	2880020c 	andi	r2,r5,8
 2801570:	1001e526 	beq	r2,zero,2801d08 <___vfprintf_internal_r+0x17f8>
 2801574:	39800017 	ldw	r6,0(r7)
 2801578:	38800204 	addi	r2,r7,8
 280157c:	d8814015 	stw	r2,1280(sp)
 2801580:	d9814215 	stw	r6,1288(sp)
 2801584:	39c00117 	ldw	r7,4(r7)
 2801588:	d9c14315 	stw	r7,1292(sp)
 280158c:	d9014217 	ldw	r4,1288(sp)
 2801590:	d9414317 	ldw	r5,1292(sp)
 2801594:	2806fc00 	call	2806fc0 <__isinfd>
 2801598:	10021d26 	beq	r2,zero,2801e10 <___vfprintf_internal_r+0x1900>
 280159c:	d9014217 	ldw	r4,1288(sp)
 28015a0:	d9414317 	ldw	r5,1292(sp)
 28015a4:	000d883a 	mov	r6,zero
 28015a8:	000f883a 	mov	r7,zero
 28015ac:	280915c0 	call	280915c <__ltdf2>
 28015b0:	1002d016 	blt	r2,zero,28020f4 <___vfprintf_internal_r+0x1be4>
 28015b4:	d9414d17 	ldw	r5,1332(sp)
 28015b8:	008011c4 	movi	r2,71
 28015bc:	11421016 	blt	r2,r5,2801e00 <___vfprintf_internal_r+0x18f0>
 28015c0:	0180a074 	movhi	r6,641
 28015c4:	31b5b004 	addi	r6,r6,-10560
 28015c8:	d9814115 	stw	r6,1284(sp)
 28015cc:	d9014c17 	ldw	r4,1328(sp)
 28015d0:	00c000c4 	movi	r3,3
 28015d4:	00bfdfc4 	movi	r2,-129
 28015d8:	2088703a 	and	r4,r4,r2
 28015dc:	180f883a 	mov	r7,r3
 28015e0:	d8c14515 	stw	r3,1300(sp)
 28015e4:	d9014c15 	stw	r4,1328(sp)
 28015e8:	d8014615 	stw	zero,1304(sp)
 28015ec:	003e6a06 	br	2800f98 <___vfprintf_internal_r+0xa88>
 28015f0:	38800017 	ldw	r2,0(r7)
 28015f4:	00c00044 	movi	r3,1
 28015f8:	39c00104 	addi	r7,r7,4
 28015fc:	d9c14015 	stw	r7,1280(sp)
 2801600:	d9000f04 	addi	r4,sp,60
 2801604:	180f883a 	mov	r7,r3
 2801608:	d8c14515 	stw	r3,1300(sp)
 280160c:	d9014115 	stw	r4,1284(sp)
 2801610:	d8800f05 	stb	r2,60(sp)
 2801614:	d8000405 	stb	zero,16(sp)
 2801618:	003cac06 	br	28008cc <___vfprintf_internal_r+0x3bc>
 280161c:	0140a074 	movhi	r5,641
 2801620:	2975b604 	addi	r5,r5,-10536
 2801624:	d9414415 	stw	r5,1296(sp)
 2801628:	d9814c17 	ldw	r6,1328(sp)
 280162c:	3080080c 	andi	r2,r6,32
 2801630:	1000ff26 	beq	r2,zero,2801a30 <___vfprintf_internal_r+0x1520>
 2801634:	3c000017 	ldw	r16,0(r7)
 2801638:	3c400117 	ldw	r17,4(r7)
 280163c:	38800204 	addi	r2,r7,8
 2801640:	d8814015 	stw	r2,1280(sp)
 2801644:	d9414c17 	ldw	r5,1328(sp)
 2801648:	2880004c 	andi	r2,r5,1
 280164c:	1005003a 	cmpeq	r2,r2,zero
 2801650:	1000b91e 	bne	r2,zero,2801938 <___vfprintf_internal_r+0x1428>
 2801654:	8444b03a 	or	r2,r16,r17
 2801658:	1000b726 	beq	r2,zero,2801938 <___vfprintf_internal_r+0x1428>
 280165c:	d9814d17 	ldw	r6,1332(sp)
 2801660:	29400094 	ori	r5,r5,2
 2801664:	00800c04 	movi	r2,48
 2801668:	01000084 	movi	r4,2
 280166c:	d9414c15 	stw	r5,1328(sp)
 2801670:	d8800445 	stb	r2,17(sp)
 2801674:	d9800485 	stb	r6,18(sp)
 2801678:	d8000405 	stb	zero,16(sp)
 280167c:	003e3206 	br	2800f48 <___vfprintf_internal_r+0xa38>
 2801680:	0180a074 	movhi	r6,641
 2801684:	31b5ab04 	addi	r6,r6,-10580
 2801688:	d9814415 	stw	r6,1296(sp)
 280168c:	003fe606 	br	2801628 <___vfprintf_internal_r+0x1118>
 2801690:	00800ac4 	movi	r2,43
 2801694:	d8800405 	stb	r2,16(sp)
 2801698:	b8c00007 	ldb	r3,0(r23)
 280169c:	003c1b06 	br	280070c <___vfprintf_internal_r+0x1fc>
 28016a0:	d8814c17 	ldw	r2,1328(sp)
 28016a4:	b8c00007 	ldb	r3,0(r23)
 28016a8:	10800054 	ori	r2,r2,1
 28016ac:	d8814c15 	stw	r2,1328(sp)
 28016b0:	003c1606 	br	280070c <___vfprintf_internal_r+0x1fc>
 28016b4:	d8800407 	ldb	r2,16(sp)
 28016b8:	10004c1e 	bne	r2,zero,28017ec <___vfprintf_internal_r+0x12dc>
 28016bc:	00800804 	movi	r2,32
 28016c0:	d8800405 	stb	r2,16(sp)
 28016c4:	b8c00007 	ldb	r3,0(r23)
 28016c8:	003c1006 	br	280070c <___vfprintf_internal_r+0x1fc>
 28016cc:	d9814c17 	ldw	r6,1328(sp)
 28016d0:	b8c00007 	ldb	r3,0(r23)
 28016d4:	31800214 	ori	r6,r6,8
 28016d8:	d9814c15 	stw	r6,1328(sp)
 28016dc:	003c0b06 	br	280070c <___vfprintf_internal_r+0x1fc>
 28016e0:	0009883a 	mov	r4,zero
 28016e4:	04000244 	movi	r16,9
 28016e8:	01400284 	movi	r5,10
 28016ec:	d9c15115 	stw	r7,1348(sp)
 28016f0:	28096940 	call	2809694 <__mulsi3>
 28016f4:	b9000007 	ldb	r4,0(r23)
 28016f8:	d8c14d17 	ldw	r3,1332(sp)
 28016fc:	bdc00044 	addi	r23,r23,1
 2801700:	d9014d15 	stw	r4,1332(sp)
 2801704:	d9414d17 	ldw	r5,1332(sp)
 2801708:	1885883a 	add	r2,r3,r2
 280170c:	113ff404 	addi	r4,r2,-48
 2801710:	28bff404 	addi	r2,r5,-48
 2801714:	d9c15117 	ldw	r7,1348(sp)
 2801718:	80bff32e 	bgeu	r16,r2,28016e8 <___vfprintf_internal_r+0x11d8>
 280171c:	d9014a15 	stw	r4,1320(sp)
 2801720:	003bfc06 	br	2800714 <___vfprintf_internal_r+0x204>
 2801724:	d8814c17 	ldw	r2,1328(sp)
 2801728:	b8c00007 	ldb	r3,0(r23)
 280172c:	10802014 	ori	r2,r2,128
 2801730:	d8814c15 	stw	r2,1328(sp)
 2801734:	003bf506 	br	280070c <___vfprintf_internal_r+0x1fc>
 2801738:	b8c00007 	ldb	r3,0(r23)
 280173c:	00800a84 	movi	r2,42
 2801740:	bdc00044 	addi	r23,r23,1
 2801744:	18831826 	beq	r3,r2,28023a8 <___vfprintf_internal_r+0x1e98>
 2801748:	d8c14d15 	stw	r3,1332(sp)
 280174c:	18bff404 	addi	r2,r3,-48
 2801750:	00c00244 	movi	r3,9
 2801754:	18827b36 	bltu	r3,r2,2802144 <___vfprintf_internal_r+0x1c34>
 2801758:	1821883a 	mov	r16,r3
 280175c:	0009883a 	mov	r4,zero
 2801760:	01400284 	movi	r5,10
 2801764:	d9c15115 	stw	r7,1348(sp)
 2801768:	28096940 	call	2809694 <__mulsi3>
 280176c:	d9414d17 	ldw	r5,1332(sp)
 2801770:	b9800007 	ldb	r6,0(r23)
 2801774:	d9c15117 	ldw	r7,1348(sp)
 2801778:	1145883a 	add	r2,r2,r5
 280177c:	113ff404 	addi	r4,r2,-48
 2801780:	30bff404 	addi	r2,r6,-48
 2801784:	d9814d15 	stw	r6,1332(sp)
 2801788:	bdc00044 	addi	r23,r23,1
 280178c:	80bff42e 	bgeu	r16,r2,2801760 <___vfprintf_internal_r+0x1250>
 2801790:	2027883a 	mov	r19,r4
 2801794:	203bdf0e 	bge	r4,zero,2800714 <___vfprintf_internal_r+0x204>
 2801798:	04ffffc4 	movi	r19,-1
 280179c:	003bdd06 	br	2800714 <___vfprintf_internal_r+0x204>
 28017a0:	d8000405 	stb	zero,16(sp)
 28017a4:	39800017 	ldw	r6,0(r7)
 28017a8:	39c00104 	addi	r7,r7,4
 28017ac:	d9c14015 	stw	r7,1280(sp)
 28017b0:	d9814115 	stw	r6,1284(sp)
 28017b4:	3001c926 	beq	r6,zero,2801edc <___vfprintf_internal_r+0x19cc>
 28017b8:	98000e16 	blt	r19,zero,28017f4 <___vfprintf_internal_r+0x12e4>
 28017bc:	d9014117 	ldw	r4,1284(sp)
 28017c0:	000b883a 	mov	r5,zero
 28017c4:	980d883a 	mov	r6,r19
 28017c8:	28056440 	call	2805644 <memchr>
 28017cc:	10025926 	beq	r2,zero,2802134 <___vfprintf_internal_r+0x1c24>
 28017d0:	d8c14117 	ldw	r3,1284(sp)
 28017d4:	10cfc83a 	sub	r7,r2,r3
 28017d8:	99c19e16 	blt	r19,r7,2801e54 <___vfprintf_internal_r+0x1944>
 28017dc:	d9c14515 	stw	r7,1300(sp)
 28017e0:	38000916 	blt	r7,zero,2801808 <___vfprintf_internal_r+0x12f8>
 28017e4:	d8014615 	stw	zero,1304(sp)
 28017e8:	003deb06 	br	2800f98 <___vfprintf_internal_r+0xa88>
 28017ec:	b8c00007 	ldb	r3,0(r23)
 28017f0:	003bc606 	br	280070c <___vfprintf_internal_r+0x1fc>
 28017f4:	d9014117 	ldw	r4,1284(sp)
 28017f8:	28004440 	call	2800444 <strlen>
 28017fc:	d8814515 	stw	r2,1300(sp)
 2801800:	100f883a 	mov	r7,r2
 2801804:	103ff70e 	bge	r2,zero,28017e4 <___vfprintf_internal_r+0x12d4>
 2801808:	d8014515 	stw	zero,1300(sp)
 280180c:	d8014615 	stw	zero,1304(sp)
 2801810:	003de106 	br	2800f98 <___vfprintf_internal_r+0xa88>
 2801814:	20c03fcc 	andi	r3,r4,255
 2801818:	00800044 	movi	r2,1
 280181c:	18802d26 	beq	r3,r2,28018d4 <___vfprintf_internal_r+0x13c4>
 2801820:	18800e36 	bltu	r3,r2,280185c <___vfprintf_internal_r+0x134c>
 2801824:	00800084 	movi	r2,2
 2801828:	1880fa26 	beq	r3,r2,2801c14 <___vfprintf_internal_r+0x1704>
 280182c:	0100a074 	movhi	r4,641
 2801830:	2135bb04 	addi	r4,r4,-10516
 2801834:	28004440 	call	2800444 <strlen>
 2801838:	100f883a 	mov	r7,r2
 280183c:	dcc14515 	stw	r19,1300(sp)
 2801840:	9880010e 	bge	r19,r2,2801848 <___vfprintf_internal_r+0x1338>
 2801844:	d8814515 	stw	r2,1300(sp)
 2801848:	0080a074 	movhi	r2,641
 280184c:	10b5bb04 	addi	r2,r2,-10516
 2801850:	dcc14615 	stw	r19,1304(sp)
 2801854:	d8814115 	stw	r2,1284(sp)
 2801858:	003dcf06 	br	2800f98 <___vfprintf_internal_r+0xa88>
 280185c:	d9401904 	addi	r5,sp,100
 2801860:	dd000f04 	addi	r20,sp,60
 2801864:	d9414115 	stw	r5,1284(sp)
 2801868:	880a977a 	slli	r5,r17,29
 280186c:	d9814117 	ldw	r6,1284(sp)
 2801870:	8004d0fa 	srli	r2,r16,3
 2801874:	8806d0fa 	srli	r3,r17,3
 2801878:	810001cc 	andi	r4,r16,7
 280187c:	2884b03a 	or	r2,r5,r2
 2801880:	31bfffc4 	addi	r6,r6,-1
 2801884:	21000c04 	addi	r4,r4,48
 2801888:	d9814115 	stw	r6,1284(sp)
 280188c:	10cab03a 	or	r5,r2,r3
 2801890:	31000005 	stb	r4,0(r6)
 2801894:	1021883a 	mov	r16,r2
 2801898:	1823883a 	mov	r17,r3
 280189c:	283ff21e 	bne	r5,zero,2801868 <___vfprintf_internal_r+0x1358>
 28018a0:	d8c14c17 	ldw	r3,1328(sp)
 28018a4:	1880004c 	andi	r2,r3,1
 28018a8:	1005003a 	cmpeq	r2,r2,zero
 28018ac:	103db31e 	bne	r2,zero,2800f7c <___vfprintf_internal_r+0xa6c>
 28018b0:	20803fcc 	andi	r2,r4,255
 28018b4:	1080201c 	xori	r2,r2,128
 28018b8:	10bfe004 	addi	r2,r2,-128
 28018bc:	00c00c04 	movi	r3,48
 28018c0:	10fdae26 	beq	r2,r3,2800f7c <___vfprintf_internal_r+0xa6c>
 28018c4:	31bfffc4 	addi	r6,r6,-1
 28018c8:	d9814115 	stw	r6,1284(sp)
 28018cc:	30c00005 	stb	r3,0(r6)
 28018d0:	003daa06 	br	2800f7c <___vfprintf_internal_r+0xa6c>
 28018d4:	88800068 	cmpgeui	r2,r17,1
 28018d8:	10002c1e 	bne	r2,zero,280198c <___vfprintf_internal_r+0x147c>
 28018dc:	8800021e 	bne	r17,zero,28018e8 <___vfprintf_internal_r+0x13d8>
 28018e0:	00800244 	movi	r2,9
 28018e4:	14002936 	bltu	r2,r16,280198c <___vfprintf_internal_r+0x147c>
 28018e8:	d90018c4 	addi	r4,sp,99
 28018ec:	dd000f04 	addi	r20,sp,60
 28018f0:	d9014115 	stw	r4,1284(sp)
 28018f4:	d9014117 	ldw	r4,1284(sp)
 28018f8:	80800c04 	addi	r2,r16,48
 28018fc:	20800005 	stb	r2,0(r4)
 2801900:	003d9e06 	br	2800f7c <___vfprintf_internal_r+0xa6c>
 2801904:	dc400d17 	ldw	r17,52(sp)
 2801908:	0700a074 	movhi	fp,641
 280190c:	e735c284 	addi	fp,fp,-10486
 2801910:	9425883a 	add	r18,r18,r16
 2801914:	8c400044 	addi	r17,r17,1
 2801918:	008001c4 	movi	r2,7
 280191c:	1f000015 	stw	fp,0(r3)
 2801920:	1c000115 	stw	r16,4(r3)
 2801924:	dc800e15 	stw	r18,56(sp)
 2801928:	dc400d15 	stw	r17,52(sp)
 280192c:	147ddc16 	blt	r2,r17,28010a0 <___vfprintf_internal_r+0xb90>
 2801930:	18c00204 	addi	r3,r3,8
 2801934:	003c7406 	br	2800b08 <___vfprintf_internal_r+0x5f8>
 2801938:	01000084 	movi	r4,2
 280193c:	d8000405 	stb	zero,16(sp)
 2801940:	003d8106 	br	2800f48 <___vfprintf_internal_r+0xa38>
 2801944:	d9814c17 	ldw	r6,1328(sp)
 2801948:	30c4703a 	and	r2,r6,r3
 280194c:	1005003a 	cmpeq	r2,r2,zero
 2801950:	103cb326 	beq	r2,zero,2800c20 <___vfprintf_internal_r+0x710>
 2801954:	d9014117 	ldw	r4,1284(sp)
 2801958:	94800044 	addi	r18,r18,1
 280195c:	8c400044 	addi	r17,r17,1
 2801960:	008001c4 	movi	r2,7
 2801964:	a9000015 	stw	r4,0(r21)
 2801968:	a8c00115 	stw	r3,4(r21)
 280196c:	dc800e15 	stw	r18,56(sp)
 2801970:	dc400d15 	stw	r17,52(sp)
 2801974:	147e6016 	blt	r2,r17,28012f8 <___vfprintf_internal_r+0xde8>
 2801978:	acc00204 	addi	r19,r21,8
 280197c:	003cd106 	br	2800cc4 <___vfprintf_internal_r+0x7b4>
 2801980:	0700a074 	movhi	fp,641
 2801984:	e735c284 	addi	fp,fp,-10486
 2801988:	003c4906 	br	2800ab0 <___vfprintf_internal_r+0x5a0>
 280198c:	dd000f04 	addi	r20,sp,60
 2801990:	dc801904 	addi	r18,sp,100
 2801994:	8009883a 	mov	r4,r16
 2801998:	880b883a 	mov	r5,r17
 280199c:	01800284 	movi	r6,10
 28019a0:	000f883a 	mov	r7,zero
 28019a4:	2807dbc0 	call	2807dbc <__umoddi3>
 28019a8:	12000c04 	addi	r8,r2,48
 28019ac:	94bfffc4 	addi	r18,r18,-1
 28019b0:	8009883a 	mov	r4,r16
 28019b4:	880b883a 	mov	r5,r17
 28019b8:	01800284 	movi	r6,10
 28019bc:	000f883a 	mov	r7,zero
 28019c0:	92000005 	stb	r8,0(r18)
 28019c4:	28077500 	call	2807750 <__udivdi3>
 28019c8:	1009883a 	mov	r4,r2
 28019cc:	1021883a 	mov	r16,r2
 28019d0:	18800068 	cmpgeui	r2,r3,1
 28019d4:	1823883a 	mov	r17,r3
 28019d8:	103fee1e 	bne	r2,zero,2801994 <___vfprintf_internal_r+0x1484>
 28019dc:	1800021e 	bne	r3,zero,28019e8 <___vfprintf_internal_r+0x14d8>
 28019e0:	00800244 	movi	r2,9
 28019e4:	113feb36 	bltu	r2,r4,2801994 <___vfprintf_internal_r+0x1484>
 28019e8:	94bfffc4 	addi	r18,r18,-1
 28019ec:	dc814115 	stw	r18,1284(sp)
 28019f0:	003fc006 	br	28018f4 <___vfprintf_internal_r+0x13e4>
 28019f4:	d9014c17 	ldw	r4,1328(sp)
 28019f8:	2080004c 	andi	r2,r4,1
 28019fc:	10009a1e 	bne	r2,zero,2801c68 <___vfprintf_internal_r+0x1758>
 2801a00:	d9401904 	addi	r5,sp,100
 2801a04:	dd000f04 	addi	r20,sp,60
 2801a08:	d9414115 	stw	r5,1284(sp)
 2801a0c:	003d5b06 	br	2800f7c <___vfprintf_internal_r+0xa6c>
 2801a10:	d9014f17 	ldw	r4,1340(sp)
 2801a14:	b00b883a 	mov	r5,r22
 2801a18:	d9800c04 	addi	r6,sp,48
 2801a1c:	28004b80 	call	28004b8 <__sprint_r>
 2801a20:	103c731e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2801a24:	dc800e17 	ldw	r18,56(sp)
 2801a28:	d8c01904 	addi	r3,sp,100
 2801a2c:	003cf906 	br	2800e14 <___vfprintf_internal_r+0x904>
 2801a30:	d8c14c17 	ldw	r3,1328(sp)
 2801a34:	1880040c 	andi	r2,r3,16
 2801a38:	1000711e 	bne	r2,zero,2801c00 <___vfprintf_internal_r+0x16f0>
 2801a3c:	d9014c17 	ldw	r4,1328(sp)
 2801a40:	2080100c 	andi	r2,r4,64
 2801a44:	10006e26 	beq	r2,zero,2801c00 <___vfprintf_internal_r+0x16f0>
 2801a48:	3c00000b 	ldhu	r16,0(r7)
 2801a4c:	0023883a 	mov	r17,zero
 2801a50:	39c00104 	addi	r7,r7,4
 2801a54:	d9c14015 	stw	r7,1280(sp)
 2801a58:	003efa06 	br	2801644 <___vfprintf_internal_r+0x1134>
 2801a5c:	dc400d17 	ldw	r17,52(sp)
 2801a60:	0700a074 	movhi	fp,641
 2801a64:	e735c284 	addi	fp,fp,-10486
 2801a68:	9425883a 	add	r18,r18,r16
 2801a6c:	8c400044 	addi	r17,r17,1
 2801a70:	008001c4 	movi	r2,7
 2801a74:	1f000015 	stw	fp,0(r3)
 2801a78:	1c000115 	stw	r16,4(r3)
 2801a7c:	dc800e15 	stw	r18,56(sp)
 2801a80:	dc400d15 	stw	r17,52(sp)
 2801a84:	147d7016 	blt	r2,r17,2801048 <___vfprintf_internal_r+0xb38>
 2801a88:	18c00204 	addi	r3,r3,8
 2801a8c:	003d7506 	br	2801064 <___vfprintf_internal_r+0xb54>
 2801a90:	dc800e17 	ldw	r18,56(sp)
 2801a94:	dc400d17 	ldw	r17,52(sp)
 2801a98:	0700a074 	movhi	fp,641
 2801a9c:	e735c684 	addi	fp,fp,-10470
 2801aa0:	003bba06 	br	280098c <___vfprintf_internal_r+0x47c>
 2801aa4:	d9014f17 	ldw	r4,1340(sp)
 2801aa8:	b00b883a 	mov	r5,r22
 2801aac:	d9800c04 	addi	r6,sp,48
 2801ab0:	28004b80 	call	28004b8 <__sprint_r>
 2801ab4:	103c4e1e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2801ab8:	dc800e17 	ldw	r18,56(sp)
 2801abc:	d8c01904 	addi	r3,sp,100
 2801ac0:	003ce306 	br	2800e50 <___vfprintf_internal_r+0x940>
 2801ac4:	3c000017 	ldw	r16,0(r7)
 2801ac8:	0009883a 	mov	r4,zero
 2801acc:	39c00104 	addi	r7,r7,4
 2801ad0:	0023883a 	mov	r17,zero
 2801ad4:	d9c14015 	stw	r7,1280(sp)
 2801ad8:	d8000405 	stb	zero,16(sp)
 2801adc:	003d1a06 	br	2800f48 <___vfprintf_internal_r+0xa38>
 2801ae0:	38800017 	ldw	r2,0(r7)
 2801ae4:	39c00104 	addi	r7,r7,4
 2801ae8:	d9c14015 	stw	r7,1280(sp)
 2801aec:	1023d7fa 	srai	r17,r2,31
 2801af0:	1021883a 	mov	r16,r2
 2801af4:	003d1206 	br	2800f40 <___vfprintf_internal_r+0xa30>
 2801af8:	3c000017 	ldw	r16,0(r7)
 2801afc:	01000044 	movi	r4,1
 2801b00:	39c00104 	addi	r7,r7,4
 2801b04:	0023883a 	mov	r17,zero
 2801b08:	d9c14015 	stw	r7,1280(sp)
 2801b0c:	d8000405 	stb	zero,16(sp)
 2801b10:	003d0d06 	br	2800f48 <___vfprintf_internal_r+0xa38>
 2801b14:	0080a074 	movhi	r2,641
 2801b18:	10b5c204 	addi	r2,r2,-10488
 2801b1c:	94800044 	addi	r18,r18,1
 2801b20:	8c400044 	addi	r17,r17,1
 2801b24:	a8800015 	stw	r2,0(r21)
 2801b28:	00c00044 	movi	r3,1
 2801b2c:	008001c4 	movi	r2,7
 2801b30:	a8c00115 	stw	r3,4(r21)
 2801b34:	dc800e15 	stw	r18,56(sp)
 2801b38:	dc400d15 	stw	r17,52(sp)
 2801b3c:	1440ca16 	blt	r2,r17,2801e68 <___vfprintf_internal_r+0x1958>
 2801b40:	a8c00204 	addi	r3,r21,8
 2801b44:	2000061e 	bne	r4,zero,2801b60 <___vfprintf_internal_r+0x1650>
 2801b48:	d9414717 	ldw	r5,1308(sp)
 2801b4c:	2800041e 	bne	r5,zero,2801b60 <___vfprintf_internal_r+0x1650>
 2801b50:	d9814c17 	ldw	r6,1328(sp)
 2801b54:	3080004c 	andi	r2,r6,1
 2801b58:	1005003a 	cmpeq	r2,r2,zero
 2801b5c:	103bea1e 	bne	r2,zero,2800b08 <___vfprintf_internal_r+0x5f8>
 2801b60:	00800044 	movi	r2,1
 2801b64:	dc400d17 	ldw	r17,52(sp)
 2801b68:	18800115 	stw	r2,4(r3)
 2801b6c:	d8814917 	ldw	r2,1316(sp)
 2801b70:	94800044 	addi	r18,r18,1
 2801b74:	8c400044 	addi	r17,r17,1
 2801b78:	18800015 	stw	r2,0(r3)
 2801b7c:	008001c4 	movi	r2,7
 2801b80:	dc800e15 	stw	r18,56(sp)
 2801b84:	dc400d15 	stw	r17,52(sp)
 2801b88:	1440ca16 	blt	r2,r17,2801eb4 <___vfprintf_internal_r+0x19a4>
 2801b8c:	18c00204 	addi	r3,r3,8
 2801b90:	0121c83a 	sub	r16,zero,r4
 2801b94:	0400500e 	bge	zero,r16,2801cd8 <___vfprintf_internal_r+0x17c8>
 2801b98:	00800404 	movi	r2,16
 2801b9c:	1400800e 	bge	r2,r16,2801da0 <___vfprintf_internal_r+0x1890>
 2801ba0:	1027883a 	mov	r19,r2
 2801ba4:	0700a074 	movhi	fp,641
 2801ba8:	e735c284 	addi	fp,fp,-10486
 2801bac:	050001c4 	movi	r20,7
 2801bb0:	00000306 	br	2801bc0 <___vfprintf_internal_r+0x16b0>
 2801bb4:	18c00204 	addi	r3,r3,8
 2801bb8:	843ffc04 	addi	r16,r16,-16
 2801bbc:	9c007a0e 	bge	r19,r16,2801da8 <___vfprintf_internal_r+0x1898>
 2801bc0:	94800404 	addi	r18,r18,16
 2801bc4:	8c400044 	addi	r17,r17,1
 2801bc8:	1f000015 	stw	fp,0(r3)
 2801bcc:	1cc00115 	stw	r19,4(r3)
 2801bd0:	dc800e15 	stw	r18,56(sp)
 2801bd4:	dc400d15 	stw	r17,52(sp)
 2801bd8:	a47ff60e 	bge	r20,r17,2801bb4 <___vfprintf_internal_r+0x16a4>
 2801bdc:	d9014f17 	ldw	r4,1340(sp)
 2801be0:	b00b883a 	mov	r5,r22
 2801be4:	d9800c04 	addi	r6,sp,48
 2801be8:	28004b80 	call	28004b8 <__sprint_r>
 2801bec:	103c001e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2801bf0:	dc800e17 	ldw	r18,56(sp)
 2801bf4:	dc400d17 	ldw	r17,52(sp)
 2801bf8:	d8c01904 	addi	r3,sp,100
 2801bfc:	003fee06 	br	2801bb8 <___vfprintf_internal_r+0x16a8>
 2801c00:	3c000017 	ldw	r16,0(r7)
 2801c04:	0023883a 	mov	r17,zero
 2801c08:	39c00104 	addi	r7,r7,4
 2801c0c:	d9c14015 	stw	r7,1280(sp)
 2801c10:	003e8c06 	br	2801644 <___vfprintf_internal_r+0x1134>
 2801c14:	d9401904 	addi	r5,sp,100
 2801c18:	dd000f04 	addi	r20,sp,60
 2801c1c:	d9414115 	stw	r5,1284(sp)
 2801c20:	d9814417 	ldw	r6,1296(sp)
 2801c24:	880a973a 	slli	r5,r17,28
 2801c28:	8004d13a 	srli	r2,r16,4
 2801c2c:	810003cc 	andi	r4,r16,15
 2801c30:	3109883a 	add	r4,r6,r4
 2801c34:	2884b03a 	or	r2,r5,r2
 2801c38:	21400003 	ldbu	r5,0(r4)
 2801c3c:	d9014117 	ldw	r4,1284(sp)
 2801c40:	8806d13a 	srli	r3,r17,4
 2801c44:	1021883a 	mov	r16,r2
 2801c48:	213fffc4 	addi	r4,r4,-1
 2801c4c:	d9014115 	stw	r4,1284(sp)
 2801c50:	d9814117 	ldw	r6,1284(sp)
 2801c54:	10c8b03a 	or	r4,r2,r3
 2801c58:	1823883a 	mov	r17,r3
 2801c5c:	31400005 	stb	r5,0(r6)
 2801c60:	203fef1e 	bne	r4,zero,2801c20 <___vfprintf_internal_r+0x1710>
 2801c64:	003cc506 	br	2800f7c <___vfprintf_internal_r+0xa6c>
 2801c68:	00800c04 	movi	r2,48
 2801c6c:	d98018c4 	addi	r6,sp,99
 2801c70:	dd000f04 	addi	r20,sp,60
 2801c74:	d88018c5 	stb	r2,99(sp)
 2801c78:	d9814115 	stw	r6,1284(sp)
 2801c7c:	003cbf06 	br	2800f7c <___vfprintf_internal_r+0xa6c>
 2801c80:	dc400d17 	ldw	r17,52(sp)
 2801c84:	0700a074 	movhi	fp,641
 2801c88:	e735c684 	addi	fp,fp,-10470
 2801c8c:	003bc106 	br	2800b94 <___vfprintf_internal_r+0x684>
 2801c90:	d9414c17 	ldw	r5,1328(sp)
 2801c94:	2880040c 	andi	r2,r5,16
 2801c98:	10007c26 	beq	r2,zero,2801e8c <___vfprintf_internal_r+0x197c>
 2801c9c:	38800017 	ldw	r2,0(r7)
 2801ca0:	39c00104 	addi	r7,r7,4
 2801ca4:	d9c14015 	stw	r7,1280(sp)
 2801ca8:	d9814b17 	ldw	r6,1324(sp)
 2801cac:	d9c14017 	ldw	r7,1280(sp)
 2801cb0:	11800015 	stw	r6,0(r2)
 2801cb4:	003a7206 	br	2800680 <___vfprintf_internal_r+0x170>
 2801cb8:	d9014f17 	ldw	r4,1340(sp)
 2801cbc:	b00b883a 	mov	r5,r22
 2801cc0:	d9800c04 	addi	r6,sp,48
 2801cc4:	28004b80 	call	28004b8 <__sprint_r>
 2801cc8:	103bc91e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2801ccc:	dc800e17 	ldw	r18,56(sp)
 2801cd0:	dc400d17 	ldw	r17,52(sp)
 2801cd4:	d8c01904 	addi	r3,sp,100
 2801cd8:	d9014717 	ldw	r4,1308(sp)
 2801cdc:	d9414117 	ldw	r5,1284(sp)
 2801ce0:	8c400044 	addi	r17,r17,1
 2801ce4:	9125883a 	add	r18,r18,r4
 2801ce8:	008001c4 	movi	r2,7
 2801cec:	19400015 	stw	r5,0(r3)
 2801cf0:	19000115 	stw	r4,4(r3)
 2801cf4:	dc800e15 	stw	r18,56(sp)
 2801cf8:	dc400d15 	stw	r17,52(sp)
 2801cfc:	147ce816 	blt	r2,r17,28010a0 <___vfprintf_internal_r+0xb90>
 2801d00:	18c00204 	addi	r3,r3,8
 2801d04:	003b8006 	br	2800b08 <___vfprintf_internal_r+0x5f8>
 2801d08:	38c00017 	ldw	r3,0(r7)
 2801d0c:	39000204 	addi	r4,r7,8
 2801d10:	d9014015 	stw	r4,1280(sp)
 2801d14:	d8c14215 	stw	r3,1288(sp)
 2801d18:	39c00117 	ldw	r7,4(r7)
 2801d1c:	d9c14315 	stw	r7,1292(sp)
 2801d20:	003e1a06 	br	280158c <___vfprintf_internal_r+0x107c>
 2801d24:	0005883a 	mov	r2,zero
 2801d28:	1409c83a 	sub	r4,r2,r16
 2801d2c:	1105803a 	cmpltu	r2,r2,r4
 2801d30:	044bc83a 	sub	r5,zero,r17
 2801d34:	2885c83a 	sub	r2,r5,r2
 2801d38:	2021883a 	mov	r16,r4
 2801d3c:	1023883a 	mov	r17,r2
 2801d40:	01000044 	movi	r4,1
 2801d44:	00800b44 	movi	r2,45
 2801d48:	d8800405 	stb	r2,16(sp)
 2801d4c:	003c7e06 	br	2800f48 <___vfprintf_internal_r+0xa38>
 2801d50:	d9014f17 	ldw	r4,1340(sp)
 2801d54:	b00b883a 	mov	r5,r22
 2801d58:	d9800c04 	addi	r6,sp,48
 2801d5c:	28004b80 	call	28004b8 <__sprint_r>
 2801d60:	103ba31e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2801d64:	dc800e17 	ldw	r18,56(sp)
 2801d68:	dc400d17 	ldw	r17,52(sp)
 2801d6c:	d9000517 	ldw	r4,20(sp)
 2801d70:	d9401904 	addi	r5,sp,100
 2801d74:	003da106 	br	28013fc <___vfprintf_internal_r+0xeec>
 2801d78:	d9014f17 	ldw	r4,1340(sp)
 2801d7c:	b00b883a 	mov	r5,r22
 2801d80:	d9800c04 	addi	r6,sp,48
 2801d84:	28004b80 	call	28004b8 <__sprint_r>
 2801d88:	103b991e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2801d8c:	dc800e17 	ldw	r18,56(sp)
 2801d90:	dc400d17 	ldw	r17,52(sp)
 2801d94:	d9000517 	ldw	r4,20(sp)
 2801d98:	d8c01904 	addi	r3,sp,100
 2801d9c:	003d8b06 	br	28013cc <___vfprintf_internal_r+0xebc>
 2801da0:	0700a074 	movhi	fp,641
 2801da4:	e735c284 	addi	fp,fp,-10486
 2801da8:	9425883a 	add	r18,r18,r16
 2801dac:	8c400044 	addi	r17,r17,1
 2801db0:	008001c4 	movi	r2,7
 2801db4:	1f000015 	stw	fp,0(r3)
 2801db8:	1c000115 	stw	r16,4(r3)
 2801dbc:	dc800e15 	stw	r18,56(sp)
 2801dc0:	dc400d15 	stw	r17,52(sp)
 2801dc4:	147fbc16 	blt	r2,r17,2801cb8 <___vfprintf_internal_r+0x17a8>
 2801dc8:	18c00204 	addi	r3,r3,8
 2801dcc:	003fc206 	br	2801cd8 <___vfprintf_internal_r+0x17c8>
 2801dd0:	d9014f17 	ldw	r4,1340(sp)
 2801dd4:	b00b883a 	mov	r5,r22
 2801dd8:	d9800c04 	addi	r6,sp,48
 2801ddc:	28004b80 	call	28004b8 <__sprint_r>
 2801de0:	103b831e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2801de4:	dc800e17 	ldw	r18,56(sp)
 2801de8:	d9000517 	ldw	r4,20(sp)
 2801dec:	d8c01904 	addi	r3,sp,100
 2801df0:	003cfc06 	br	28011e4 <___vfprintf_internal_r+0xcd4>
 2801df4:	0700a074 	movhi	fp,641
 2801df8:	e735c284 	addi	fp,fp,-10486
 2801dfc:	003bde06 	br	2800d78 <___vfprintf_internal_r+0x868>
 2801e00:	0080a074 	movhi	r2,641
 2801e04:	10b5b104 	addi	r2,r2,-10556
 2801e08:	d8814115 	stw	r2,1284(sp)
 2801e0c:	003def06 	br	28015cc <___vfprintf_internal_r+0x10bc>
 2801e10:	d9014217 	ldw	r4,1288(sp)
 2801e14:	d9414317 	ldw	r5,1292(sp)
 2801e18:	28070000 	call	2807000 <__isnand>
 2801e1c:	10003926 	beq	r2,zero,2801f04 <___vfprintf_internal_r+0x19f4>
 2801e20:	d9414d17 	ldw	r5,1332(sp)
 2801e24:	008011c4 	movi	r2,71
 2801e28:	1140ce16 	blt	r2,r5,2802164 <___vfprintf_internal_r+0x1c54>
 2801e2c:	0180a074 	movhi	r6,641
 2801e30:	31b5b204 	addi	r6,r6,-10552
 2801e34:	d9814115 	stw	r6,1284(sp)
 2801e38:	003de406 	br	28015cc <___vfprintf_internal_r+0x10bc>
 2801e3c:	d9014c17 	ldw	r4,1328(sp)
 2801e40:	bdc00044 	addi	r23,r23,1
 2801e44:	b8c00007 	ldb	r3,0(r23)
 2801e48:	21000814 	ori	r4,r4,32
 2801e4c:	d9014c15 	stw	r4,1328(sp)
 2801e50:	003a2e06 	br	280070c <___vfprintf_internal_r+0x1fc>
 2801e54:	dcc14515 	stw	r19,1300(sp)
 2801e58:	98011016 	blt	r19,zero,280229c <___vfprintf_internal_r+0x1d8c>
 2801e5c:	980f883a 	mov	r7,r19
 2801e60:	d8014615 	stw	zero,1304(sp)
 2801e64:	003c4c06 	br	2800f98 <___vfprintf_internal_r+0xa88>
 2801e68:	d9014f17 	ldw	r4,1340(sp)
 2801e6c:	b00b883a 	mov	r5,r22
 2801e70:	d9800c04 	addi	r6,sp,48
 2801e74:	28004b80 	call	28004b8 <__sprint_r>
 2801e78:	103b5d1e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2801e7c:	dc800e17 	ldw	r18,56(sp)
 2801e80:	d9000517 	ldw	r4,20(sp)
 2801e84:	d8c01904 	addi	r3,sp,100
 2801e88:	003f2e06 	br	2801b44 <___vfprintf_internal_r+0x1634>
 2801e8c:	d8c14c17 	ldw	r3,1328(sp)
 2801e90:	1880100c 	andi	r2,r3,64
 2801e94:	1000a026 	beq	r2,zero,2802118 <___vfprintf_internal_r+0x1c08>
 2801e98:	38800017 	ldw	r2,0(r7)
 2801e9c:	39c00104 	addi	r7,r7,4
 2801ea0:	d9c14015 	stw	r7,1280(sp)
 2801ea4:	d9014b17 	ldw	r4,1324(sp)
 2801ea8:	d9c14017 	ldw	r7,1280(sp)
 2801eac:	1100000d 	sth	r4,0(r2)
 2801eb0:	0039f306 	br	2800680 <___vfprintf_internal_r+0x170>
 2801eb4:	d9014f17 	ldw	r4,1340(sp)
 2801eb8:	b00b883a 	mov	r5,r22
 2801ebc:	d9800c04 	addi	r6,sp,48
 2801ec0:	28004b80 	call	28004b8 <__sprint_r>
 2801ec4:	103b4a1e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2801ec8:	dc800e17 	ldw	r18,56(sp)
 2801ecc:	dc400d17 	ldw	r17,52(sp)
 2801ed0:	d9000517 	ldw	r4,20(sp)
 2801ed4:	d8c01904 	addi	r3,sp,100
 2801ed8:	003f2d06 	br	2801b90 <___vfprintf_internal_r+0x1680>
 2801edc:	00800184 	movi	r2,6
 2801ee0:	14c09a36 	bltu	r2,r19,280214c <___vfprintf_internal_r+0x1c3c>
 2801ee4:	dcc14515 	stw	r19,1300(sp)
 2801ee8:	9800010e 	bge	r19,zero,2801ef0 <___vfprintf_internal_r+0x19e0>
 2801eec:	d8014515 	stw	zero,1300(sp)
 2801ef0:	0080a074 	movhi	r2,641
 2801ef4:	10b5b404 	addi	r2,r2,-10544
 2801ef8:	980f883a 	mov	r7,r19
 2801efc:	d8814115 	stw	r2,1284(sp)
 2801f00:	003a7206 	br	28008cc <___vfprintf_internal_r+0x3bc>
 2801f04:	00bfffc4 	movi	r2,-1
 2801f08:	9880e226 	beq	r19,r2,2802294 <___vfprintf_internal_r+0x1d84>
 2801f0c:	d9414d17 	ldw	r5,1332(sp)
 2801f10:	008019c4 	movi	r2,103
 2801f14:	2880dc26 	beq	r5,r2,2802288 <___vfprintf_internal_r+0x1d78>
 2801f18:	008011c4 	movi	r2,71
 2801f1c:	2880da26 	beq	r5,r2,2802288 <___vfprintf_internal_r+0x1d78>
 2801f20:	d9414c17 	ldw	r5,1328(sp)
 2801f24:	d9014317 	ldw	r4,1292(sp)
 2801f28:	d9814217 	ldw	r6,1288(sp)
 2801f2c:	29404014 	ori	r5,r5,256
 2801f30:	d9414c15 	stw	r5,1328(sp)
 2801f34:	2000cc16 	blt	r4,zero,2802268 <___vfprintf_internal_r+0x1d58>
 2801f38:	3021883a 	mov	r16,r6
 2801f3c:	2023883a 	mov	r17,r4
 2801f40:	0039883a 	mov	fp,zero
 2801f44:	d9414d17 	ldw	r5,1332(sp)
 2801f48:	00801984 	movi	r2,102
 2801f4c:	2880b726 	beq	r5,r2,280222c <___vfprintf_internal_r+0x1d1c>
 2801f50:	00801184 	movi	r2,70
 2801f54:	2880b526 	beq	r5,r2,280222c <___vfprintf_internal_r+0x1d1c>
 2801f58:	00801944 	movi	r2,101
 2801f5c:	2880c826 	beq	r5,r2,2802280 <___vfprintf_internal_r+0x1d70>
 2801f60:	00801144 	movi	r2,69
 2801f64:	2880c626 	beq	r5,r2,2802280 <___vfprintf_internal_r+0x1d70>
 2801f68:	9829883a 	mov	r20,r19
 2801f6c:	d9014f17 	ldw	r4,1340(sp)
 2801f70:	d8800504 	addi	r2,sp,20
 2801f74:	880d883a 	mov	r6,r17
 2801f78:	d8800115 	stw	r2,4(sp)
 2801f7c:	d8c00604 	addi	r3,sp,24
 2801f80:	d8800704 	addi	r2,sp,28
 2801f84:	800b883a 	mov	r5,r16
 2801f88:	01c00084 	movi	r7,2
 2801f8c:	d8c00215 	stw	r3,8(sp)
 2801f90:	d8800315 	stw	r2,12(sp)
 2801f94:	dd000015 	stw	r20,0(sp)
 2801f98:	28027780 	call	2802778 <_dtoa_r>
 2801f9c:	d9814d17 	ldw	r6,1332(sp)
 2801fa0:	d8814115 	stw	r2,1284(sp)
 2801fa4:	008019c4 	movi	r2,103
 2801fa8:	30809526 	beq	r6,r2,2802200 <___vfprintf_internal_r+0x1cf0>
 2801fac:	d8c14d17 	ldw	r3,1332(sp)
 2801fb0:	008011c4 	movi	r2,71
 2801fb4:	18809226 	beq	r3,r2,2802200 <___vfprintf_internal_r+0x1cf0>
 2801fb8:	d9414117 	ldw	r5,1284(sp)
 2801fbc:	d9814d17 	ldw	r6,1332(sp)
 2801fc0:	00801984 	movi	r2,102
 2801fc4:	2d25883a 	add	r18,r5,r20
 2801fc8:	30808626 	beq	r6,r2,28021e4 <___vfprintf_internal_r+0x1cd4>
 2801fcc:	00801184 	movi	r2,70
 2801fd0:	30808426 	beq	r6,r2,28021e4 <___vfprintf_internal_r+0x1cd4>
 2801fd4:	000d883a 	mov	r6,zero
 2801fd8:	000f883a 	mov	r7,zero
 2801fdc:	880b883a 	mov	r5,r17
 2801fe0:	8009883a 	mov	r4,r16
 2801fe4:	2808f3c0 	call	2808f3c <__eqdf2>
 2801fe8:	1000751e 	bne	r2,zero,28021c0 <___vfprintf_internal_r+0x1cb0>
 2801fec:	9005883a 	mov	r2,r18
 2801ff0:	dc800715 	stw	r18,28(sp)
 2801ff4:	d9014117 	ldw	r4,1284(sp)
 2801ff8:	d9414d17 	ldw	r5,1332(sp)
 2801ffc:	00c019c4 	movi	r3,103
 2802000:	1125c83a 	sub	r18,r2,r4
 2802004:	28c06826 	beq	r5,r3,28021a8 <___vfprintf_internal_r+0x1c98>
 2802008:	008011c4 	movi	r2,71
 280200c:	28806626 	beq	r5,r2,28021a8 <___vfprintf_internal_r+0x1c98>
 2802010:	d9000517 	ldw	r4,20(sp)
 2802014:	d8c14d17 	ldw	r3,1332(sp)
 2802018:	00801944 	movi	r2,101
 280201c:	10c05516 	blt	r2,r3,2802174 <___vfprintf_internal_r+0x1c64>
 2802020:	213fffc4 	addi	r4,r4,-1
 2802024:	d9000515 	stw	r4,20(sp)
 2802028:	d8c00805 	stb	r3,32(sp)
 280202c:	2021883a 	mov	r16,r4
 2802030:	2000c116 	blt	r4,zero,2802338 <___vfprintf_internal_r+0x1e28>
 2802034:	00800ac4 	movi	r2,43
 2802038:	d8800845 	stb	r2,33(sp)
 280203c:	00800244 	movi	r2,9
 2802040:	1400af0e 	bge	r2,r16,2802300 <___vfprintf_internal_r+0x1df0>
 2802044:	1027883a 	mov	r19,r2
 2802048:	dc400b84 	addi	r17,sp,46
 280204c:	8009883a 	mov	r4,r16
 2802050:	01400284 	movi	r5,10
 2802054:	28096240 	call	2809624 <__modsi3>
 2802058:	10800c04 	addi	r2,r2,48
 280205c:	8c7fffc4 	addi	r17,r17,-1
 2802060:	8009883a 	mov	r4,r16
 2802064:	01400284 	movi	r5,10
 2802068:	88800005 	stb	r2,0(r17)
 280206c:	28095c40 	call	28095c4 <__divsi3>
 2802070:	1021883a 	mov	r16,r2
 2802074:	98bff516 	blt	r19,r2,280204c <___vfprintf_internal_r+0x1b3c>
 2802078:	10c00c04 	addi	r3,r2,48
 280207c:	d88009c4 	addi	r2,sp,39
 2802080:	108001c4 	addi	r2,r2,7
 2802084:	897fffc4 	addi	r5,r17,-1
 2802088:	88ffffc5 	stb	r3,-1(r17)
 280208c:	2880a72e 	bgeu	r5,r2,280232c <___vfprintf_internal_r+0x1e1c>
 2802090:	1009883a 	mov	r4,r2
 2802094:	d9800804 	addi	r6,sp,32
 2802098:	d8c00884 	addi	r3,sp,34
 280209c:	28800003 	ldbu	r2,0(r5)
 28020a0:	29400044 	addi	r5,r5,1
 28020a4:	18800005 	stb	r2,0(r3)
 28020a8:	18c00044 	addi	r3,r3,1
 28020ac:	293ffb36 	bltu	r5,r4,280209c <___vfprintf_internal_r+0x1b8c>
 28020b0:	1987c83a 	sub	r3,r3,r6
 28020b4:	00800044 	movi	r2,1
 28020b8:	d8c14815 	stw	r3,1312(sp)
 28020bc:	90cf883a 	add	r7,r18,r3
 28020c0:	1480960e 	bge	r2,r18,280231c <___vfprintf_internal_r+0x1e0c>
 28020c4:	39c00044 	addi	r7,r7,1
 28020c8:	d9c14515 	stw	r7,1300(sp)
 28020cc:	38003416 	blt	r7,zero,28021a0 <___vfprintf_internal_r+0x1c90>
 28020d0:	e0803fcc 	andi	r2,fp,255
 28020d4:	1080201c 	xori	r2,r2,128
 28020d8:	10bfe004 	addi	r2,r2,-128
 28020dc:	10004e26 	beq	r2,zero,2802218 <___vfprintf_internal_r+0x1d08>
 28020e0:	00800b44 	movi	r2,45
 28020e4:	dc814715 	stw	r18,1308(sp)
 28020e8:	d8014615 	stw	zero,1304(sp)
 28020ec:	d8800405 	stb	r2,16(sp)
 28020f0:	003bab06 	br	2800fa0 <___vfprintf_internal_r+0xa90>
 28020f4:	00800b44 	movi	r2,45
 28020f8:	d8800405 	stb	r2,16(sp)
 28020fc:	003d2d06 	br	28015b4 <___vfprintf_internal_r+0x10a4>
 2802100:	d9014f17 	ldw	r4,1340(sp)
 2802104:	b00b883a 	mov	r5,r22
 2802108:	d9800c04 	addi	r6,sp,48
 280210c:	28004b80 	call	28004b8 <__sprint_r>
 2802110:	103ab71e 	bne	r2,zero,2800bf0 <___vfprintf_internal_r+0x6e0>
 2802114:	003ab506 	br	2800bec <___vfprintf_internal_r+0x6dc>
 2802118:	38800017 	ldw	r2,0(r7)
 280211c:	39c00104 	addi	r7,r7,4
 2802120:	d9c14015 	stw	r7,1280(sp)
 2802124:	d9414b17 	ldw	r5,1324(sp)
 2802128:	d9c14017 	ldw	r7,1280(sp)
 280212c:	11400015 	stw	r5,0(r2)
 2802130:	00395306 	br	2800680 <___vfprintf_internal_r+0x170>
 2802134:	980f883a 	mov	r7,r19
 2802138:	dcc14515 	stw	r19,1300(sp)
 280213c:	d8014615 	stw	zero,1304(sp)
 2802140:	003b9506 	br	2800f98 <___vfprintf_internal_r+0xa88>
 2802144:	0027883a 	mov	r19,zero
 2802148:	00397206 	br	2800714 <___vfprintf_internal_r+0x204>
 280214c:	00c0a074 	movhi	r3,641
 2802150:	18f5b404 	addi	r3,r3,-10544
 2802154:	100f883a 	mov	r7,r2
 2802158:	d8814515 	stw	r2,1300(sp)
 280215c:	d8c14115 	stw	r3,1284(sp)
 2802160:	0039da06 	br	28008cc <___vfprintf_internal_r+0x3bc>
 2802164:	0080a074 	movhi	r2,641
 2802168:	10b5b304 	addi	r2,r2,-10548
 280216c:	d8814115 	stw	r2,1284(sp)
 2802170:	003d1606 	br	28015cc <___vfprintf_internal_r+0x10bc>
 2802174:	d9414d17 	ldw	r5,1332(sp)
 2802178:	00801984 	movi	r2,102
 280217c:	28804926 	beq	r5,r2,28022a4 <___vfprintf_internal_r+0x1d94>
 2802180:	200f883a 	mov	r7,r4
 2802184:	24805716 	blt	r4,r18,28022e4 <___vfprintf_internal_r+0x1dd4>
 2802188:	d9414c17 	ldw	r5,1328(sp)
 280218c:	2880004c 	andi	r2,r5,1
 2802190:	10000126 	beq	r2,zero,2802198 <___vfprintf_internal_r+0x1c88>
 2802194:	21c00044 	addi	r7,r4,1
 2802198:	d9c14515 	stw	r7,1300(sp)
 280219c:	383fcc0e 	bge	r7,zero,28020d0 <___vfprintf_internal_r+0x1bc0>
 28021a0:	d8014515 	stw	zero,1300(sp)
 28021a4:	003fca06 	br	28020d0 <___vfprintf_internal_r+0x1bc0>
 28021a8:	d9000517 	ldw	r4,20(sp)
 28021ac:	00bfff04 	movi	r2,-4
 28021b0:	1100480e 	bge	r2,r4,28022d4 <___vfprintf_internal_r+0x1dc4>
 28021b4:	99004716 	blt	r19,r4,28022d4 <___vfprintf_internal_r+0x1dc4>
 28021b8:	d8c14d15 	stw	r3,1332(sp)
 28021bc:	003ff006 	br	2802180 <___vfprintf_internal_r+0x1c70>
 28021c0:	d8800717 	ldw	r2,28(sp)
 28021c4:	14bf8b2e 	bgeu	r2,r18,2801ff4 <___vfprintf_internal_r+0x1ae4>
 28021c8:	9007883a 	mov	r3,r18
 28021cc:	01000c04 	movi	r4,48
 28021d0:	11000005 	stb	r4,0(r2)
 28021d4:	10800044 	addi	r2,r2,1
 28021d8:	d8800715 	stw	r2,28(sp)
 28021dc:	18bffc1e 	bne	r3,r2,28021d0 <___vfprintf_internal_r+0x1cc0>
 28021e0:	003f8406 	br	2801ff4 <___vfprintf_internal_r+0x1ae4>
 28021e4:	d8814117 	ldw	r2,1284(sp)
 28021e8:	10c00007 	ldb	r3,0(r2)
 28021ec:	00800c04 	movi	r2,48
 28021f0:	18805b26 	beq	r3,r2,2802360 <___vfprintf_internal_r+0x1e50>
 28021f4:	d9000517 	ldw	r4,20(sp)
 28021f8:	9125883a 	add	r18,r18,r4
 28021fc:	003f7506 	br	2801fd4 <___vfprintf_internal_r+0x1ac4>
 2802200:	d9014c17 	ldw	r4,1328(sp)
 2802204:	2080004c 	andi	r2,r4,1
 2802208:	1005003a 	cmpeq	r2,r2,zero
 280220c:	103f6a26 	beq	r2,zero,2801fb8 <___vfprintf_internal_r+0x1aa8>
 2802210:	d8800717 	ldw	r2,28(sp)
 2802214:	003f7706 	br	2801ff4 <___vfprintf_internal_r+0x1ae4>
 2802218:	d9c14515 	stw	r7,1300(sp)
 280221c:	38004d16 	blt	r7,zero,2802354 <___vfprintf_internal_r+0x1e44>
 2802220:	dc814715 	stw	r18,1308(sp)
 2802224:	d8014615 	stw	zero,1304(sp)
 2802228:	003b5b06 	br	2800f98 <___vfprintf_internal_r+0xa88>
 280222c:	d9014f17 	ldw	r4,1340(sp)
 2802230:	d8800504 	addi	r2,sp,20
 2802234:	d8800115 	stw	r2,4(sp)
 2802238:	d8c00604 	addi	r3,sp,24
 280223c:	d8800704 	addi	r2,sp,28
 2802240:	800b883a 	mov	r5,r16
 2802244:	880d883a 	mov	r6,r17
 2802248:	01c000c4 	movi	r7,3
 280224c:	d8c00215 	stw	r3,8(sp)
 2802250:	d8800315 	stw	r2,12(sp)
 2802254:	dcc00015 	stw	r19,0(sp)
 2802258:	9829883a 	mov	r20,r19
 280225c:	28027780 	call	2802778 <_dtoa_r>
 2802260:	d8814115 	stw	r2,1284(sp)
 2802264:	003f5106 	br	2801fac <___vfprintf_internal_r+0x1a9c>
 2802268:	d8c14217 	ldw	r3,1288(sp)
 280226c:	d9014317 	ldw	r4,1292(sp)
 2802270:	07000b44 	movi	fp,45
 2802274:	1821883a 	mov	r16,r3
 2802278:	2460003c 	xorhi	r17,r4,32768
 280227c:	003f3106 	br	2801f44 <___vfprintf_internal_r+0x1a34>
 2802280:	9d000044 	addi	r20,r19,1
 2802284:	003f3906 	br	2801f6c <___vfprintf_internal_r+0x1a5c>
 2802288:	983f251e 	bne	r19,zero,2801f20 <___vfprintf_internal_r+0x1a10>
 280228c:	04c00044 	movi	r19,1
 2802290:	003f2306 	br	2801f20 <___vfprintf_internal_r+0x1a10>
 2802294:	04c00184 	movi	r19,6
 2802298:	003f2106 	br	2801f20 <___vfprintf_internal_r+0x1a10>
 280229c:	d8014515 	stw	zero,1300(sp)
 28022a0:	003eee06 	br	2801e5c <___vfprintf_internal_r+0x194c>
 28022a4:	200f883a 	mov	r7,r4
 28022a8:	0100370e 	bge	zero,r4,2802388 <___vfprintf_internal_r+0x1e78>
 28022ac:	9800031e 	bne	r19,zero,28022bc <___vfprintf_internal_r+0x1dac>
 28022b0:	d9814c17 	ldw	r6,1328(sp)
 28022b4:	3080004c 	andi	r2,r6,1
 28022b8:	103fb726 	beq	r2,zero,2802198 <___vfprintf_internal_r+0x1c88>
 28022bc:	20800044 	addi	r2,r4,1
 28022c0:	98a7883a 	add	r19,r19,r2
 28022c4:	dcc14515 	stw	r19,1300(sp)
 28022c8:	980f883a 	mov	r7,r19
 28022cc:	983f800e 	bge	r19,zero,28020d0 <___vfprintf_internal_r+0x1bc0>
 28022d0:	003fb306 	br	28021a0 <___vfprintf_internal_r+0x1c90>
 28022d4:	d9814d17 	ldw	r6,1332(sp)
 28022d8:	31bfff84 	addi	r6,r6,-2
 28022dc:	d9814d15 	stw	r6,1332(sp)
 28022e0:	003f4c06 	br	2802014 <___vfprintf_internal_r+0x1b04>
 28022e4:	0100180e 	bge	zero,r4,2802348 <___vfprintf_internal_r+0x1e38>
 28022e8:	00800044 	movi	r2,1
 28022ec:	1485883a 	add	r2,r2,r18
 28022f0:	d8814515 	stw	r2,1300(sp)
 28022f4:	100f883a 	mov	r7,r2
 28022f8:	103f750e 	bge	r2,zero,28020d0 <___vfprintf_internal_r+0x1bc0>
 28022fc:	003fa806 	br	28021a0 <___vfprintf_internal_r+0x1c90>
 2802300:	80c00c04 	addi	r3,r16,48
 2802304:	00800c04 	movi	r2,48
 2802308:	d8c008c5 	stb	r3,35(sp)
 280230c:	d9800804 	addi	r6,sp,32
 2802310:	d8c00904 	addi	r3,sp,36
 2802314:	d8800885 	stb	r2,34(sp)
 2802318:	003f6506 	br	28020b0 <___vfprintf_internal_r+0x1ba0>
 280231c:	d9014c17 	ldw	r4,1328(sp)
 2802320:	2084703a 	and	r2,r4,r2
 2802324:	103f9c26 	beq	r2,zero,2802198 <___vfprintf_internal_r+0x1c88>
 2802328:	003f6606 	br	28020c4 <___vfprintf_internal_r+0x1bb4>
 280232c:	d9800804 	addi	r6,sp,32
 2802330:	d8c00884 	addi	r3,sp,34
 2802334:	003f5e06 	br	28020b0 <___vfprintf_internal_r+0x1ba0>
 2802338:	00800b44 	movi	r2,45
 280233c:	0121c83a 	sub	r16,zero,r4
 2802340:	d8800845 	stb	r2,33(sp)
 2802344:	003f3d06 	br	280203c <___vfprintf_internal_r+0x1b2c>
 2802348:	00800084 	movi	r2,2
 280234c:	1105c83a 	sub	r2,r2,r4
 2802350:	003fe606 	br	28022ec <___vfprintf_internal_r+0x1ddc>
 2802354:	d8014515 	stw	zero,1300(sp)
 2802358:	dc814715 	stw	r18,1308(sp)
 280235c:	003fb106 	br	2802224 <___vfprintf_internal_r+0x1d14>
 2802360:	000d883a 	mov	r6,zero
 2802364:	000f883a 	mov	r7,zero
 2802368:	8009883a 	mov	r4,r16
 280236c:	880b883a 	mov	r5,r17
 2802370:	2808fc40 	call	2808fc4 <__nedf2>
 2802374:	103f9f26 	beq	r2,zero,28021f4 <___vfprintf_internal_r+0x1ce4>
 2802378:	00800044 	movi	r2,1
 280237c:	1509c83a 	sub	r4,r2,r20
 2802380:	d9000515 	stw	r4,20(sp)
 2802384:	003f9b06 	br	28021f4 <___vfprintf_internal_r+0x1ce4>
 2802388:	98000d1e 	bne	r19,zero,28023c0 <___vfprintf_internal_r+0x1eb0>
 280238c:	d8c14c17 	ldw	r3,1328(sp)
 2802390:	1880004c 	andi	r2,r3,1
 2802394:	10000a1e 	bne	r2,zero,28023c0 <___vfprintf_internal_r+0x1eb0>
 2802398:	01000044 	movi	r4,1
 280239c:	200f883a 	mov	r7,r4
 28023a0:	d9014515 	stw	r4,1300(sp)
 28023a4:	003f4a06 	br	28020d0 <___vfprintf_internal_r+0x1bc0>
 28023a8:	3cc00017 	ldw	r19,0(r7)
 28023ac:	39c00104 	addi	r7,r7,4
 28023b0:	983d0e0e 	bge	r19,zero,28017ec <___vfprintf_internal_r+0x12dc>
 28023b4:	b8c00007 	ldb	r3,0(r23)
 28023b8:	04ffffc4 	movi	r19,-1
 28023bc:	0038d306 	br	280070c <___vfprintf_internal_r+0x1fc>
 28023c0:	9cc00084 	addi	r19,r19,2
 28023c4:	dcc14515 	stw	r19,1300(sp)
 28023c8:	980f883a 	mov	r7,r19
 28023cc:	983f400e 	bge	r19,zero,28020d0 <___vfprintf_internal_r+0x1bc0>
 28023d0:	003f7306 	br	28021a0 <___vfprintf_internal_r+0x1c90>

028023d4 <__vfprintf_internal>:
 28023d4:	0080a074 	movhi	r2,641
 28023d8:	10bd3a04 	addi	r2,r2,-2840
 28023dc:	2013883a 	mov	r9,r4
 28023e0:	11000017 	ldw	r4,0(r2)
 28023e4:	2805883a 	mov	r2,r5
 28023e8:	300f883a 	mov	r7,r6
 28023ec:	480b883a 	mov	r5,r9
 28023f0:	100d883a 	mov	r6,r2
 28023f4:	28005101 	jmpi	2800510 <___vfprintf_internal_r>

028023f8 <__swsetup_r>:
 28023f8:	0080a074 	movhi	r2,641
 28023fc:	10bd3a04 	addi	r2,r2,-2840
 2802400:	10c00017 	ldw	r3,0(r2)
 2802404:	defffd04 	addi	sp,sp,-12
 2802408:	dc400115 	stw	r17,4(sp)
 280240c:	dc000015 	stw	r16,0(sp)
 2802410:	dfc00215 	stw	ra,8(sp)
 2802414:	2023883a 	mov	r17,r4
 2802418:	2821883a 	mov	r16,r5
 280241c:	18000226 	beq	r3,zero,2802428 <__swsetup_r+0x30>
 2802420:	18800e17 	ldw	r2,56(r3)
 2802424:	10001f26 	beq	r2,zero,28024a4 <__swsetup_r+0xac>
 2802428:	8100030b 	ldhu	r4,12(r16)
 280242c:	2080020c 	andi	r2,r4,8
 2802430:	10002826 	beq	r2,zero,28024d4 <__swsetup_r+0xdc>
 2802434:	81400417 	ldw	r5,16(r16)
 2802438:	28001d26 	beq	r5,zero,28024b0 <__swsetup_r+0xb8>
 280243c:	2080004c 	andi	r2,r4,1
 2802440:	1005003a 	cmpeq	r2,r2,zero
 2802444:	10000b26 	beq	r2,zero,2802474 <__swsetup_r+0x7c>
 2802448:	2080008c 	andi	r2,r4,2
 280244c:	10001226 	beq	r2,zero,2802498 <__swsetup_r+0xa0>
 2802450:	0005883a 	mov	r2,zero
 2802454:	80800215 	stw	r2,8(r16)
 2802458:	28000b26 	beq	r5,zero,2802488 <__swsetup_r+0x90>
 280245c:	0005883a 	mov	r2,zero
 2802460:	dfc00217 	ldw	ra,8(sp)
 2802464:	dc400117 	ldw	r17,4(sp)
 2802468:	dc000017 	ldw	r16,0(sp)
 280246c:	dec00304 	addi	sp,sp,12
 2802470:	f800283a 	ret
 2802474:	80800517 	ldw	r2,20(r16)
 2802478:	80000215 	stw	zero,8(r16)
 280247c:	0085c83a 	sub	r2,zero,r2
 2802480:	80800615 	stw	r2,24(r16)
 2802484:	283ff51e 	bne	r5,zero,280245c <__swsetup_r+0x64>
 2802488:	2080200c 	andi	r2,r4,128
 280248c:	103ff326 	beq	r2,zero,280245c <__swsetup_r+0x64>
 2802490:	00bfffc4 	movi	r2,-1
 2802494:	003ff206 	br	2802460 <__swsetup_r+0x68>
 2802498:	80800517 	ldw	r2,20(r16)
 280249c:	80800215 	stw	r2,8(r16)
 28024a0:	003fed06 	br	2802458 <__swsetup_r+0x60>
 28024a4:	1809883a 	mov	r4,r3
 28024a8:	2803fc40 	call	2803fc4 <__sinit>
 28024ac:	003fde06 	br	2802428 <__swsetup_r+0x30>
 28024b0:	20c0a00c 	andi	r3,r4,640
 28024b4:	00808004 	movi	r2,512
 28024b8:	18bfe026 	beq	r3,r2,280243c <__swsetup_r+0x44>
 28024bc:	8809883a 	mov	r4,r17
 28024c0:	800b883a 	mov	r5,r16
 28024c4:	2804d700 	call	2804d70 <__smakebuf_r>
 28024c8:	8100030b 	ldhu	r4,12(r16)
 28024cc:	81400417 	ldw	r5,16(r16)
 28024d0:	003fda06 	br	280243c <__swsetup_r+0x44>
 28024d4:	2080040c 	andi	r2,r4,16
 28024d8:	103fed26 	beq	r2,zero,2802490 <__swsetup_r+0x98>
 28024dc:	2080010c 	andi	r2,r4,4
 28024e0:	10001226 	beq	r2,zero,280252c <__swsetup_r+0x134>
 28024e4:	81400c17 	ldw	r5,48(r16)
 28024e8:	28000526 	beq	r5,zero,2802500 <__swsetup_r+0x108>
 28024ec:	80801004 	addi	r2,r16,64
 28024f0:	28800226 	beq	r5,r2,28024fc <__swsetup_r+0x104>
 28024f4:	8809883a 	mov	r4,r17
 28024f8:	280437c0 	call	280437c <_free_r>
 28024fc:	80000c15 	stw	zero,48(r16)
 2802500:	8080030b 	ldhu	r2,12(r16)
 2802504:	81400417 	ldw	r5,16(r16)
 2802508:	80000115 	stw	zero,4(r16)
 280250c:	10bff6cc 	andi	r2,r2,65499
 2802510:	8080030d 	sth	r2,12(r16)
 2802514:	81400015 	stw	r5,0(r16)
 2802518:	8080030b 	ldhu	r2,12(r16)
 280251c:	10800214 	ori	r2,r2,8
 2802520:	113fffcc 	andi	r4,r2,65535
 2802524:	8080030d 	sth	r2,12(r16)
 2802528:	003fc306 	br	2802438 <__swsetup_r+0x40>
 280252c:	81400417 	ldw	r5,16(r16)
 2802530:	003ff906 	br	2802518 <__swsetup_r+0x120>

02802534 <quorem>:
 2802534:	28c00417 	ldw	r3,16(r5)
 2802538:	20800417 	ldw	r2,16(r4)
 280253c:	defff104 	addi	sp,sp,-60
 2802540:	dfc00e15 	stw	ra,56(sp)
 2802544:	df000d15 	stw	fp,52(sp)
 2802548:	ddc00c15 	stw	r23,48(sp)
 280254c:	dd800b15 	stw	r22,44(sp)
 2802550:	dd400a15 	stw	r21,40(sp)
 2802554:	dd000915 	stw	r20,36(sp)
 2802558:	dcc00815 	stw	r19,32(sp)
 280255c:	dc800715 	stw	r18,28(sp)
 2802560:	dc400615 	stw	r17,24(sp)
 2802564:	dc000515 	stw	r16,20(sp)
 2802568:	d9000315 	stw	r4,12(sp)
 280256c:	d9400415 	stw	r5,16(sp)
 2802570:	10c07f16 	blt	r2,r3,2802770 <quorem+0x23c>
 2802574:	1d3fffc4 	addi	r20,r3,-1
 2802578:	d8c00417 	ldw	r3,16(sp)
 280257c:	d9000317 	ldw	r4,12(sp)
 2802580:	a505883a 	add	r2,r20,r20
 2802584:	1085883a 	add	r2,r2,r2
 2802588:	1cc00504 	addi	r19,r3,20
 280258c:	25c00504 	addi	r23,r4,20
 2802590:	98ad883a 	add	r22,r19,r2
 2802594:	15c7883a 	add	r3,r2,r23
 2802598:	b1400017 	ldw	r5,0(r22)
 280259c:	19000017 	ldw	r4,0(r3)
 28025a0:	d8c00015 	stw	r3,0(sp)
 28025a4:	29400044 	addi	r5,r5,1
 28025a8:	d9000215 	stw	r4,8(sp)
 28025ac:	28096840 	call	2809684 <__udivsi3>
 28025b0:	1039883a 	mov	fp,r2
 28025b4:	10003d1e 	bne	r2,zero,28026ac <quorem+0x178>
 28025b8:	d9400417 	ldw	r5,16(sp)
 28025bc:	d9000317 	ldw	r4,12(sp)
 28025c0:	2805a9c0 	call	2805a9c <__mcmp>
 28025c4:	10002c16 	blt	r2,zero,2802678 <quorem+0x144>
 28025c8:	e7000044 	addi	fp,fp,1
 28025cc:	b80f883a 	mov	r7,r23
 28025d0:	0011883a 	mov	r8,zero
 28025d4:	0009883a 	mov	r4,zero
 28025d8:	99400017 	ldw	r5,0(r19)
 28025dc:	38c00017 	ldw	r3,0(r7)
 28025e0:	9cc00104 	addi	r19,r19,4
 28025e4:	28bfffcc 	andi	r2,r5,65535
 28025e8:	2085883a 	add	r2,r4,r2
 28025ec:	11bfffcc 	andi	r6,r2,65535
 28025f0:	193fffcc 	andi	r4,r3,65535
 28025f4:	1004d43a 	srli	r2,r2,16
 28025f8:	280ad43a 	srli	r5,r5,16
 28025fc:	2189c83a 	sub	r4,r4,r6
 2802600:	2209883a 	add	r4,r4,r8
 2802604:	1806d43a 	srli	r3,r3,16
 2802608:	288b883a 	add	r5,r5,r2
 280260c:	200dd43a 	srai	r6,r4,16
 2802610:	28bfffcc 	andi	r2,r5,65535
 2802614:	1887c83a 	sub	r3,r3,r2
 2802618:	1987883a 	add	r3,r3,r6
 280261c:	3900000d 	sth	r4,0(r7)
 2802620:	38c0008d 	sth	r3,2(r7)
 2802624:	2808d43a 	srli	r4,r5,16
 2802628:	39c00104 	addi	r7,r7,4
 280262c:	1811d43a 	srai	r8,r3,16
 2802630:	b4ffe92e 	bgeu	r22,r19,28025d8 <quorem+0xa4>
 2802634:	a505883a 	add	r2,r20,r20
 2802638:	1085883a 	add	r2,r2,r2
 280263c:	b885883a 	add	r2,r23,r2
 2802640:	10c00017 	ldw	r3,0(r2)
 2802644:	18000c1e 	bne	r3,zero,2802678 <quorem+0x144>
 2802648:	113fff04 	addi	r4,r2,-4
 280264c:	b900082e 	bgeu	r23,r4,2802670 <quorem+0x13c>
 2802650:	10bfff17 	ldw	r2,-4(r2)
 2802654:	10000326 	beq	r2,zero,2802664 <quorem+0x130>
 2802658:	00000506 	br	2802670 <quorem+0x13c>
 280265c:	20800017 	ldw	r2,0(r4)
 2802660:	1000031e 	bne	r2,zero,2802670 <quorem+0x13c>
 2802664:	213fff04 	addi	r4,r4,-4
 2802668:	a53fffc4 	addi	r20,r20,-1
 280266c:	b93ffb36 	bltu	r23,r4,280265c <quorem+0x128>
 2802670:	d9000317 	ldw	r4,12(sp)
 2802674:	25000415 	stw	r20,16(r4)
 2802678:	e005883a 	mov	r2,fp
 280267c:	dfc00e17 	ldw	ra,56(sp)
 2802680:	df000d17 	ldw	fp,52(sp)
 2802684:	ddc00c17 	ldw	r23,48(sp)
 2802688:	dd800b17 	ldw	r22,44(sp)
 280268c:	dd400a17 	ldw	r21,40(sp)
 2802690:	dd000917 	ldw	r20,36(sp)
 2802694:	dcc00817 	ldw	r19,32(sp)
 2802698:	dc800717 	ldw	r18,28(sp)
 280269c:	dc400617 	ldw	r17,24(sp)
 28026a0:	dc000517 	ldw	r16,20(sp)
 28026a4:	dec00f04 	addi	sp,sp,60
 28026a8:	f800283a 	ret
 28026ac:	b823883a 	mov	r17,r23
 28026b0:	9825883a 	mov	r18,r19
 28026b4:	d8000115 	stw	zero,4(sp)
 28026b8:	002b883a 	mov	r21,zero
 28026bc:	94000017 	ldw	r16,0(r18)
 28026c0:	e009883a 	mov	r4,fp
 28026c4:	94800104 	addi	r18,r18,4
 28026c8:	817fffcc 	andi	r5,r16,65535
 28026cc:	28096940 	call	2809694 <__mulsi3>
 28026d0:	800ad43a 	srli	r5,r16,16
 28026d4:	e009883a 	mov	r4,fp
 28026d8:	a8a1883a 	add	r16,r21,r2
 28026dc:	28096940 	call	2809694 <__mulsi3>
 28026e0:	89000017 	ldw	r4,0(r17)
 28026e4:	80ffffcc 	andi	r3,r16,65535
 28026e8:	8020d43a 	srli	r16,r16,16
 28026ec:	217fffcc 	andi	r5,r4,65535
 28026f0:	28cbc83a 	sub	r5,r5,r3
 28026f4:	d8c00117 	ldw	r3,4(sp)
 28026f8:	2008d43a 	srli	r4,r4,16
 28026fc:	1405883a 	add	r2,r2,r16
 2802700:	28cb883a 	add	r5,r5,r3
 2802704:	280dd43a 	srai	r6,r5,16
 2802708:	10ffffcc 	andi	r3,r2,65535
 280270c:	20c9c83a 	sub	r4,r4,r3
 2802710:	2189883a 	add	r4,r4,r6
 2802714:	8900008d 	sth	r4,2(r17)
 2802718:	2009d43a 	srai	r4,r4,16
 280271c:	8940000d 	sth	r5,0(r17)
 2802720:	102ad43a 	srli	r21,r2,16
 2802724:	8c400104 	addi	r17,r17,4
 2802728:	d9000115 	stw	r4,4(sp)
 280272c:	b4bfe32e 	bgeu	r22,r18,28026bc <quorem+0x188>
 2802730:	d9000217 	ldw	r4,8(sp)
 2802734:	203fa01e 	bne	r4,zero,28025b8 <quorem+0x84>
 2802738:	d8800017 	ldw	r2,0(sp)
 280273c:	10ffff04 	addi	r3,r2,-4
 2802740:	b8c0082e 	bgeu	r23,r3,2802764 <quorem+0x230>
 2802744:	10bfff17 	ldw	r2,-4(r2)
 2802748:	10000326 	beq	r2,zero,2802758 <quorem+0x224>
 280274c:	00000506 	br	2802764 <quorem+0x230>
 2802750:	18800017 	ldw	r2,0(r3)
 2802754:	1000031e 	bne	r2,zero,2802764 <quorem+0x230>
 2802758:	18ffff04 	addi	r3,r3,-4
 280275c:	a53fffc4 	addi	r20,r20,-1
 2802760:	b8fffb36 	bltu	r23,r3,2802750 <quorem+0x21c>
 2802764:	d8c00317 	ldw	r3,12(sp)
 2802768:	1d000415 	stw	r20,16(r3)
 280276c:	003f9206 	br	28025b8 <quorem+0x84>
 2802770:	0005883a 	mov	r2,zero
 2802774:	003fc106 	br	280267c <quorem+0x148>

02802778 <_dtoa_r>:
 2802778:	22001017 	ldw	r8,64(r4)
 280277c:	deffda04 	addi	sp,sp,-152
 2802780:	dd402115 	stw	r21,132(sp)
 2802784:	dd002015 	stw	r20,128(sp)
 2802788:	dc801e15 	stw	r18,120(sp)
 280278c:	dc401d15 	stw	r17,116(sp)
 2802790:	dfc02515 	stw	ra,148(sp)
 2802794:	df002415 	stw	fp,144(sp)
 2802798:	ddc02315 	stw	r23,140(sp)
 280279c:	dd802215 	stw	r22,136(sp)
 28027a0:	dcc01f15 	stw	r19,124(sp)
 28027a4:	dc001c15 	stw	r16,112(sp)
 28027a8:	d9001615 	stw	r4,88(sp)
 28027ac:	3023883a 	mov	r17,r6
 28027b0:	2829883a 	mov	r20,r5
 28027b4:	d9c01715 	stw	r7,92(sp)
 28027b8:	dc802817 	ldw	r18,160(sp)
 28027bc:	302b883a 	mov	r21,r6
 28027c0:	40000a26 	beq	r8,zero,28027ec <_dtoa_r+0x74>
 28027c4:	20801117 	ldw	r2,68(r4)
 28027c8:	400b883a 	mov	r5,r8
 28027cc:	40800115 	stw	r2,4(r8)
 28027d0:	20c01117 	ldw	r3,68(r4)
 28027d4:	00800044 	movi	r2,1
 28027d8:	10c4983a 	sll	r2,r2,r3
 28027dc:	40800215 	stw	r2,8(r8)
 28027e0:	28059400 	call	2805940 <_Bfree>
 28027e4:	d8c01617 	ldw	r3,88(sp)
 28027e8:	18001015 	stw	zero,64(r3)
 28027ec:	8800a316 	blt	r17,zero,2802a7c <_dtoa_r+0x304>
 28027f0:	90000015 	stw	zero,0(r18)
 28027f4:	a8dffc2c 	andhi	r3,r21,32752
 28027f8:	009ffc34 	movhi	r2,32752
 28027fc:	18809126 	beq	r3,r2,2802a44 <_dtoa_r+0x2cc>
 2802800:	000d883a 	mov	r6,zero
 2802804:	000f883a 	mov	r7,zero
 2802808:	a009883a 	mov	r4,r20
 280280c:	a80b883a 	mov	r5,r21
 2802810:	dd001215 	stw	r20,72(sp)
 2802814:	dd401315 	stw	r21,76(sp)
 2802818:	2808fc40 	call	2808fc4 <__nedf2>
 280281c:	1000171e 	bne	r2,zero,280287c <_dtoa_r+0x104>
 2802820:	d9802717 	ldw	r6,156(sp)
 2802824:	00800044 	movi	r2,1
 2802828:	30800015 	stw	r2,0(r6)
 280282c:	d8802917 	ldw	r2,164(sp)
 2802830:	10029b26 	beq	r2,zero,28032a0 <_dtoa_r+0xb28>
 2802834:	d9002917 	ldw	r4,164(sp)
 2802838:	0080a074 	movhi	r2,641
 280283c:	10b5c244 	addi	r2,r2,-10487
 2802840:	10ffffc4 	addi	r3,r2,-1
 2802844:	20800015 	stw	r2,0(r4)
 2802848:	1805883a 	mov	r2,r3
 280284c:	dfc02517 	ldw	ra,148(sp)
 2802850:	df002417 	ldw	fp,144(sp)
 2802854:	ddc02317 	ldw	r23,140(sp)
 2802858:	dd802217 	ldw	r22,136(sp)
 280285c:	dd402117 	ldw	r21,132(sp)
 2802860:	dd002017 	ldw	r20,128(sp)
 2802864:	dcc01f17 	ldw	r19,124(sp)
 2802868:	dc801e17 	ldw	r18,120(sp)
 280286c:	dc401d17 	ldw	r17,116(sp)
 2802870:	dc001c17 	ldw	r16,112(sp)
 2802874:	dec02604 	addi	sp,sp,152
 2802878:	f800283a 	ret
 280287c:	d9001617 	ldw	r4,88(sp)
 2802880:	d9401217 	ldw	r5,72(sp)
 2802884:	d8800104 	addi	r2,sp,4
 2802888:	a80d883a 	mov	r6,r21
 280288c:	d9c00204 	addi	r7,sp,8
 2802890:	d8800015 	stw	r2,0(sp)
 2802894:	2805f7c0 	call	2805f7c <__d2b>
 2802898:	d8800715 	stw	r2,28(sp)
 280289c:	a804d53a 	srli	r2,r21,20
 28028a0:	1101ffcc 	andi	r4,r2,2047
 28028a4:	20008626 	beq	r4,zero,2802ac0 <_dtoa_r+0x348>
 28028a8:	d8c01217 	ldw	r3,72(sp)
 28028ac:	00800434 	movhi	r2,16
 28028b0:	10bfffc4 	addi	r2,r2,-1
 28028b4:	ddc00117 	ldw	r23,4(sp)
 28028b8:	a884703a 	and	r2,r21,r2
 28028bc:	1811883a 	mov	r8,r3
 28028c0:	124ffc34 	orhi	r9,r2,16368
 28028c4:	25bf0044 	addi	r22,r4,-1023
 28028c8:	d8000815 	stw	zero,32(sp)
 28028cc:	0005883a 	mov	r2,zero
 28028d0:	00cffe34 	movhi	r3,16376
 28028d4:	480b883a 	mov	r5,r9
 28028d8:	4009883a 	mov	r4,r8
 28028dc:	180f883a 	mov	r7,r3
 28028e0:	100d883a 	mov	r6,r2
 28028e4:	280882c0 	call	280882c <__subdf3>
 28028e8:	0218dbf4 	movhi	r8,25455
 28028ec:	4210d844 	addi	r8,r8,17249
 28028f0:	024ff4f4 	movhi	r9,16339
 28028f4:	4a61e9c4 	addi	r9,r9,-30809
 28028f8:	480f883a 	mov	r7,r9
 28028fc:	400d883a 	mov	r6,r8
 2802900:	180b883a 	mov	r5,r3
 2802904:	1009883a 	mov	r4,r2
 2802908:	28089200 	call	2808920 <__muldf3>
 280290c:	0222d874 	movhi	r8,35681
 2802910:	42322cc4 	addi	r8,r8,-14157
 2802914:	024ff1f4 	movhi	r9,16327
 2802918:	4a628a04 	addi	r9,r9,-30168
 280291c:	480f883a 	mov	r7,r9
 2802920:	400d883a 	mov	r6,r8
 2802924:	180b883a 	mov	r5,r3
 2802928:	1009883a 	mov	r4,r2
 280292c:	28088ac0 	call	28088ac <__adddf3>
 2802930:	b009883a 	mov	r4,r22
 2802934:	1021883a 	mov	r16,r2
 2802938:	1823883a 	mov	r17,r3
 280293c:	28091e40 	call	28091e4 <__floatsidf>
 2802940:	021427f4 	movhi	r8,20639
 2802944:	421e7ec4 	addi	r8,r8,31227
 2802948:	024ff4f4 	movhi	r9,16339
 280294c:	4a5104c4 	addi	r9,r9,17427
 2802950:	480f883a 	mov	r7,r9
 2802954:	400d883a 	mov	r6,r8
 2802958:	180b883a 	mov	r5,r3
 280295c:	1009883a 	mov	r4,r2
 2802960:	28089200 	call	2808920 <__muldf3>
 2802964:	180f883a 	mov	r7,r3
 2802968:	880b883a 	mov	r5,r17
 280296c:	100d883a 	mov	r6,r2
 2802970:	8009883a 	mov	r4,r16
 2802974:	28088ac0 	call	28088ac <__adddf3>
 2802978:	1009883a 	mov	r4,r2
 280297c:	180b883a 	mov	r5,r3
 2802980:	1021883a 	mov	r16,r2
 2802984:	1823883a 	mov	r17,r3
 2802988:	28092dc0 	call	28092dc <__fixdfsi>
 280298c:	000d883a 	mov	r6,zero
 2802990:	000f883a 	mov	r7,zero
 2802994:	8009883a 	mov	r4,r16
 2802998:	880b883a 	mov	r5,r17
 280299c:	d8800d15 	stw	r2,52(sp)
 28029a0:	280915c0 	call	280915c <__ltdf2>
 28029a4:	10031716 	blt	r2,zero,2803604 <_dtoa_r+0xe8c>
 28029a8:	d8c00d17 	ldw	r3,52(sp)
 28029ac:	00800584 	movi	r2,22
 28029b0:	10c1482e 	bgeu	r2,r3,2802ed4 <_dtoa_r+0x75c>
 28029b4:	01000044 	movi	r4,1
 28029b8:	d9000c15 	stw	r4,48(sp)
 28029bc:	bd85c83a 	sub	r2,r23,r22
 28029c0:	11bfffc4 	addi	r6,r2,-1
 28029c4:	30030b16 	blt	r6,zero,28035f4 <_dtoa_r+0xe7c>
 28029c8:	d9800a15 	stw	r6,40(sp)
 28029cc:	d8001115 	stw	zero,68(sp)
 28029d0:	d8c00d17 	ldw	r3,52(sp)
 28029d4:	1802ff16 	blt	r3,zero,28035d4 <_dtoa_r+0xe5c>
 28029d8:	d9000a17 	ldw	r4,40(sp)
 28029dc:	d8c00915 	stw	r3,36(sp)
 28029e0:	d8001015 	stw	zero,64(sp)
 28029e4:	20c9883a 	add	r4,r4,r3
 28029e8:	d9000a15 	stw	r4,40(sp)
 28029ec:	d9001717 	ldw	r4,92(sp)
 28029f0:	00800244 	movi	r2,9
 28029f4:	11004636 	bltu	r2,r4,2802b10 <_dtoa_r+0x398>
 28029f8:	00800144 	movi	r2,5
 28029fc:	11020416 	blt	r2,r4,2803210 <_dtoa_r+0xa98>
 2802a00:	04400044 	movi	r17,1
 2802a04:	d8c01717 	ldw	r3,92(sp)
 2802a08:	00800144 	movi	r2,5
 2802a0c:	10c1ed36 	bltu	r2,r3,28031c4 <_dtoa_r+0xa4c>
 2802a10:	18c5883a 	add	r2,r3,r3
 2802a14:	1085883a 	add	r2,r2,r2
 2802a18:	00c0a034 	movhi	r3,640
 2802a1c:	18ca8b04 	addi	r3,r3,10796
 2802a20:	10c5883a 	add	r2,r2,r3
 2802a24:	11000017 	ldw	r4,0(r2)
 2802a28:	2000683a 	jmp	r4
 2802a2c:	02802b18 	cmpnei	r10,zero,172
 2802a30:	02802b18 	cmpnei	r10,zero,172
 2802a34:	02803518 	cmpnei	r10,zero,212
 2802a38:	028034f0 	cmpltui	r10,zero,211
 2802a3c:	02803534 	movhi	r10,212
 2802a40:	02803540 	call	280354 <__alt_mem_sdram_ctrl-0x257fcac>
 2802a44:	d9002717 	ldw	r4,156(sp)
 2802a48:	0089c3c4 	movi	r2,9999
 2802a4c:	20800015 	stw	r2,0(r4)
 2802a50:	a0001026 	beq	r20,zero,2802a94 <_dtoa_r+0x31c>
 2802a54:	00c0a074 	movhi	r3,641
 2802a58:	18f5ce04 	addi	r3,r3,-10440
 2802a5c:	d9802917 	ldw	r6,164(sp)
 2802a60:	303f7926 	beq	r6,zero,2802848 <_dtoa_r+0xd0>
 2802a64:	188000c7 	ldb	r2,3(r3)
 2802a68:	190000c4 	addi	r4,r3,3
 2802a6c:	1000101e 	bne	r2,zero,2802ab0 <_dtoa_r+0x338>
 2802a70:	d8802917 	ldw	r2,164(sp)
 2802a74:	11000015 	stw	r4,0(r2)
 2802a78:	003f7306 	br	2802848 <_dtoa_r+0xd0>
 2802a7c:	00a00034 	movhi	r2,32768
 2802a80:	10bfffc4 	addi	r2,r2,-1
 2802a84:	00c00044 	movi	r3,1
 2802a88:	88aa703a 	and	r21,r17,r2
 2802a8c:	90c00015 	stw	r3,0(r18)
 2802a90:	003f5806 	br	28027f4 <_dtoa_r+0x7c>
 2802a94:	00800434 	movhi	r2,16
 2802a98:	10bfffc4 	addi	r2,r2,-1
 2802a9c:	a884703a 	and	r2,r21,r2
 2802aa0:	103fec1e 	bne	r2,zero,2802a54 <_dtoa_r+0x2dc>
 2802aa4:	00c0a074 	movhi	r3,641
 2802aa8:	18f5cb04 	addi	r3,r3,-10452
 2802aac:	003feb06 	br	2802a5c <_dtoa_r+0x2e4>
 2802ab0:	d8802917 	ldw	r2,164(sp)
 2802ab4:	19000204 	addi	r4,r3,8
 2802ab8:	11000015 	stw	r4,0(r2)
 2802abc:	003f6206 	br	2802848 <_dtoa_r+0xd0>
 2802ac0:	ddc00117 	ldw	r23,4(sp)
 2802ac4:	d8800217 	ldw	r2,8(sp)
 2802ac8:	01000804 	movi	r4,32
 2802acc:	b8c10c84 	addi	r3,r23,1074
 2802ad0:	18a3883a 	add	r17,r3,r2
 2802ad4:	2441b80e 	bge	r4,r17,28031b8 <_dtoa_r+0xa40>
 2802ad8:	00c01004 	movi	r3,64
 2802adc:	1c47c83a 	sub	r3,r3,r17
 2802ae0:	88bff804 	addi	r2,r17,-32
 2802ae4:	a8c6983a 	sll	r3,r21,r3
 2802ae8:	a084d83a 	srl	r2,r20,r2
 2802aec:	1888b03a 	or	r4,r3,r2
 2802af0:	28093b40 	call	28093b4 <__floatunsidf>
 2802af4:	1011883a 	mov	r8,r2
 2802af8:	00bf8434 	movhi	r2,65040
 2802afc:	01000044 	movi	r4,1
 2802b00:	10d3883a 	add	r9,r2,r3
 2802b04:	8dbef344 	addi	r22,r17,-1075
 2802b08:	d9000815 	stw	r4,32(sp)
 2802b0c:	003f6f06 	br	28028cc <_dtoa_r+0x154>
 2802b10:	d8001715 	stw	zero,92(sp)
 2802b14:	04400044 	movi	r17,1
 2802b18:	00bfffc4 	movi	r2,-1
 2802b1c:	00c00044 	movi	r3,1
 2802b20:	d8800e15 	stw	r2,56(sp)
 2802b24:	d8002615 	stw	zero,152(sp)
 2802b28:	d8800f15 	stw	r2,60(sp)
 2802b2c:	d8c00b15 	stw	r3,44(sp)
 2802b30:	1021883a 	mov	r16,r2
 2802b34:	d8801617 	ldw	r2,88(sp)
 2802b38:	10001115 	stw	zero,68(r2)
 2802b3c:	d8801617 	ldw	r2,88(sp)
 2802b40:	11401117 	ldw	r5,68(r2)
 2802b44:	1009883a 	mov	r4,r2
 2802b48:	2805ec00 	call	2805ec0 <_Balloc>
 2802b4c:	d8c01617 	ldw	r3,88(sp)
 2802b50:	d8800515 	stw	r2,20(sp)
 2802b54:	18801015 	stw	r2,64(r3)
 2802b58:	00800384 	movi	r2,14
 2802b5c:	14006836 	bltu	r2,r16,2802d00 <_dtoa_r+0x588>
 2802b60:	8805003a 	cmpeq	r2,r17,zero
 2802b64:	1000661e 	bne	r2,zero,2802d00 <_dtoa_r+0x588>
 2802b68:	d9000d17 	ldw	r4,52(sp)
 2802b6c:	0102300e 	bge	zero,r4,2803430 <_dtoa_r+0xcb8>
 2802b70:	208003cc 	andi	r2,r4,15
 2802b74:	100490fa 	slli	r2,r2,3
 2802b78:	2025d13a 	srai	r18,r4,4
 2802b7c:	00c0a074 	movhi	r3,641
 2802b80:	18f5e004 	addi	r3,r3,-10368
 2802b84:	10c5883a 	add	r2,r2,r3
 2802b88:	90c0040c 	andi	r3,r18,16
 2802b8c:	14000017 	ldw	r16,0(r2)
 2802b90:	14400117 	ldw	r17,4(r2)
 2802b94:	18036a1e 	bne	r3,zero,2803940 <_dtoa_r+0x11c8>
 2802b98:	05800084 	movi	r22,2
 2802b9c:	90001026 	beq	r18,zero,2802be0 <_dtoa_r+0x468>
 2802ba0:	04c0a074 	movhi	r19,641
 2802ba4:	9cf61204 	addi	r19,r19,-10168
 2802ba8:	9080004c 	andi	r2,r18,1
 2802bac:	1005003a 	cmpeq	r2,r2,zero
 2802bb0:	1000081e 	bne	r2,zero,2802bd4 <_dtoa_r+0x45c>
 2802bb4:	99800017 	ldw	r6,0(r19)
 2802bb8:	99c00117 	ldw	r7,4(r19)
 2802bbc:	880b883a 	mov	r5,r17
 2802bc0:	8009883a 	mov	r4,r16
 2802bc4:	28089200 	call	2808920 <__muldf3>
 2802bc8:	1021883a 	mov	r16,r2
 2802bcc:	b5800044 	addi	r22,r22,1
 2802bd0:	1823883a 	mov	r17,r3
 2802bd4:	9025d07a 	srai	r18,r18,1
 2802bd8:	9cc00204 	addi	r19,r19,8
 2802bdc:	903ff21e 	bne	r18,zero,2802ba8 <_dtoa_r+0x430>
 2802be0:	a80b883a 	mov	r5,r21
 2802be4:	a009883a 	mov	r4,r20
 2802be8:	880f883a 	mov	r7,r17
 2802bec:	800d883a 	mov	r6,r16
 2802bf0:	2808ce40 	call	2808ce4 <__divdf3>
 2802bf4:	1029883a 	mov	r20,r2
 2802bf8:	182b883a 	mov	r21,r3
 2802bfc:	d8c00c17 	ldw	r3,48(sp)
 2802c00:	1805003a 	cmpeq	r2,r3,zero
 2802c04:	1000081e 	bne	r2,zero,2802c28 <_dtoa_r+0x4b0>
 2802c08:	0005883a 	mov	r2,zero
 2802c0c:	00cffc34 	movhi	r3,16368
 2802c10:	180f883a 	mov	r7,r3
 2802c14:	a009883a 	mov	r4,r20
 2802c18:	a80b883a 	mov	r5,r21
 2802c1c:	100d883a 	mov	r6,r2
 2802c20:	280915c0 	call	280915c <__ltdf2>
 2802c24:	1003fe16 	blt	r2,zero,2803c20 <_dtoa_r+0x14a8>
 2802c28:	b009883a 	mov	r4,r22
 2802c2c:	28091e40 	call	28091e4 <__floatsidf>
 2802c30:	180b883a 	mov	r5,r3
 2802c34:	1009883a 	mov	r4,r2
 2802c38:	a00d883a 	mov	r6,r20
 2802c3c:	a80f883a 	mov	r7,r21
 2802c40:	28089200 	call	2808920 <__muldf3>
 2802c44:	0011883a 	mov	r8,zero
 2802c48:	02500734 	movhi	r9,16412
 2802c4c:	1009883a 	mov	r4,r2
 2802c50:	180b883a 	mov	r5,r3
 2802c54:	480f883a 	mov	r7,r9
 2802c58:	400d883a 	mov	r6,r8
 2802c5c:	28088ac0 	call	28088ac <__adddf3>
 2802c60:	d9000f17 	ldw	r4,60(sp)
 2802c64:	102d883a 	mov	r22,r2
 2802c68:	00bf3034 	movhi	r2,64704
 2802c6c:	18b9883a 	add	fp,r3,r2
 2802c70:	e02f883a 	mov	r23,fp
 2802c74:	20028f1e 	bne	r4,zero,28036b4 <_dtoa_r+0xf3c>
 2802c78:	0005883a 	mov	r2,zero
 2802c7c:	00d00534 	movhi	r3,16404
 2802c80:	a009883a 	mov	r4,r20
 2802c84:	a80b883a 	mov	r5,r21
 2802c88:	180f883a 	mov	r7,r3
 2802c8c:	100d883a 	mov	r6,r2
 2802c90:	280882c0 	call	280882c <__subdf3>
 2802c94:	1009883a 	mov	r4,r2
 2802c98:	e00f883a 	mov	r7,fp
 2802c9c:	180b883a 	mov	r5,r3
 2802ca0:	b00d883a 	mov	r6,r22
 2802ca4:	1025883a 	mov	r18,r2
 2802ca8:	1827883a 	mov	r19,r3
 2802cac:	280904c0 	call	280904c <__gtdf2>
 2802cb0:	00834f16 	blt	zero,r2,28039f0 <_dtoa_r+0x1278>
 2802cb4:	e0e0003c 	xorhi	r3,fp,32768
 2802cb8:	9009883a 	mov	r4,r18
 2802cbc:	980b883a 	mov	r5,r19
 2802cc0:	180f883a 	mov	r7,r3
 2802cc4:	b00d883a 	mov	r6,r22
 2802cc8:	280915c0 	call	280915c <__ltdf2>
 2802ccc:	1000080e 	bge	r2,zero,2802cf0 <_dtoa_r+0x578>
 2802cd0:	0027883a 	mov	r19,zero
 2802cd4:	0025883a 	mov	r18,zero
 2802cd8:	d8802617 	ldw	r2,152(sp)
 2802cdc:	df000517 	ldw	fp,20(sp)
 2802ce0:	d8000615 	stw	zero,24(sp)
 2802ce4:	0084303a 	nor	r2,zero,r2
 2802ce8:	d8800d15 	stw	r2,52(sp)
 2802cec:	00019b06 	br	280335c <_dtoa_r+0xbe4>
 2802cf0:	d9801217 	ldw	r6,72(sp)
 2802cf4:	d8801317 	ldw	r2,76(sp)
 2802cf8:	3029883a 	mov	r20,r6
 2802cfc:	102b883a 	mov	r21,r2
 2802d00:	d8c00217 	ldw	r3,8(sp)
 2802d04:	18008516 	blt	r3,zero,2802f1c <_dtoa_r+0x7a4>
 2802d08:	d9000d17 	ldw	r4,52(sp)
 2802d0c:	00800384 	movi	r2,14
 2802d10:	11008216 	blt	r2,r4,2802f1c <_dtoa_r+0x7a4>
 2802d14:	200490fa 	slli	r2,r4,3
 2802d18:	d9802617 	ldw	r6,152(sp)
 2802d1c:	00c0a074 	movhi	r3,641
 2802d20:	18f5e004 	addi	r3,r3,-10368
 2802d24:	10c5883a 	add	r2,r2,r3
 2802d28:	14800017 	ldw	r18,0(r2)
 2802d2c:	14c00117 	ldw	r19,4(r2)
 2802d30:	30031e16 	blt	r6,zero,28039ac <_dtoa_r+0x1234>
 2802d34:	d9000517 	ldw	r4,20(sp)
 2802d38:	d8c00f17 	ldw	r3,60(sp)
 2802d3c:	a823883a 	mov	r17,r21
 2802d40:	a021883a 	mov	r16,r20
 2802d44:	192b883a 	add	r21,r3,r4
 2802d48:	2039883a 	mov	fp,r4
 2802d4c:	00000f06 	br	2802d8c <_dtoa_r+0x614>
 2802d50:	0005883a 	mov	r2,zero
 2802d54:	00d00934 	movhi	r3,16420
 2802d58:	5009883a 	mov	r4,r10
 2802d5c:	580b883a 	mov	r5,r11
 2802d60:	180f883a 	mov	r7,r3
 2802d64:	100d883a 	mov	r6,r2
 2802d68:	28089200 	call	2808920 <__muldf3>
 2802d6c:	180b883a 	mov	r5,r3
 2802d70:	000d883a 	mov	r6,zero
 2802d74:	000f883a 	mov	r7,zero
 2802d78:	1009883a 	mov	r4,r2
 2802d7c:	1021883a 	mov	r16,r2
 2802d80:	1823883a 	mov	r17,r3
 2802d84:	2808fc40 	call	2808fc4 <__nedf2>
 2802d88:	10004526 	beq	r2,zero,2802ea0 <_dtoa_r+0x728>
 2802d8c:	900d883a 	mov	r6,r18
 2802d90:	980f883a 	mov	r7,r19
 2802d94:	8009883a 	mov	r4,r16
 2802d98:	880b883a 	mov	r5,r17
 2802d9c:	2808ce40 	call	2808ce4 <__divdf3>
 2802da0:	180b883a 	mov	r5,r3
 2802da4:	1009883a 	mov	r4,r2
 2802da8:	28092dc0 	call	28092dc <__fixdfsi>
 2802dac:	1009883a 	mov	r4,r2
 2802db0:	1029883a 	mov	r20,r2
 2802db4:	28091e40 	call	28091e4 <__floatsidf>
 2802db8:	180f883a 	mov	r7,r3
 2802dbc:	9009883a 	mov	r4,r18
 2802dc0:	980b883a 	mov	r5,r19
 2802dc4:	100d883a 	mov	r6,r2
 2802dc8:	28089200 	call	2808920 <__muldf3>
 2802dcc:	180f883a 	mov	r7,r3
 2802dd0:	880b883a 	mov	r5,r17
 2802dd4:	8009883a 	mov	r4,r16
 2802dd8:	100d883a 	mov	r6,r2
 2802ddc:	280882c0 	call	280882c <__subdf3>
 2802de0:	1015883a 	mov	r10,r2
 2802de4:	a0800c04 	addi	r2,r20,48
 2802de8:	e0800005 	stb	r2,0(fp)
 2802dec:	e7000044 	addi	fp,fp,1
 2802df0:	1817883a 	mov	r11,r3
 2802df4:	e57fd61e 	bne	fp,r21,2802d50 <_dtoa_r+0x5d8>
 2802df8:	500d883a 	mov	r6,r10
 2802dfc:	180f883a 	mov	r7,r3
 2802e00:	5009883a 	mov	r4,r10
 2802e04:	180b883a 	mov	r5,r3
 2802e08:	28088ac0 	call	28088ac <__adddf3>
 2802e0c:	100d883a 	mov	r6,r2
 2802e10:	9009883a 	mov	r4,r18
 2802e14:	980b883a 	mov	r5,r19
 2802e18:	180f883a 	mov	r7,r3
 2802e1c:	1021883a 	mov	r16,r2
 2802e20:	1823883a 	mov	r17,r3
 2802e24:	280915c0 	call	280915c <__ltdf2>
 2802e28:	10000816 	blt	r2,zero,2802e4c <_dtoa_r+0x6d4>
 2802e2c:	980b883a 	mov	r5,r19
 2802e30:	800d883a 	mov	r6,r16
 2802e34:	880f883a 	mov	r7,r17
 2802e38:	9009883a 	mov	r4,r18
 2802e3c:	2808f3c0 	call	2808f3c <__eqdf2>
 2802e40:	1000171e 	bne	r2,zero,2802ea0 <_dtoa_r+0x728>
 2802e44:	a080004c 	andi	r2,r20,1
 2802e48:	10001526 	beq	r2,zero,2802ea0 <_dtoa_r+0x728>
 2802e4c:	d8800d17 	ldw	r2,52(sp)
 2802e50:	d8800415 	stw	r2,16(sp)
 2802e54:	e009883a 	mov	r4,fp
 2802e58:	213fffc4 	addi	r4,r4,-1
 2802e5c:	20c00007 	ldb	r3,0(r4)
 2802e60:	00800e44 	movi	r2,57
 2802e64:	1880081e 	bne	r3,r2,2802e88 <_dtoa_r+0x710>
 2802e68:	d8800517 	ldw	r2,20(sp)
 2802e6c:	113ffa1e 	bne	r2,r4,2802e58 <_dtoa_r+0x6e0>
 2802e70:	d8c00417 	ldw	r3,16(sp)
 2802e74:	d9800517 	ldw	r6,20(sp)
 2802e78:	00800c04 	movi	r2,48
 2802e7c:	18c00044 	addi	r3,r3,1
 2802e80:	d8c00415 	stw	r3,16(sp)
 2802e84:	30800005 	stb	r2,0(r6)
 2802e88:	20800003 	ldbu	r2,0(r4)
 2802e8c:	d8c00417 	ldw	r3,16(sp)
 2802e90:	27000044 	addi	fp,r4,1
 2802e94:	10800044 	addi	r2,r2,1
 2802e98:	d8c00d15 	stw	r3,52(sp)
 2802e9c:	20800005 	stb	r2,0(r4)
 2802ea0:	d9001617 	ldw	r4,88(sp)
 2802ea4:	d9400717 	ldw	r5,28(sp)
 2802ea8:	28059400 	call	2805940 <_Bfree>
 2802eac:	e0000005 	stb	zero,0(fp)
 2802eb0:	d9800d17 	ldw	r6,52(sp)
 2802eb4:	d8c02717 	ldw	r3,156(sp)
 2802eb8:	d9002917 	ldw	r4,164(sp)
 2802ebc:	30800044 	addi	r2,r6,1
 2802ec0:	18800015 	stw	r2,0(r3)
 2802ec4:	20029c26 	beq	r4,zero,2803938 <_dtoa_r+0x11c0>
 2802ec8:	d8c00517 	ldw	r3,20(sp)
 2802ecc:	27000015 	stw	fp,0(r4)
 2802ed0:	003e5d06 	br	2802848 <_dtoa_r+0xd0>
 2802ed4:	d9800d17 	ldw	r6,52(sp)
 2802ed8:	00c0a074 	movhi	r3,641
 2802edc:	18f5e004 	addi	r3,r3,-10368
 2802ee0:	d9001217 	ldw	r4,72(sp)
 2802ee4:	300490fa 	slli	r2,r6,3
 2802ee8:	d9401317 	ldw	r5,76(sp)
 2802eec:	10c5883a 	add	r2,r2,r3
 2802ef0:	12000017 	ldw	r8,0(r2)
 2802ef4:	12400117 	ldw	r9,4(r2)
 2802ef8:	400d883a 	mov	r6,r8
 2802efc:	480f883a 	mov	r7,r9
 2802f00:	280915c0 	call	280915c <__ltdf2>
 2802f04:	1000030e 	bge	r2,zero,2802f14 <_dtoa_r+0x79c>
 2802f08:	d8800d17 	ldw	r2,52(sp)
 2802f0c:	10bfffc4 	addi	r2,r2,-1
 2802f10:	d8800d15 	stw	r2,52(sp)
 2802f14:	d8000c15 	stw	zero,48(sp)
 2802f18:	003ea806 	br	28029bc <_dtoa_r+0x244>
 2802f1c:	d9000b17 	ldw	r4,44(sp)
 2802f20:	202cc03a 	cmpne	r22,r4,zero
 2802f24:	b000c71e 	bne	r22,zero,2803244 <_dtoa_r+0xacc>
 2802f28:	dc001117 	ldw	r16,68(sp)
 2802f2c:	dc801017 	ldw	r18,64(sp)
 2802f30:	0027883a 	mov	r19,zero
 2802f34:	04000b0e 	bge	zero,r16,2802f64 <_dtoa_r+0x7ec>
 2802f38:	d8c00a17 	ldw	r3,40(sp)
 2802f3c:	00c0090e 	bge	zero,r3,2802f64 <_dtoa_r+0x7ec>
 2802f40:	8005883a 	mov	r2,r16
 2802f44:	1c011316 	blt	r3,r16,2803394 <_dtoa_r+0xc1c>
 2802f48:	d9000a17 	ldw	r4,40(sp)
 2802f4c:	d9801117 	ldw	r6,68(sp)
 2802f50:	80a1c83a 	sub	r16,r16,r2
 2802f54:	2089c83a 	sub	r4,r4,r2
 2802f58:	308dc83a 	sub	r6,r6,r2
 2802f5c:	d9000a15 	stw	r4,40(sp)
 2802f60:	d9801115 	stw	r6,68(sp)
 2802f64:	d8801017 	ldw	r2,64(sp)
 2802f68:	0080150e 	bge	zero,r2,2802fc0 <_dtoa_r+0x848>
 2802f6c:	d8c00b17 	ldw	r3,44(sp)
 2802f70:	1805003a 	cmpeq	r2,r3,zero
 2802f74:	1001c91e 	bne	r2,zero,280369c <_dtoa_r+0xf24>
 2802f78:	04800e0e 	bge	zero,r18,2802fb4 <_dtoa_r+0x83c>
 2802f7c:	d9001617 	ldw	r4,88(sp)
 2802f80:	980b883a 	mov	r5,r19
 2802f84:	900d883a 	mov	r6,r18
 2802f88:	280678c0 	call	280678c <__pow5mult>
 2802f8c:	d9001617 	ldw	r4,88(sp)
 2802f90:	d9800717 	ldw	r6,28(sp)
 2802f94:	100b883a 	mov	r5,r2
 2802f98:	1027883a 	mov	r19,r2
 2802f9c:	28063d00 	call	28063d0 <__multiply>
 2802fa0:	d9001617 	ldw	r4,88(sp)
 2802fa4:	d9400717 	ldw	r5,28(sp)
 2802fa8:	1023883a 	mov	r17,r2
 2802fac:	28059400 	call	2805940 <_Bfree>
 2802fb0:	dc400715 	stw	r17,28(sp)
 2802fb4:	d9001017 	ldw	r4,64(sp)
 2802fb8:	248dc83a 	sub	r6,r4,r18
 2802fbc:	30010e1e 	bne	r6,zero,28033f8 <_dtoa_r+0xc80>
 2802fc0:	d9001617 	ldw	r4,88(sp)
 2802fc4:	04400044 	movi	r17,1
 2802fc8:	880b883a 	mov	r5,r17
 2802fcc:	28066240 	call	2806624 <__i2b>
 2802fd0:	d9800917 	ldw	r6,36(sp)
 2802fd4:	1025883a 	mov	r18,r2
 2802fd8:	0180040e 	bge	zero,r6,2802fec <_dtoa_r+0x874>
 2802fdc:	d9001617 	ldw	r4,88(sp)
 2802fe0:	100b883a 	mov	r5,r2
 2802fe4:	280678c0 	call	280678c <__pow5mult>
 2802fe8:	1025883a 	mov	r18,r2
 2802fec:	d8801717 	ldw	r2,92(sp)
 2802ff0:	8880f30e 	bge	r17,r2,28033c0 <_dtoa_r+0xc48>
 2802ff4:	0023883a 	mov	r17,zero
 2802ff8:	d9800917 	ldw	r6,36(sp)
 2802ffc:	30019e1e 	bne	r6,zero,2803678 <_dtoa_r+0xf00>
 2803000:	00c00044 	movi	r3,1
 2803004:	d9000a17 	ldw	r4,40(sp)
 2803008:	20c5883a 	add	r2,r4,r3
 280300c:	10c007cc 	andi	r3,r2,31
 2803010:	1800841e 	bne	r3,zero,2803224 <_dtoa_r+0xaac>
 2803014:	00800704 	movi	r2,28
 2803018:	d9000a17 	ldw	r4,40(sp)
 280301c:	d9801117 	ldw	r6,68(sp)
 2803020:	80a1883a 	add	r16,r16,r2
 2803024:	2089883a 	add	r4,r4,r2
 2803028:	308d883a 	add	r6,r6,r2
 280302c:	d9000a15 	stw	r4,40(sp)
 2803030:	d9801115 	stw	r6,68(sp)
 2803034:	d8801117 	ldw	r2,68(sp)
 2803038:	0080050e 	bge	zero,r2,2803050 <_dtoa_r+0x8d8>
 280303c:	d9400717 	ldw	r5,28(sp)
 2803040:	d9001617 	ldw	r4,88(sp)
 2803044:	100d883a 	mov	r6,r2
 2803048:	28062840 	call	2806284 <__lshift>
 280304c:	d8800715 	stw	r2,28(sp)
 2803050:	d8c00a17 	ldw	r3,40(sp)
 2803054:	00c0050e 	bge	zero,r3,280306c <_dtoa_r+0x8f4>
 2803058:	d9001617 	ldw	r4,88(sp)
 280305c:	900b883a 	mov	r5,r18
 2803060:	180d883a 	mov	r6,r3
 2803064:	28062840 	call	2806284 <__lshift>
 2803068:	1025883a 	mov	r18,r2
 280306c:	d9000c17 	ldw	r4,48(sp)
 2803070:	2005003a 	cmpeq	r2,r4,zero
 2803074:	10016f26 	beq	r2,zero,2803634 <_dtoa_r+0xebc>
 2803078:	d9000f17 	ldw	r4,60(sp)
 280307c:	0102170e 	bge	zero,r4,28038dc <_dtoa_r+0x1164>
 2803080:	d9800b17 	ldw	r6,44(sp)
 2803084:	3005003a 	cmpeq	r2,r6,zero
 2803088:	1000881e 	bne	r2,zero,28032ac <_dtoa_r+0xb34>
 280308c:	0400050e 	bge	zero,r16,28030a4 <_dtoa_r+0x92c>
 2803090:	d9001617 	ldw	r4,88(sp)
 2803094:	980b883a 	mov	r5,r19
 2803098:	800d883a 	mov	r6,r16
 280309c:	28062840 	call	2806284 <__lshift>
 28030a0:	1027883a 	mov	r19,r2
 28030a4:	8804c03a 	cmpne	r2,r17,zero
 28030a8:	1002541e 	bne	r2,zero,28039fc <_dtoa_r+0x1284>
 28030ac:	980b883a 	mov	r5,r19
 28030b0:	dd800517 	ldw	r22,20(sp)
 28030b4:	dcc00615 	stw	r19,24(sp)
 28030b8:	a700004c 	andi	fp,r20,1
 28030bc:	2827883a 	mov	r19,r5
 28030c0:	d9000717 	ldw	r4,28(sp)
 28030c4:	900b883a 	mov	r5,r18
 28030c8:	28025340 	call	2802534 <quorem>
 28030cc:	d9000717 	ldw	r4,28(sp)
 28030d0:	d9400617 	ldw	r5,24(sp)
 28030d4:	1023883a 	mov	r17,r2
 28030d8:	8dc00c04 	addi	r23,r17,48
 28030dc:	2805a9c0 	call	2805a9c <__mcmp>
 28030e0:	d9001617 	ldw	r4,88(sp)
 28030e4:	900b883a 	mov	r5,r18
 28030e8:	980d883a 	mov	r6,r19
 28030ec:	1029883a 	mov	r20,r2
 28030f0:	28060f80 	call	28060f8 <__mdiff>
 28030f4:	102b883a 	mov	r21,r2
 28030f8:	10800317 	ldw	r2,12(r2)
 28030fc:	1001281e 	bne	r2,zero,28035a0 <_dtoa_r+0xe28>
 2803100:	d9000717 	ldw	r4,28(sp)
 2803104:	a80b883a 	mov	r5,r21
 2803108:	2805a9c0 	call	2805a9c <__mcmp>
 280310c:	d9001617 	ldw	r4,88(sp)
 2803110:	1021883a 	mov	r16,r2
 2803114:	a80b883a 	mov	r5,r21
 2803118:	28059400 	call	2805940 <_Bfree>
 280311c:	8000041e 	bne	r16,zero,2803130 <_dtoa_r+0x9b8>
 2803120:	d8801717 	ldw	r2,92(sp)
 2803124:	1000021e 	bne	r2,zero,2803130 <_dtoa_r+0x9b8>
 2803128:	e004c03a 	cmpne	r2,fp,zero
 280312c:	10011726 	beq	r2,zero,280358c <_dtoa_r+0xe14>
 2803130:	a0010616 	blt	r20,zero,280354c <_dtoa_r+0xdd4>
 2803134:	a000041e 	bne	r20,zero,2803148 <_dtoa_r+0x9d0>
 2803138:	d8c01717 	ldw	r3,92(sp)
 280313c:	1800021e 	bne	r3,zero,2803148 <_dtoa_r+0x9d0>
 2803140:	e004c03a 	cmpne	r2,fp,zero
 2803144:	10010126 	beq	r2,zero,280354c <_dtoa_r+0xdd4>
 2803148:	04023d16 	blt	zero,r16,2803a40 <_dtoa_r+0x12c8>
 280314c:	b5c00005 	stb	r23,0(r22)
 2803150:	d9800517 	ldw	r6,20(sp)
 2803154:	d9000f17 	ldw	r4,60(sp)
 2803158:	b5800044 	addi	r22,r22,1
 280315c:	3105883a 	add	r2,r6,r4
 2803160:	b0806526 	beq	r22,r2,28032f8 <_dtoa_r+0xb80>
 2803164:	d9400717 	ldw	r5,28(sp)
 2803168:	d9001617 	ldw	r4,88(sp)
 280316c:	01800284 	movi	r6,10
 2803170:	000f883a 	mov	r7,zero
 2803174:	28066600 	call	2806660 <__multadd>
 2803178:	d8800715 	stw	r2,28(sp)
 280317c:	d8800617 	ldw	r2,24(sp)
 2803180:	14c10c26 	beq	r2,r19,28035b4 <_dtoa_r+0xe3c>
 2803184:	d9400617 	ldw	r5,24(sp)
 2803188:	d9001617 	ldw	r4,88(sp)
 280318c:	01800284 	movi	r6,10
 2803190:	000f883a 	mov	r7,zero
 2803194:	28066600 	call	2806660 <__multadd>
 2803198:	d9001617 	ldw	r4,88(sp)
 280319c:	980b883a 	mov	r5,r19
 28031a0:	01800284 	movi	r6,10
 28031a4:	000f883a 	mov	r7,zero
 28031a8:	d8800615 	stw	r2,24(sp)
 28031ac:	28066600 	call	2806660 <__multadd>
 28031b0:	1027883a 	mov	r19,r2
 28031b4:	003fc206 	br	28030c0 <_dtoa_r+0x948>
 28031b8:	2445c83a 	sub	r2,r4,r17
 28031bc:	a088983a 	sll	r4,r20,r2
 28031c0:	003e4b06 	br	2802af0 <_dtoa_r+0x378>
 28031c4:	01bfffc4 	movi	r6,-1
 28031c8:	00800044 	movi	r2,1
 28031cc:	d9800e15 	stw	r6,56(sp)
 28031d0:	d9800f15 	stw	r6,60(sp)
 28031d4:	d8800b15 	stw	r2,44(sp)
 28031d8:	d8c01617 	ldw	r3,88(sp)
 28031dc:	008005c4 	movi	r2,23
 28031e0:	18001115 	stw	zero,68(r3)
 28031e4:	1580082e 	bgeu	r2,r22,2803208 <_dtoa_r+0xa90>
 28031e8:	00c00104 	movi	r3,4
 28031ec:	0009883a 	mov	r4,zero
 28031f0:	18c7883a 	add	r3,r3,r3
 28031f4:	18800504 	addi	r2,r3,20
 28031f8:	21000044 	addi	r4,r4,1
 28031fc:	b0bffc2e 	bgeu	r22,r2,28031f0 <_dtoa_r+0xa78>
 2803200:	d9801617 	ldw	r6,88(sp)
 2803204:	31001115 	stw	r4,68(r6)
 2803208:	dc000f17 	ldw	r16,60(sp)
 280320c:	003e4b06 	br	2802b3c <_dtoa_r+0x3c4>
 2803210:	d9801717 	ldw	r6,92(sp)
 2803214:	0023883a 	mov	r17,zero
 2803218:	31bfff04 	addi	r6,r6,-4
 280321c:	d9801715 	stw	r6,92(sp)
 2803220:	003df806 	br	2802a04 <_dtoa_r+0x28c>
 2803224:	00800804 	movi	r2,32
 2803228:	10c9c83a 	sub	r4,r2,r3
 280322c:	00c00104 	movi	r3,4
 2803230:	19005a16 	blt	r3,r4,280339c <_dtoa_r+0xc24>
 2803234:	008000c4 	movi	r2,3
 2803238:	113f7e16 	blt	r2,r4,2803034 <_dtoa_r+0x8bc>
 280323c:	20800704 	addi	r2,r4,28
 2803240:	003f7506 	br	2803018 <_dtoa_r+0x8a0>
 2803244:	d9801717 	ldw	r6,92(sp)
 2803248:	00800044 	movi	r2,1
 280324c:	1180a10e 	bge	r2,r6,28034d4 <_dtoa_r+0xd5c>
 2803250:	d9800f17 	ldw	r6,60(sp)
 2803254:	d8c01017 	ldw	r3,64(sp)
 2803258:	30bfffc4 	addi	r2,r6,-1
 280325c:	1881c616 	blt	r3,r2,2803978 <_dtoa_r+0x1200>
 2803260:	18a5c83a 	sub	r18,r3,r2
 2803264:	d8800f17 	ldw	r2,60(sp)
 2803268:	10026216 	blt	r2,zero,2803bf4 <_dtoa_r+0x147c>
 280326c:	dc001117 	ldw	r16,68(sp)
 2803270:	1007883a 	mov	r3,r2
 2803274:	d9800a17 	ldw	r6,40(sp)
 2803278:	d8801117 	ldw	r2,68(sp)
 280327c:	d9001617 	ldw	r4,88(sp)
 2803280:	30cd883a 	add	r6,r6,r3
 2803284:	10c5883a 	add	r2,r2,r3
 2803288:	01400044 	movi	r5,1
 280328c:	d9800a15 	stw	r6,40(sp)
 2803290:	d8801115 	stw	r2,68(sp)
 2803294:	28066240 	call	2806624 <__i2b>
 2803298:	1027883a 	mov	r19,r2
 280329c:	003f2506 	br	2802f34 <_dtoa_r+0x7bc>
 28032a0:	00c0a074 	movhi	r3,641
 28032a4:	18f5c204 	addi	r3,r3,-10488
 28032a8:	003d6706 	br	2802848 <_dtoa_r+0xd0>
 28032ac:	dd800517 	ldw	r22,20(sp)
 28032b0:	04000044 	movi	r16,1
 28032b4:	00000706 	br	28032d4 <_dtoa_r+0xb5c>
 28032b8:	d9400717 	ldw	r5,28(sp)
 28032bc:	d9001617 	ldw	r4,88(sp)
 28032c0:	01800284 	movi	r6,10
 28032c4:	000f883a 	mov	r7,zero
 28032c8:	28066600 	call	2806660 <__multadd>
 28032cc:	d8800715 	stw	r2,28(sp)
 28032d0:	84000044 	addi	r16,r16,1
 28032d4:	d9000717 	ldw	r4,28(sp)
 28032d8:	900b883a 	mov	r5,r18
 28032dc:	28025340 	call	2802534 <quorem>
 28032e0:	15c00c04 	addi	r23,r2,48
 28032e4:	b5c00005 	stb	r23,0(r22)
 28032e8:	d8c00f17 	ldw	r3,60(sp)
 28032ec:	b5800044 	addi	r22,r22,1
 28032f0:	80fff116 	blt	r16,r3,28032b8 <_dtoa_r+0xb40>
 28032f4:	d8000615 	stw	zero,24(sp)
 28032f8:	d9400717 	ldw	r5,28(sp)
 28032fc:	d9001617 	ldw	r4,88(sp)
 2803300:	01800044 	movi	r6,1
 2803304:	28062840 	call	2806284 <__lshift>
 2803308:	1009883a 	mov	r4,r2
 280330c:	900b883a 	mov	r5,r18
 2803310:	d8800715 	stw	r2,28(sp)
 2803314:	2805a9c0 	call	2805a9c <__mcmp>
 2803318:	00803c0e 	bge	zero,r2,280340c <_dtoa_r+0xc94>
 280331c:	b009883a 	mov	r4,r22
 2803320:	213fffc4 	addi	r4,r4,-1
 2803324:	21400003 	ldbu	r5,0(r4)
 2803328:	00800e44 	movi	r2,57
 280332c:	28c03fcc 	andi	r3,r5,255
 2803330:	18c0201c 	xori	r3,r3,128
 2803334:	18ffe004 	addi	r3,r3,-128
 2803338:	1881981e 	bne	r3,r2,280399c <_dtoa_r+0x1224>
 280333c:	d9800517 	ldw	r6,20(sp)
 2803340:	21bff71e 	bne	r4,r6,2803320 <_dtoa_r+0xba8>
 2803344:	d8800d17 	ldw	r2,52(sp)
 2803348:	37000044 	addi	fp,r6,1
 280334c:	10800044 	addi	r2,r2,1
 2803350:	d8800d15 	stw	r2,52(sp)
 2803354:	00800c44 	movi	r2,49
 2803358:	30800005 	stb	r2,0(r6)
 280335c:	d9001617 	ldw	r4,88(sp)
 2803360:	900b883a 	mov	r5,r18
 2803364:	28059400 	call	2805940 <_Bfree>
 2803368:	983ecd26 	beq	r19,zero,2802ea0 <_dtoa_r+0x728>
 280336c:	d8c00617 	ldw	r3,24(sp)
 2803370:	18000426 	beq	r3,zero,2803384 <_dtoa_r+0xc0c>
 2803374:	1cc00326 	beq	r3,r19,2803384 <_dtoa_r+0xc0c>
 2803378:	d9001617 	ldw	r4,88(sp)
 280337c:	180b883a 	mov	r5,r3
 2803380:	28059400 	call	2805940 <_Bfree>
 2803384:	d9001617 	ldw	r4,88(sp)
 2803388:	980b883a 	mov	r5,r19
 280338c:	28059400 	call	2805940 <_Bfree>
 2803390:	003ec306 	br	2802ea0 <_dtoa_r+0x728>
 2803394:	1805883a 	mov	r2,r3
 2803398:	003eeb06 	br	2802f48 <_dtoa_r+0x7d0>
 280339c:	d9800a17 	ldw	r6,40(sp)
 28033a0:	d8c01117 	ldw	r3,68(sp)
 28033a4:	20bfff04 	addi	r2,r4,-4
 28033a8:	308d883a 	add	r6,r6,r2
 28033ac:	1887883a 	add	r3,r3,r2
 28033b0:	80a1883a 	add	r16,r16,r2
 28033b4:	d9800a15 	stw	r6,40(sp)
 28033b8:	d8c01115 	stw	r3,68(sp)
 28033bc:	003f1d06 	br	2803034 <_dtoa_r+0x8bc>
 28033c0:	a03f0c1e 	bne	r20,zero,2802ff4 <_dtoa_r+0x87c>
 28033c4:	00800434 	movhi	r2,16
 28033c8:	10bfffc4 	addi	r2,r2,-1
 28033cc:	a884703a 	and	r2,r21,r2
 28033d0:	103f081e 	bne	r2,zero,2802ff4 <_dtoa_r+0x87c>
 28033d4:	a89ffc2c 	andhi	r2,r21,32752
 28033d8:	103f0626 	beq	r2,zero,2802ff4 <_dtoa_r+0x87c>
 28033dc:	d8c01117 	ldw	r3,68(sp)
 28033e0:	d9000a17 	ldw	r4,40(sp)
 28033e4:	18c00044 	addi	r3,r3,1
 28033e8:	21000044 	addi	r4,r4,1
 28033ec:	d8c01115 	stw	r3,68(sp)
 28033f0:	d9000a15 	stw	r4,40(sp)
 28033f4:	003f0006 	br	2802ff8 <_dtoa_r+0x880>
 28033f8:	d9400717 	ldw	r5,28(sp)
 28033fc:	d9001617 	ldw	r4,88(sp)
 2803400:	280678c0 	call	280678c <__pow5mult>
 2803404:	d8800715 	stw	r2,28(sp)
 2803408:	003eed06 	br	2802fc0 <_dtoa_r+0x848>
 280340c:	1000021e 	bne	r2,zero,2803418 <_dtoa_r+0xca0>
 2803410:	b880004c 	andi	r2,r23,1
 2803414:	103fc11e 	bne	r2,zero,280331c <_dtoa_r+0xba4>
 2803418:	b5bfffc4 	addi	r22,r22,-1
 280341c:	b0c00007 	ldb	r3,0(r22)
 2803420:	00800c04 	movi	r2,48
 2803424:	18bffc26 	beq	r3,r2,2803418 <_dtoa_r+0xca0>
 2803428:	b7000044 	addi	fp,r22,1
 280342c:	003fcb06 	br	280335c <_dtoa_r+0xbe4>
 2803430:	d9800d17 	ldw	r6,52(sp)
 2803434:	018fc83a 	sub	r7,zero,r6
 2803438:	3801f726 	beq	r7,zero,2803c18 <_dtoa_r+0x14a0>
 280343c:	398003cc 	andi	r6,r7,15
 2803440:	300c90fa 	slli	r6,r6,3
 2803444:	0140a074 	movhi	r5,641
 2803448:	2975e004 	addi	r5,r5,-10368
 280344c:	d9001217 	ldw	r4,72(sp)
 2803450:	314d883a 	add	r6,r6,r5
 2803454:	30c00117 	ldw	r3,4(r6)
 2803458:	30800017 	ldw	r2,0(r6)
 280345c:	d9401317 	ldw	r5,76(sp)
 2803460:	3821d13a 	srai	r16,r7,4
 2803464:	100d883a 	mov	r6,r2
 2803468:	180f883a 	mov	r7,r3
 280346c:	28089200 	call	2808920 <__muldf3>
 2803470:	1011883a 	mov	r8,r2
 2803474:	1813883a 	mov	r9,r3
 2803478:	1029883a 	mov	r20,r2
 280347c:	182b883a 	mov	r21,r3
 2803480:	8001e526 	beq	r16,zero,2803c18 <_dtoa_r+0x14a0>
 2803484:	05800084 	movi	r22,2
 2803488:	0440a074 	movhi	r17,641
 280348c:	8c761204 	addi	r17,r17,-10168
 2803490:	8080004c 	andi	r2,r16,1
 2803494:	1005003a 	cmpeq	r2,r2,zero
 2803498:	1000081e 	bne	r2,zero,28034bc <_dtoa_r+0xd44>
 280349c:	89800017 	ldw	r6,0(r17)
 28034a0:	89c00117 	ldw	r7,4(r17)
 28034a4:	480b883a 	mov	r5,r9
 28034a8:	4009883a 	mov	r4,r8
 28034ac:	28089200 	call	2808920 <__muldf3>
 28034b0:	1011883a 	mov	r8,r2
 28034b4:	b5800044 	addi	r22,r22,1
 28034b8:	1813883a 	mov	r9,r3
 28034bc:	8021d07a 	srai	r16,r16,1
 28034c0:	8c400204 	addi	r17,r17,8
 28034c4:	803ff21e 	bne	r16,zero,2803490 <_dtoa_r+0xd18>
 28034c8:	4029883a 	mov	r20,r8
 28034cc:	482b883a 	mov	r21,r9
 28034d0:	003dca06 	br	2802bfc <_dtoa_r+0x484>
 28034d4:	d9000817 	ldw	r4,32(sp)
 28034d8:	2005003a 	cmpeq	r2,r4,zero
 28034dc:	1001f61e 	bne	r2,zero,2803cb8 <_dtoa_r+0x1540>
 28034e0:	dc001117 	ldw	r16,68(sp)
 28034e4:	dc801017 	ldw	r18,64(sp)
 28034e8:	18c10cc4 	addi	r3,r3,1075
 28034ec:	003f6106 	br	2803274 <_dtoa_r+0xafc>
 28034f0:	d8000b15 	stw	zero,44(sp)
 28034f4:	d9802617 	ldw	r6,152(sp)
 28034f8:	d8c00d17 	ldw	r3,52(sp)
 28034fc:	30800044 	addi	r2,r6,1
 2803500:	18ad883a 	add	r22,r3,r2
 2803504:	b13fffc4 	addi	r4,r22,-1
 2803508:	d9000e15 	stw	r4,56(sp)
 280350c:	0581f60e 	bge	zero,r22,2803ce8 <_dtoa_r+0x1570>
 2803510:	dd800f15 	stw	r22,60(sp)
 2803514:	003f3006 	br	28031d8 <_dtoa_r+0xa60>
 2803518:	d8000b15 	stw	zero,44(sp)
 280351c:	d9002617 	ldw	r4,152(sp)
 2803520:	0101eb0e 	bge	zero,r4,2803cd0 <_dtoa_r+0x1558>
 2803524:	202d883a 	mov	r22,r4
 2803528:	d9000e15 	stw	r4,56(sp)
 280352c:	d9000f15 	stw	r4,60(sp)
 2803530:	003f2906 	br	28031d8 <_dtoa_r+0xa60>
 2803534:	01800044 	movi	r6,1
 2803538:	d9800b15 	stw	r6,44(sp)
 280353c:	003ff706 	br	280351c <_dtoa_r+0xda4>
 2803540:	01000044 	movi	r4,1
 2803544:	d9000b15 	stw	r4,44(sp)
 2803548:	003fea06 	br	28034f4 <_dtoa_r+0xd7c>
 280354c:	04000c0e 	bge	zero,r16,2803580 <_dtoa_r+0xe08>
 2803550:	d9400717 	ldw	r5,28(sp)
 2803554:	d9001617 	ldw	r4,88(sp)
 2803558:	01800044 	movi	r6,1
 280355c:	28062840 	call	2806284 <__lshift>
 2803560:	1009883a 	mov	r4,r2
 2803564:	900b883a 	mov	r5,r18
 2803568:	d8800715 	stw	r2,28(sp)
 280356c:	2805a9c0 	call	2805a9c <__mcmp>
 2803570:	0081e00e 	bge	zero,r2,2803cf4 <_dtoa_r+0x157c>
 2803574:	bdc00044 	addi	r23,r23,1
 2803578:	00800e84 	movi	r2,58
 280357c:	b881a226 	beq	r23,r2,2803c08 <_dtoa_r+0x1490>
 2803580:	b7000044 	addi	fp,r22,1
 2803584:	b5c00005 	stb	r23,0(r22)
 2803588:	003f7406 	br	280335c <_dtoa_r+0xbe4>
 280358c:	00800e44 	movi	r2,57
 2803590:	b8819d26 	beq	r23,r2,2803c08 <_dtoa_r+0x1490>
 2803594:	053ffa0e 	bge	zero,r20,2803580 <_dtoa_r+0xe08>
 2803598:	8dc00c44 	addi	r23,r17,49
 280359c:	003ff806 	br	2803580 <_dtoa_r+0xe08>
 28035a0:	d9001617 	ldw	r4,88(sp)
 28035a4:	a80b883a 	mov	r5,r21
 28035a8:	04000044 	movi	r16,1
 28035ac:	28059400 	call	2805940 <_Bfree>
 28035b0:	003edf06 	br	2803130 <_dtoa_r+0x9b8>
 28035b4:	d9001617 	ldw	r4,88(sp)
 28035b8:	980b883a 	mov	r5,r19
 28035bc:	01800284 	movi	r6,10
 28035c0:	000f883a 	mov	r7,zero
 28035c4:	28066600 	call	2806660 <__multadd>
 28035c8:	1027883a 	mov	r19,r2
 28035cc:	d8800615 	stw	r2,24(sp)
 28035d0:	003ebb06 	br	28030c0 <_dtoa_r+0x948>
 28035d4:	d9801117 	ldw	r6,68(sp)
 28035d8:	d8800d17 	ldw	r2,52(sp)
 28035dc:	d8000915 	stw	zero,36(sp)
 28035e0:	308dc83a 	sub	r6,r6,r2
 28035e4:	0087c83a 	sub	r3,zero,r2
 28035e8:	d9801115 	stw	r6,68(sp)
 28035ec:	d8c01015 	stw	r3,64(sp)
 28035f0:	003cfe06 	br	28029ec <_dtoa_r+0x274>
 28035f4:	018dc83a 	sub	r6,zero,r6
 28035f8:	d9801115 	stw	r6,68(sp)
 28035fc:	d8000a15 	stw	zero,40(sp)
 2803600:	003cf306 	br	28029d0 <_dtoa_r+0x258>
 2803604:	d9000d17 	ldw	r4,52(sp)
 2803608:	28091e40 	call	28091e4 <__floatsidf>
 280360c:	880b883a 	mov	r5,r17
 2803610:	8009883a 	mov	r4,r16
 2803614:	180f883a 	mov	r7,r3
 2803618:	100d883a 	mov	r6,r2
 280361c:	2808fc40 	call	2808fc4 <__nedf2>
 2803620:	103ce126 	beq	r2,zero,28029a8 <_dtoa_r+0x230>
 2803624:	d9800d17 	ldw	r6,52(sp)
 2803628:	31bfffc4 	addi	r6,r6,-1
 280362c:	d9800d15 	stw	r6,52(sp)
 2803630:	003cdd06 	br	28029a8 <_dtoa_r+0x230>
 2803634:	d9000717 	ldw	r4,28(sp)
 2803638:	900b883a 	mov	r5,r18
 280363c:	2805a9c0 	call	2805a9c <__mcmp>
 2803640:	103e8d0e 	bge	r2,zero,2803078 <_dtoa_r+0x900>
 2803644:	d9400717 	ldw	r5,28(sp)
 2803648:	d9001617 	ldw	r4,88(sp)
 280364c:	01800284 	movi	r6,10
 2803650:	000f883a 	mov	r7,zero
 2803654:	28066600 	call	2806660 <__multadd>
 2803658:	d9800d17 	ldw	r6,52(sp)
 280365c:	d8800715 	stw	r2,28(sp)
 2803660:	31bfffc4 	addi	r6,r6,-1
 2803664:	d9800d15 	stw	r6,52(sp)
 2803668:	b001a71e 	bne	r22,zero,2803d08 <_dtoa_r+0x1590>
 280366c:	d8800e17 	ldw	r2,56(sp)
 2803670:	d8800f15 	stw	r2,60(sp)
 2803674:	003e8006 	br	2803078 <_dtoa_r+0x900>
 2803678:	90800417 	ldw	r2,16(r18)
 280367c:	1085883a 	add	r2,r2,r2
 2803680:	1085883a 	add	r2,r2,r2
 2803684:	1485883a 	add	r2,r2,r18
 2803688:	11000417 	ldw	r4,16(r2)
 280368c:	28059680 	call	2805968 <__hi0bits>
 2803690:	00c00804 	movi	r3,32
 2803694:	1887c83a 	sub	r3,r3,r2
 2803698:	003e5a06 	br	2803004 <_dtoa_r+0x88c>
 280369c:	d9400717 	ldw	r5,28(sp)
 28036a0:	d9801017 	ldw	r6,64(sp)
 28036a4:	d9001617 	ldw	r4,88(sp)
 28036a8:	280678c0 	call	280678c <__pow5mult>
 28036ac:	d8800715 	stw	r2,28(sp)
 28036b0:	003e4306 	br	2802fc0 <_dtoa_r+0x848>
 28036b4:	d9800f17 	ldw	r6,60(sp)
 28036b8:	d8800d17 	ldw	r2,52(sp)
 28036bc:	d9800315 	stw	r6,12(sp)
 28036c0:	d8800415 	stw	r2,16(sp)
 28036c4:	d8c00b17 	ldw	r3,44(sp)
 28036c8:	1805003a 	cmpeq	r2,r3,zero
 28036cc:	1000e21e 	bne	r2,zero,2803a58 <_dtoa_r+0x12e0>
 28036d0:	d9000317 	ldw	r4,12(sp)
 28036d4:	0005883a 	mov	r2,zero
 28036d8:	00cff834 	movhi	r3,16352
 28036dc:	200c90fa 	slli	r6,r4,3
 28036e0:	0100a074 	movhi	r4,641
 28036e4:	2135e004 	addi	r4,r4,-10368
 28036e8:	180b883a 	mov	r5,r3
 28036ec:	310d883a 	add	r6,r6,r4
 28036f0:	327fff17 	ldw	r9,-4(r6)
 28036f4:	323ffe17 	ldw	r8,-8(r6)
 28036f8:	1009883a 	mov	r4,r2
 28036fc:	480f883a 	mov	r7,r9
 2803700:	400d883a 	mov	r6,r8
 2803704:	2808ce40 	call	2808ce4 <__divdf3>
 2803708:	180b883a 	mov	r5,r3
 280370c:	b00d883a 	mov	r6,r22
 2803710:	b80f883a 	mov	r7,r23
 2803714:	1009883a 	mov	r4,r2
 2803718:	280882c0 	call	280882c <__subdf3>
 280371c:	a80b883a 	mov	r5,r21
 2803720:	a009883a 	mov	r4,r20
 2803724:	d8c01915 	stw	r3,100(sp)
 2803728:	d8801815 	stw	r2,96(sp)
 280372c:	28092dc0 	call	28092dc <__fixdfsi>
 2803730:	1009883a 	mov	r4,r2
 2803734:	1027883a 	mov	r19,r2
 2803738:	28091e40 	call	28091e4 <__floatsidf>
 280373c:	a80b883a 	mov	r5,r21
 2803740:	a009883a 	mov	r4,r20
 2803744:	180f883a 	mov	r7,r3
 2803748:	100d883a 	mov	r6,r2
 280374c:	280882c0 	call	280882c <__subdf3>
 2803750:	d9801817 	ldw	r6,96(sp)
 2803754:	1823883a 	mov	r17,r3
 2803758:	d8801415 	stw	r2,80(sp)
 280375c:	302d883a 	mov	r22,r6
 2803760:	d9800517 	ldw	r6,20(sp)
 2803764:	9cc00c04 	addi	r19,r19,48
 2803768:	dc401515 	stw	r17,84(sp)
 280376c:	d8c01917 	ldw	r3,100(sp)
 2803770:	34c00005 	stb	r19,0(r6)
 2803774:	d8800517 	ldw	r2,20(sp)
 2803778:	d9401917 	ldw	r5,100(sp)
 280377c:	d9801417 	ldw	r6,80(sp)
 2803780:	b009883a 	mov	r4,r22
 2803784:	880f883a 	mov	r7,r17
 2803788:	182f883a 	mov	r23,r3
 280378c:	17000044 	addi	fp,r2,1
 2803790:	280904c0 	call	280904c <__gtdf2>
 2803794:	00804e16 	blt	zero,r2,28038d0 <_dtoa_r+0x1158>
 2803798:	d9801417 	ldw	r6,80(sp)
 280379c:	0005883a 	mov	r2,zero
 28037a0:	00cffc34 	movhi	r3,16368
 28037a4:	180b883a 	mov	r5,r3
 28037a8:	880f883a 	mov	r7,r17
 28037ac:	1009883a 	mov	r4,r2
 28037b0:	280882c0 	call	280882c <__subdf3>
 28037b4:	d9401917 	ldw	r5,100(sp)
 28037b8:	180f883a 	mov	r7,r3
 28037bc:	b009883a 	mov	r4,r22
 28037c0:	100d883a 	mov	r6,r2
 28037c4:	280904c0 	call	280904c <__gtdf2>
 28037c8:	00bda216 	blt	zero,r2,2802e54 <_dtoa_r+0x6dc>
 28037cc:	d8c00317 	ldw	r3,12(sp)
 28037d0:	00800044 	movi	r2,1
 28037d4:	10c01216 	blt	r2,r3,2803820 <_dtoa_r+0x10a8>
 28037d8:	003d4506 	br	2802cf0 <_dtoa_r+0x578>
 28037dc:	d9801417 	ldw	r6,80(sp)
 28037e0:	0005883a 	mov	r2,zero
 28037e4:	00cffc34 	movhi	r3,16368
 28037e8:	180b883a 	mov	r5,r3
 28037ec:	880f883a 	mov	r7,r17
 28037f0:	1009883a 	mov	r4,r2
 28037f4:	280882c0 	call	280882c <__subdf3>
 28037f8:	d9c01b17 	ldw	r7,108(sp)
 28037fc:	180b883a 	mov	r5,r3
 2803800:	1009883a 	mov	r4,r2
 2803804:	b00d883a 	mov	r6,r22
 2803808:	280915c0 	call	280915c <__ltdf2>
 280380c:	103d9116 	blt	r2,zero,2802e54 <_dtoa_r+0x6dc>
 2803810:	d9800517 	ldw	r6,20(sp)
 2803814:	d9000317 	ldw	r4,12(sp)
 2803818:	3105883a 	add	r2,r6,r4
 280381c:	e0bd3426 	beq	fp,r2,2802cf0 <_dtoa_r+0x578>
 2803820:	04500934 	movhi	r17,16420
 2803824:	0021883a 	mov	r16,zero
 2803828:	b80b883a 	mov	r5,r23
 280382c:	b009883a 	mov	r4,r22
 2803830:	800d883a 	mov	r6,r16
 2803834:	880f883a 	mov	r7,r17
 2803838:	28089200 	call	2808920 <__muldf3>
 280383c:	d9401517 	ldw	r5,84(sp)
 2803840:	d9001417 	ldw	r4,80(sp)
 2803844:	880f883a 	mov	r7,r17
 2803848:	000d883a 	mov	r6,zero
 280384c:	d8801a15 	stw	r2,104(sp)
 2803850:	d8c01b15 	stw	r3,108(sp)
 2803854:	28089200 	call	2808920 <__muldf3>
 2803858:	180b883a 	mov	r5,r3
 280385c:	1009883a 	mov	r4,r2
 2803860:	1823883a 	mov	r17,r3
 2803864:	1021883a 	mov	r16,r2
 2803868:	28092dc0 	call	28092dc <__fixdfsi>
 280386c:	1009883a 	mov	r4,r2
 2803870:	102b883a 	mov	r21,r2
 2803874:	28091e40 	call	28091e4 <__floatsidf>
 2803878:	880b883a 	mov	r5,r17
 280387c:	8009883a 	mov	r4,r16
 2803880:	180f883a 	mov	r7,r3
 2803884:	100d883a 	mov	r6,r2
 2803888:	280882c0 	call	280882c <__subdf3>
 280388c:	1021883a 	mov	r16,r2
 2803890:	d9001b17 	ldw	r4,108(sp)
 2803894:	1823883a 	mov	r17,r3
 2803898:	dc001415 	stw	r16,80(sp)
 280389c:	ad400c04 	addi	r21,r21,48
 28038a0:	dc401515 	stw	r17,84(sp)
 28038a4:	d8801a17 	ldw	r2,104(sp)
 28038a8:	e5400005 	stb	r21,0(fp)
 28038ac:	202f883a 	mov	r23,r4
 28038b0:	d9c01b17 	ldw	r7,108(sp)
 28038b4:	d9001417 	ldw	r4,80(sp)
 28038b8:	880b883a 	mov	r5,r17
 28038bc:	100d883a 	mov	r6,r2
 28038c0:	102d883a 	mov	r22,r2
 28038c4:	e7000044 	addi	fp,fp,1
 28038c8:	280915c0 	call	280915c <__ltdf2>
 28038cc:	103fc30e 	bge	r2,zero,28037dc <_dtoa_r+0x1064>
 28038d0:	d9000417 	ldw	r4,16(sp)
 28038d4:	d9000d15 	stw	r4,52(sp)
 28038d8:	003d7106 	br	2802ea0 <_dtoa_r+0x728>
 28038dc:	d9801717 	ldw	r6,92(sp)
 28038e0:	00800084 	movi	r2,2
 28038e4:	11bde60e 	bge	r2,r6,2803080 <_dtoa_r+0x908>
 28038e8:	203cfb1e 	bne	r4,zero,2802cd8 <_dtoa_r+0x560>
 28038ec:	d9001617 	ldw	r4,88(sp)
 28038f0:	900b883a 	mov	r5,r18
 28038f4:	01800144 	movi	r6,5
 28038f8:	000f883a 	mov	r7,zero
 28038fc:	28066600 	call	2806660 <__multadd>
 2803900:	d9000717 	ldw	r4,28(sp)
 2803904:	100b883a 	mov	r5,r2
 2803908:	1025883a 	mov	r18,r2
 280390c:	2805a9c0 	call	2805a9c <__mcmp>
 2803910:	00bcf10e 	bge	zero,r2,2802cd8 <_dtoa_r+0x560>
 2803914:	d8c00d17 	ldw	r3,52(sp)
 2803918:	d9000517 	ldw	r4,20(sp)
 280391c:	d8000615 	stw	zero,24(sp)
 2803920:	18c00044 	addi	r3,r3,1
 2803924:	d8c00d15 	stw	r3,52(sp)
 2803928:	00800c44 	movi	r2,49
 280392c:	27000044 	addi	fp,r4,1
 2803930:	20800005 	stb	r2,0(r4)
 2803934:	003e8906 	br	280335c <_dtoa_r+0xbe4>
 2803938:	d8c00517 	ldw	r3,20(sp)
 280393c:	003bc206 	br	2802848 <_dtoa_r+0xd0>
 2803940:	0180a074 	movhi	r6,641
 2803944:	31b61204 	addi	r6,r6,-10168
 2803948:	30c00917 	ldw	r3,36(r6)
 280394c:	30800817 	ldw	r2,32(r6)
 2803950:	d9001217 	ldw	r4,72(sp)
 2803954:	d9401317 	ldw	r5,76(sp)
 2803958:	180f883a 	mov	r7,r3
 280395c:	100d883a 	mov	r6,r2
 2803960:	2808ce40 	call	2808ce4 <__divdf3>
 2803964:	948003cc 	andi	r18,r18,15
 2803968:	058000c4 	movi	r22,3
 280396c:	1029883a 	mov	r20,r2
 2803970:	182b883a 	mov	r21,r3
 2803974:	003c8906 	br	2802b9c <_dtoa_r+0x424>
 2803978:	d9001017 	ldw	r4,64(sp)
 280397c:	d9800917 	ldw	r6,36(sp)
 2803980:	0025883a 	mov	r18,zero
 2803984:	1105c83a 	sub	r2,r2,r4
 2803988:	2089883a 	add	r4,r4,r2
 280398c:	308d883a 	add	r6,r6,r2
 2803990:	d9001015 	stw	r4,64(sp)
 2803994:	d9800915 	stw	r6,36(sp)
 2803998:	003e3206 	br	2803264 <_dtoa_r+0xaec>
 280399c:	28800044 	addi	r2,r5,1
 28039a0:	27000044 	addi	fp,r4,1
 28039a4:	20800005 	stb	r2,0(r4)
 28039a8:	003e6c06 	br	280335c <_dtoa_r+0xbe4>
 28039ac:	d8800f17 	ldw	r2,60(sp)
 28039b0:	00bce016 	blt	zero,r2,2802d34 <_dtoa_r+0x5bc>
 28039b4:	d9800f17 	ldw	r6,60(sp)
 28039b8:	303cc51e 	bne	r6,zero,2802cd0 <_dtoa_r+0x558>
 28039bc:	0005883a 	mov	r2,zero
 28039c0:	00d00534 	movhi	r3,16404
 28039c4:	980b883a 	mov	r5,r19
 28039c8:	180f883a 	mov	r7,r3
 28039cc:	9009883a 	mov	r4,r18
 28039d0:	100d883a 	mov	r6,r2
 28039d4:	28089200 	call	2808920 <__muldf3>
 28039d8:	180b883a 	mov	r5,r3
 28039dc:	a80f883a 	mov	r7,r21
 28039e0:	1009883a 	mov	r4,r2
 28039e4:	a00d883a 	mov	r6,r20
 28039e8:	28090d40 	call	28090d4 <__gedf2>
 28039ec:	103cb80e 	bge	r2,zero,2802cd0 <_dtoa_r+0x558>
 28039f0:	0027883a 	mov	r19,zero
 28039f4:	0025883a 	mov	r18,zero
 28039f8:	003fc606 	br	2803914 <_dtoa_r+0x119c>
 28039fc:	99400117 	ldw	r5,4(r19)
 2803a00:	d9001617 	ldw	r4,88(sp)
 2803a04:	2805ec00 	call	2805ec0 <_Balloc>
 2803a08:	99800417 	ldw	r6,16(r19)
 2803a0c:	11000304 	addi	r4,r2,12
 2803a10:	99400304 	addi	r5,r19,12
 2803a14:	318d883a 	add	r6,r6,r6
 2803a18:	318d883a 	add	r6,r6,r6
 2803a1c:	31800204 	addi	r6,r6,8
 2803a20:	1023883a 	mov	r17,r2
 2803a24:	28057280 	call	2805728 <memcpy>
 2803a28:	d9001617 	ldw	r4,88(sp)
 2803a2c:	880b883a 	mov	r5,r17
 2803a30:	01800044 	movi	r6,1
 2803a34:	28062840 	call	2806284 <__lshift>
 2803a38:	100b883a 	mov	r5,r2
 2803a3c:	003d9c06 	br	28030b0 <_dtoa_r+0x938>
 2803a40:	00800e44 	movi	r2,57
 2803a44:	b8807026 	beq	r23,r2,2803c08 <_dtoa_r+0x1490>
 2803a48:	b8800044 	addi	r2,r23,1
 2803a4c:	b7000044 	addi	fp,r22,1
 2803a50:	b0800005 	stb	r2,0(r22)
 2803a54:	003e4106 	br	280335c <_dtoa_r+0xbe4>
 2803a58:	d8800317 	ldw	r2,12(sp)
 2803a5c:	0180a074 	movhi	r6,641
 2803a60:	31b5e004 	addi	r6,r6,-10368
 2803a64:	b009883a 	mov	r4,r22
 2803a68:	100e90fa 	slli	r7,r2,3
 2803a6c:	b80b883a 	mov	r5,r23
 2803a70:	398f883a 	add	r7,r7,r6
 2803a74:	38bffe17 	ldw	r2,-8(r7)
 2803a78:	d9800517 	ldw	r6,20(sp)
 2803a7c:	38ffff17 	ldw	r3,-4(r7)
 2803a80:	37000044 	addi	fp,r6,1
 2803a84:	180f883a 	mov	r7,r3
 2803a88:	100d883a 	mov	r6,r2
 2803a8c:	28089200 	call	2808920 <__muldf3>
 2803a90:	a80b883a 	mov	r5,r21
 2803a94:	a009883a 	mov	r4,r20
 2803a98:	182f883a 	mov	r23,r3
 2803a9c:	102d883a 	mov	r22,r2
 2803aa0:	28092dc0 	call	28092dc <__fixdfsi>
 2803aa4:	1009883a 	mov	r4,r2
 2803aa8:	1027883a 	mov	r19,r2
 2803aac:	28091e40 	call	28091e4 <__floatsidf>
 2803ab0:	a80b883a 	mov	r5,r21
 2803ab4:	a009883a 	mov	r4,r20
 2803ab8:	180f883a 	mov	r7,r3
 2803abc:	100d883a 	mov	r6,r2
 2803ac0:	280882c0 	call	280882c <__subdf3>
 2803ac4:	180b883a 	mov	r5,r3
 2803ac8:	d8c00517 	ldw	r3,20(sp)
 2803acc:	9cc00c04 	addi	r19,r19,48
 2803ad0:	1009883a 	mov	r4,r2
 2803ad4:	1cc00005 	stb	r19,0(r3)
 2803ad8:	2021883a 	mov	r16,r4
 2803adc:	d9000317 	ldw	r4,12(sp)
 2803ae0:	00800044 	movi	r2,1
 2803ae4:	2823883a 	mov	r17,r5
 2803ae8:	20802226 	beq	r4,r2,2803b74 <_dtoa_r+0x13fc>
 2803aec:	1029883a 	mov	r20,r2
 2803af0:	0005883a 	mov	r2,zero
 2803af4:	00d00934 	movhi	r3,16420
 2803af8:	180f883a 	mov	r7,r3
 2803afc:	100d883a 	mov	r6,r2
 2803b00:	880b883a 	mov	r5,r17
 2803b04:	8009883a 	mov	r4,r16
 2803b08:	28089200 	call	2808920 <__muldf3>
 2803b0c:	180b883a 	mov	r5,r3
 2803b10:	1009883a 	mov	r4,r2
 2803b14:	1823883a 	mov	r17,r3
 2803b18:	1021883a 	mov	r16,r2
 2803b1c:	28092dc0 	call	28092dc <__fixdfsi>
 2803b20:	1009883a 	mov	r4,r2
 2803b24:	102b883a 	mov	r21,r2
 2803b28:	28091e40 	call	28091e4 <__floatsidf>
 2803b2c:	880b883a 	mov	r5,r17
 2803b30:	8009883a 	mov	r4,r16
 2803b34:	180f883a 	mov	r7,r3
 2803b38:	100d883a 	mov	r6,r2
 2803b3c:	280882c0 	call	280882c <__subdf3>
 2803b40:	180b883a 	mov	r5,r3
 2803b44:	d8c00517 	ldw	r3,20(sp)
 2803b48:	1009883a 	mov	r4,r2
 2803b4c:	ad400c04 	addi	r21,r21,48
 2803b50:	1d05883a 	add	r2,r3,r20
 2803b54:	15400005 	stb	r21,0(r2)
 2803b58:	2021883a 	mov	r16,r4
 2803b5c:	d9000317 	ldw	r4,12(sp)
 2803b60:	a5000044 	addi	r20,r20,1
 2803b64:	2823883a 	mov	r17,r5
 2803b68:	a13fe11e 	bne	r20,r4,2803af0 <_dtoa_r+0x1378>
 2803b6c:	e505883a 	add	r2,fp,r20
 2803b70:	173fffc4 	addi	fp,r2,-1
 2803b74:	0025883a 	mov	r18,zero
 2803b78:	04cff834 	movhi	r19,16352
 2803b7c:	b009883a 	mov	r4,r22
 2803b80:	b80b883a 	mov	r5,r23
 2803b84:	900d883a 	mov	r6,r18
 2803b88:	980f883a 	mov	r7,r19
 2803b8c:	28088ac0 	call	28088ac <__adddf3>
 2803b90:	180b883a 	mov	r5,r3
 2803b94:	1009883a 	mov	r4,r2
 2803b98:	800d883a 	mov	r6,r16
 2803b9c:	880f883a 	mov	r7,r17
 2803ba0:	280915c0 	call	280915c <__ltdf2>
 2803ba4:	103cab16 	blt	r2,zero,2802e54 <_dtoa_r+0x6dc>
 2803ba8:	0009883a 	mov	r4,zero
 2803bac:	980b883a 	mov	r5,r19
 2803bb0:	b80f883a 	mov	r7,r23
 2803bb4:	b00d883a 	mov	r6,r22
 2803bb8:	280882c0 	call	280882c <__subdf3>
 2803bbc:	180b883a 	mov	r5,r3
 2803bc0:	880f883a 	mov	r7,r17
 2803bc4:	1009883a 	mov	r4,r2
 2803bc8:	800d883a 	mov	r6,r16
 2803bcc:	280904c0 	call	280904c <__gtdf2>
 2803bd0:	00bc470e 	bge	zero,r2,2802cf0 <_dtoa_r+0x578>
 2803bd4:	00c00c04 	movi	r3,48
 2803bd8:	e73fffc4 	addi	fp,fp,-1
 2803bdc:	e0800007 	ldb	r2,0(fp)
 2803be0:	10fffd26 	beq	r2,r3,2803bd8 <_dtoa_r+0x1460>
 2803be4:	d9800417 	ldw	r6,16(sp)
 2803be8:	e7000044 	addi	fp,fp,1
 2803bec:	d9800d15 	stw	r6,52(sp)
 2803bf0:	003cab06 	br	2802ea0 <_dtoa_r+0x728>
 2803bf4:	d8c00f17 	ldw	r3,60(sp)
 2803bf8:	d9001117 	ldw	r4,68(sp)
 2803bfc:	20e1c83a 	sub	r16,r4,r3
 2803c00:	0007883a 	mov	r3,zero
 2803c04:	003d9b06 	br	2803274 <_dtoa_r+0xafc>
 2803c08:	00800e44 	movi	r2,57
 2803c0c:	b0800005 	stb	r2,0(r22)
 2803c10:	b5800044 	addi	r22,r22,1
 2803c14:	003dc106 	br	280331c <_dtoa_r+0xba4>
 2803c18:	05800084 	movi	r22,2
 2803c1c:	003bf706 	br	2802bfc <_dtoa_r+0x484>
 2803c20:	d9000f17 	ldw	r4,60(sp)
 2803c24:	013c000e 	bge	zero,r4,2802c28 <_dtoa_r+0x4b0>
 2803c28:	d9800e17 	ldw	r6,56(sp)
 2803c2c:	01bc300e 	bge	zero,r6,2802cf0 <_dtoa_r+0x578>
 2803c30:	0005883a 	mov	r2,zero
 2803c34:	00d00934 	movhi	r3,16420
 2803c38:	a80b883a 	mov	r5,r21
 2803c3c:	180f883a 	mov	r7,r3
 2803c40:	a009883a 	mov	r4,r20
 2803c44:	100d883a 	mov	r6,r2
 2803c48:	28089200 	call	2808920 <__muldf3>
 2803c4c:	b1000044 	addi	r4,r22,1
 2803c50:	1021883a 	mov	r16,r2
 2803c54:	1823883a 	mov	r17,r3
 2803c58:	28091e40 	call	28091e4 <__floatsidf>
 2803c5c:	880b883a 	mov	r5,r17
 2803c60:	8009883a 	mov	r4,r16
 2803c64:	180f883a 	mov	r7,r3
 2803c68:	100d883a 	mov	r6,r2
 2803c6c:	28089200 	call	2808920 <__muldf3>
 2803c70:	0011883a 	mov	r8,zero
 2803c74:	02500734 	movhi	r9,16412
 2803c78:	180b883a 	mov	r5,r3
 2803c7c:	480f883a 	mov	r7,r9
 2803c80:	1009883a 	mov	r4,r2
 2803c84:	400d883a 	mov	r6,r8
 2803c88:	28088ac0 	call	28088ac <__adddf3>
 2803c8c:	102d883a 	mov	r22,r2
 2803c90:	00bf3034 	movhi	r2,64704
 2803c94:	10ef883a 	add	r23,r2,r3
 2803c98:	d8800d17 	ldw	r2,52(sp)
 2803c9c:	d8c00e17 	ldw	r3,56(sp)
 2803ca0:	8029883a 	mov	r20,r16
 2803ca4:	10bfffc4 	addi	r2,r2,-1
 2803ca8:	882b883a 	mov	r21,r17
 2803cac:	d8800415 	stw	r2,16(sp)
 2803cb0:	d8c00315 	stw	r3,12(sp)
 2803cb4:	003e8306 	br	28036c4 <_dtoa_r+0xf4c>
 2803cb8:	d8800117 	ldw	r2,4(sp)
 2803cbc:	dc001117 	ldw	r16,68(sp)
 2803cc0:	dc801017 	ldw	r18,64(sp)
 2803cc4:	00c00d84 	movi	r3,54
 2803cc8:	1887c83a 	sub	r3,r3,r2
 2803ccc:	003d6906 	br	2803274 <_dtoa_r+0xafc>
 2803cd0:	01800044 	movi	r6,1
 2803cd4:	3021883a 	mov	r16,r6
 2803cd8:	d9800f15 	stw	r6,60(sp)
 2803cdc:	d9802615 	stw	r6,152(sp)
 2803ce0:	d9800e15 	stw	r6,56(sp)
 2803ce4:	003b9306 	br	2802b34 <_dtoa_r+0x3bc>
 2803ce8:	b021883a 	mov	r16,r22
 2803cec:	dd800f15 	stw	r22,60(sp)
 2803cf0:	003b9006 	br	2802b34 <_dtoa_r+0x3bc>
 2803cf4:	103e221e 	bne	r2,zero,2803580 <_dtoa_r+0xe08>
 2803cf8:	b880004c 	andi	r2,r23,1
 2803cfc:	1005003a 	cmpeq	r2,r2,zero
 2803d00:	103e1f1e 	bne	r2,zero,2803580 <_dtoa_r+0xe08>
 2803d04:	003e1b06 	br	2803574 <_dtoa_r+0xdfc>
 2803d08:	d9001617 	ldw	r4,88(sp)
 2803d0c:	980b883a 	mov	r5,r19
 2803d10:	01800284 	movi	r6,10
 2803d14:	000f883a 	mov	r7,zero
 2803d18:	28066600 	call	2806660 <__multadd>
 2803d1c:	d8c00e17 	ldw	r3,56(sp)
 2803d20:	1027883a 	mov	r19,r2
 2803d24:	d8c00f15 	stw	r3,60(sp)
 2803d28:	003cd306 	br	2803078 <_dtoa_r+0x900>

02803d2c <_fflush_r>:
 2803d2c:	defffb04 	addi	sp,sp,-20
 2803d30:	dcc00315 	stw	r19,12(sp)
 2803d34:	dc800215 	stw	r18,8(sp)
 2803d38:	dfc00415 	stw	ra,16(sp)
 2803d3c:	dc400115 	stw	r17,4(sp)
 2803d40:	dc000015 	stw	r16,0(sp)
 2803d44:	2027883a 	mov	r19,r4
 2803d48:	2825883a 	mov	r18,r5
 2803d4c:	20000226 	beq	r4,zero,2803d58 <_fflush_r+0x2c>
 2803d50:	20800e17 	ldw	r2,56(r4)
 2803d54:	10005626 	beq	r2,zero,2803eb0 <_fflush_r+0x184>
 2803d58:	9100030b 	ldhu	r4,12(r18)
 2803d5c:	20ffffcc 	andi	r3,r4,65535
 2803d60:	18e0001c 	xori	r3,r3,32768
 2803d64:	18e00004 	addi	r3,r3,-32768
 2803d68:	1880020c 	andi	r2,r3,8
 2803d6c:	1000261e 	bne	r2,zero,2803e08 <_fflush_r+0xdc>
 2803d70:	90c00117 	ldw	r3,4(r18)
 2803d74:	20820014 	ori	r2,r4,2048
 2803d78:	9080030d 	sth	r2,12(r18)
 2803d7c:	1009883a 	mov	r4,r2
 2803d80:	00c0400e 	bge	zero,r3,2803e84 <_fflush_r+0x158>
 2803d84:	92000a17 	ldw	r8,40(r18)
 2803d88:	40004026 	beq	r8,zero,2803e8c <_fflush_r+0x160>
 2803d8c:	2084000c 	andi	r2,r4,4096
 2803d90:	10005326 	beq	r2,zero,2803ee0 <_fflush_r+0x1b4>
 2803d94:	94001417 	ldw	r16,80(r18)
 2803d98:	9080030b 	ldhu	r2,12(r18)
 2803d9c:	1080010c 	andi	r2,r2,4
 2803da0:	1000481e 	bne	r2,zero,2803ec4 <_fflush_r+0x198>
 2803da4:	91400717 	ldw	r5,28(r18)
 2803da8:	9809883a 	mov	r4,r19
 2803dac:	800d883a 	mov	r6,r16
 2803db0:	000f883a 	mov	r7,zero
 2803db4:	403ee83a 	callr	r8
 2803db8:	8080261e 	bne	r16,r2,2803e54 <_fflush_r+0x128>
 2803dbc:	9080030b 	ldhu	r2,12(r18)
 2803dc0:	91000417 	ldw	r4,16(r18)
 2803dc4:	90000115 	stw	zero,4(r18)
 2803dc8:	10bdffcc 	andi	r2,r2,63487
 2803dcc:	10ffffcc 	andi	r3,r2,65535
 2803dd0:	18c4000c 	andi	r3,r3,4096
 2803dd4:	9080030d 	sth	r2,12(r18)
 2803dd8:	91000015 	stw	r4,0(r18)
 2803ddc:	18002b26 	beq	r3,zero,2803e8c <_fflush_r+0x160>
 2803de0:	0007883a 	mov	r3,zero
 2803de4:	1805883a 	mov	r2,r3
 2803de8:	94001415 	stw	r16,80(r18)
 2803dec:	dfc00417 	ldw	ra,16(sp)
 2803df0:	dcc00317 	ldw	r19,12(sp)
 2803df4:	dc800217 	ldw	r18,8(sp)
 2803df8:	dc400117 	ldw	r17,4(sp)
 2803dfc:	dc000017 	ldw	r16,0(sp)
 2803e00:	dec00504 	addi	sp,sp,20
 2803e04:	f800283a 	ret
 2803e08:	94400417 	ldw	r17,16(r18)
 2803e0c:	88001f26 	beq	r17,zero,2803e8c <_fflush_r+0x160>
 2803e10:	90800017 	ldw	r2,0(r18)
 2803e14:	18c000cc 	andi	r3,r3,3
 2803e18:	94400015 	stw	r17,0(r18)
 2803e1c:	1461c83a 	sub	r16,r2,r17
 2803e20:	18002526 	beq	r3,zero,2803eb8 <_fflush_r+0x18c>
 2803e24:	0005883a 	mov	r2,zero
 2803e28:	90800215 	stw	r2,8(r18)
 2803e2c:	0400170e 	bge	zero,r16,2803e8c <_fflush_r+0x160>
 2803e30:	90c00917 	ldw	r3,36(r18)
 2803e34:	91400717 	ldw	r5,28(r18)
 2803e38:	880d883a 	mov	r6,r17
 2803e3c:	800f883a 	mov	r7,r16
 2803e40:	9809883a 	mov	r4,r19
 2803e44:	183ee83a 	callr	r3
 2803e48:	88a3883a 	add	r17,r17,r2
 2803e4c:	80a1c83a 	sub	r16,r16,r2
 2803e50:	00bff616 	blt	zero,r2,2803e2c <_fflush_r+0x100>
 2803e54:	9080030b 	ldhu	r2,12(r18)
 2803e58:	00ffffc4 	movi	r3,-1
 2803e5c:	10801014 	ori	r2,r2,64
 2803e60:	9080030d 	sth	r2,12(r18)
 2803e64:	1805883a 	mov	r2,r3
 2803e68:	dfc00417 	ldw	ra,16(sp)
 2803e6c:	dcc00317 	ldw	r19,12(sp)
 2803e70:	dc800217 	ldw	r18,8(sp)
 2803e74:	dc400117 	ldw	r17,4(sp)
 2803e78:	dc000017 	ldw	r16,0(sp)
 2803e7c:	dec00504 	addi	sp,sp,20
 2803e80:	f800283a 	ret
 2803e84:	90800f17 	ldw	r2,60(r18)
 2803e88:	00bfbe16 	blt	zero,r2,2803d84 <_fflush_r+0x58>
 2803e8c:	0007883a 	mov	r3,zero
 2803e90:	1805883a 	mov	r2,r3
 2803e94:	dfc00417 	ldw	ra,16(sp)
 2803e98:	dcc00317 	ldw	r19,12(sp)
 2803e9c:	dc800217 	ldw	r18,8(sp)
 2803ea0:	dc400117 	ldw	r17,4(sp)
 2803ea4:	dc000017 	ldw	r16,0(sp)
 2803ea8:	dec00504 	addi	sp,sp,20
 2803eac:	f800283a 	ret
 2803eb0:	2803fc40 	call	2803fc4 <__sinit>
 2803eb4:	003fa806 	br	2803d58 <_fflush_r+0x2c>
 2803eb8:	90800517 	ldw	r2,20(r18)
 2803ebc:	90800215 	stw	r2,8(r18)
 2803ec0:	003fda06 	br	2803e2c <_fflush_r+0x100>
 2803ec4:	90800117 	ldw	r2,4(r18)
 2803ec8:	90c00c17 	ldw	r3,48(r18)
 2803ecc:	80a1c83a 	sub	r16,r16,r2
 2803ed0:	183fb426 	beq	r3,zero,2803da4 <_fflush_r+0x78>
 2803ed4:	90800f17 	ldw	r2,60(r18)
 2803ed8:	80a1c83a 	sub	r16,r16,r2
 2803edc:	003fb106 	br	2803da4 <_fflush_r+0x78>
 2803ee0:	91400717 	ldw	r5,28(r18)
 2803ee4:	9809883a 	mov	r4,r19
 2803ee8:	000d883a 	mov	r6,zero
 2803eec:	01c00044 	movi	r7,1
 2803ef0:	403ee83a 	callr	r8
 2803ef4:	1021883a 	mov	r16,r2
 2803ef8:	00bfffc4 	movi	r2,-1
 2803efc:	80800226 	beq	r16,r2,2803f08 <_fflush_r+0x1dc>
 2803f00:	92000a17 	ldw	r8,40(r18)
 2803f04:	003fa406 	br	2803d98 <_fflush_r+0x6c>
 2803f08:	98c00017 	ldw	r3,0(r19)
 2803f0c:	00800744 	movi	r2,29
 2803f10:	18bfde26 	beq	r3,r2,2803e8c <_fflush_r+0x160>
 2803f14:	9080030b 	ldhu	r2,12(r18)
 2803f18:	8007883a 	mov	r3,r16
 2803f1c:	10801014 	ori	r2,r2,64
 2803f20:	9080030d 	sth	r2,12(r18)
 2803f24:	003fcf06 	br	2803e64 <_fflush_r+0x138>

02803f28 <fflush>:
 2803f28:	0140a034 	movhi	r5,640
 2803f2c:	294f4b04 	addi	r5,r5,15660
 2803f30:	2007883a 	mov	r3,r4
 2803f34:	20000526 	beq	r4,zero,2803f4c <fflush+0x24>
 2803f38:	0080a074 	movhi	r2,641
 2803f3c:	10bd3a04 	addi	r2,r2,-2840
 2803f40:	11000017 	ldw	r4,0(r2)
 2803f44:	180b883a 	mov	r5,r3
 2803f48:	2803d2c1 	jmpi	2803d2c <_fflush_r>
 2803f4c:	0080a074 	movhi	r2,641
 2803f50:	10bd3b04 	addi	r2,r2,-2836
 2803f54:	11000017 	ldw	r4,0(r2)
 2803f58:	2804b2c1 	jmpi	2804b2c <_fwalk_reent>

02803f5c <std>:
 2803f5c:	0080a034 	movhi	r2,640
 2803f60:	109c2804 	addi	r2,r2,28832
 2803f64:	20800b15 	stw	r2,44(r4)
 2803f68:	0080a034 	movhi	r2,640
 2803f6c:	109c6304 	addi	r2,r2,29068
 2803f70:	20800815 	stw	r2,32(r4)
 2803f74:	00c0a034 	movhi	r3,640
 2803f78:	18dc4404 	addi	r3,r3,28944
 2803f7c:	0080a034 	movhi	r2,640
 2803f80:	109c2a04 	addi	r2,r2,28840
 2803f84:	2140030d 	sth	r5,12(r4)
 2803f88:	2180038d 	sth	r6,14(r4)
 2803f8c:	20c00915 	stw	r3,36(r4)
 2803f90:	20800a15 	stw	r2,40(r4)
 2803f94:	20000015 	stw	zero,0(r4)
 2803f98:	20000115 	stw	zero,4(r4)
 2803f9c:	20000215 	stw	zero,8(r4)
 2803fa0:	20000415 	stw	zero,16(r4)
 2803fa4:	20000515 	stw	zero,20(r4)
 2803fa8:	20000615 	stw	zero,24(r4)
 2803fac:	21000715 	stw	r4,28(r4)
 2803fb0:	f800283a 	ret

02803fb4 <__sfp_lock_acquire>:
 2803fb4:	f800283a 	ret

02803fb8 <__sfp_lock_release>:
 2803fb8:	f800283a 	ret

02803fbc <__sinit_lock_acquire>:
 2803fbc:	f800283a 	ret

02803fc0 <__sinit_lock_release>:
 2803fc0:	f800283a 	ret

02803fc4 <__sinit>:
 2803fc4:	20800e17 	ldw	r2,56(r4)
 2803fc8:	defffd04 	addi	sp,sp,-12
 2803fcc:	dc400115 	stw	r17,4(sp)
 2803fd0:	dc000015 	stw	r16,0(sp)
 2803fd4:	dfc00215 	stw	ra,8(sp)
 2803fd8:	04400044 	movi	r17,1
 2803fdc:	01400104 	movi	r5,4
 2803fe0:	000d883a 	mov	r6,zero
 2803fe4:	2021883a 	mov	r16,r4
 2803fe8:	2200bb04 	addi	r8,r4,748
 2803fec:	200f883a 	mov	r7,r4
 2803ff0:	10000526 	beq	r2,zero,2804008 <__sinit+0x44>
 2803ff4:	dfc00217 	ldw	ra,8(sp)
 2803ff8:	dc400117 	ldw	r17,4(sp)
 2803ffc:	dc000017 	ldw	r16,0(sp)
 2804000:	dec00304 	addi	sp,sp,12
 2804004:	f800283a 	ret
 2804008:	21000117 	ldw	r4,4(r4)
 280400c:	0080a034 	movhi	r2,640
 2804010:	10902a04 	addi	r2,r2,16552
 2804014:	00c000c4 	movi	r3,3
 2804018:	80800f15 	stw	r2,60(r16)
 280401c:	80c0b915 	stw	r3,740(r16)
 2804020:	8200ba15 	stw	r8,744(r16)
 2804024:	84400e15 	stw	r17,56(r16)
 2804028:	8000b815 	stw	zero,736(r16)
 280402c:	2803f5c0 	call	2803f5c <std>
 2804030:	81000217 	ldw	r4,8(r16)
 2804034:	880d883a 	mov	r6,r17
 2804038:	800f883a 	mov	r7,r16
 280403c:	01400284 	movi	r5,10
 2804040:	2803f5c0 	call	2803f5c <std>
 2804044:	81000317 	ldw	r4,12(r16)
 2804048:	800f883a 	mov	r7,r16
 280404c:	01400484 	movi	r5,18
 2804050:	01800084 	movi	r6,2
 2804054:	dfc00217 	ldw	ra,8(sp)
 2804058:	dc400117 	ldw	r17,4(sp)
 280405c:	dc000017 	ldw	r16,0(sp)
 2804060:	dec00304 	addi	sp,sp,12
 2804064:	2803f5c1 	jmpi	2803f5c <std>

02804068 <__fp_lock>:
 2804068:	0005883a 	mov	r2,zero
 280406c:	f800283a 	ret

02804070 <__fp_unlock>:
 2804070:	0005883a 	mov	r2,zero
 2804074:	f800283a 	ret

02804078 <__fp_unlock_all>:
 2804078:	0080a074 	movhi	r2,641
 280407c:	10bd3a04 	addi	r2,r2,-2840
 2804080:	11000017 	ldw	r4,0(r2)
 2804084:	0140a034 	movhi	r5,640
 2804088:	29501c04 	addi	r5,r5,16496
 280408c:	2804bf41 	jmpi	2804bf4 <_fwalk>

02804090 <__fp_lock_all>:
 2804090:	0080a074 	movhi	r2,641
 2804094:	10bd3a04 	addi	r2,r2,-2840
 2804098:	11000017 	ldw	r4,0(r2)
 280409c:	0140a034 	movhi	r5,640
 28040a0:	29501a04 	addi	r5,r5,16488
 28040a4:	2804bf41 	jmpi	2804bf4 <_fwalk>

028040a8 <_cleanup_r>:
 28040a8:	0140a034 	movhi	r5,640
 28040ac:	295d5a04 	addi	r5,r5,30056
 28040b0:	2804bf41 	jmpi	2804bf4 <_fwalk>

028040b4 <_cleanup>:
 28040b4:	0080a074 	movhi	r2,641
 28040b8:	10bd3b04 	addi	r2,r2,-2836
 28040bc:	11000017 	ldw	r4,0(r2)
 28040c0:	28040a81 	jmpi	28040a8 <_cleanup_r>

028040c4 <__sfmoreglue>:
 28040c4:	defffc04 	addi	sp,sp,-16
 28040c8:	dc000015 	stw	r16,0(sp)
 28040cc:	2821883a 	mov	r16,r5
 28040d0:	dc400115 	stw	r17,4(sp)
 28040d4:	01401704 	movi	r5,92
 28040d8:	2023883a 	mov	r17,r4
 28040dc:	8009883a 	mov	r4,r16
 28040e0:	dfc00315 	stw	ra,12(sp)
 28040e4:	dcc00215 	stw	r19,8(sp)
 28040e8:	28096940 	call	2809694 <__mulsi3>
 28040ec:	11400304 	addi	r5,r2,12
 28040f0:	8809883a 	mov	r4,r17
 28040f4:	1027883a 	mov	r19,r2
 28040f8:	2804f040 	call	2804f04 <_malloc_r>
 28040fc:	10c00304 	addi	r3,r2,12
 2804100:	1023883a 	mov	r17,r2
 2804104:	1809883a 	mov	r4,r3
 2804108:	980d883a 	mov	r6,r19
 280410c:	000b883a 	mov	r5,zero
 2804110:	10000b26 	beq	r2,zero,2804140 <__sfmoreglue+0x7c>
 2804114:	14000115 	stw	r16,4(r2)
 2804118:	10c00215 	stw	r3,8(r2)
 280411c:	10000015 	stw	zero,0(r2)
 2804120:	28058a80 	call	28058a8 <memset>
 2804124:	8805883a 	mov	r2,r17
 2804128:	dfc00317 	ldw	ra,12(sp)
 280412c:	dcc00217 	ldw	r19,8(sp)
 2804130:	dc400117 	ldw	r17,4(sp)
 2804134:	dc000017 	ldw	r16,0(sp)
 2804138:	dec00404 	addi	sp,sp,16
 280413c:	f800283a 	ret
 2804140:	0023883a 	mov	r17,zero
 2804144:	8805883a 	mov	r2,r17
 2804148:	dfc00317 	ldw	ra,12(sp)
 280414c:	dcc00217 	ldw	r19,8(sp)
 2804150:	dc400117 	ldw	r17,4(sp)
 2804154:	dc000017 	ldw	r16,0(sp)
 2804158:	dec00404 	addi	sp,sp,16
 280415c:	f800283a 	ret

02804160 <__sfp>:
 2804160:	defffd04 	addi	sp,sp,-12
 2804164:	0080a074 	movhi	r2,641
 2804168:	10bd3b04 	addi	r2,r2,-2836
 280416c:	dc000015 	stw	r16,0(sp)
 2804170:	14000017 	ldw	r16,0(r2)
 2804174:	dc400115 	stw	r17,4(sp)
 2804178:	dfc00215 	stw	ra,8(sp)
 280417c:	80800e17 	ldw	r2,56(r16)
 2804180:	2023883a 	mov	r17,r4
 2804184:	10002626 	beq	r2,zero,2804220 <__sfp+0xc0>
 2804188:	8400b804 	addi	r16,r16,736
 280418c:	80800117 	ldw	r2,4(r16)
 2804190:	81000217 	ldw	r4,8(r16)
 2804194:	10ffffc4 	addi	r3,r2,-1
 2804198:	18000916 	blt	r3,zero,28041c0 <__sfp+0x60>
 280419c:	2080030f 	ldh	r2,12(r4)
 28041a0:	10000b26 	beq	r2,zero,28041d0 <__sfp+0x70>
 28041a4:	017fffc4 	movi	r5,-1
 28041a8:	00000206 	br	28041b4 <__sfp+0x54>
 28041ac:	2080030f 	ldh	r2,12(r4)
 28041b0:	10000726 	beq	r2,zero,28041d0 <__sfp+0x70>
 28041b4:	18ffffc4 	addi	r3,r3,-1
 28041b8:	21001704 	addi	r4,r4,92
 28041bc:	197ffb1e 	bne	r3,r5,28041ac <__sfp+0x4c>
 28041c0:	80800017 	ldw	r2,0(r16)
 28041c4:	10001926 	beq	r2,zero,280422c <__sfp+0xcc>
 28041c8:	1021883a 	mov	r16,r2
 28041cc:	003fef06 	br	280418c <__sfp+0x2c>
 28041d0:	00bfffc4 	movi	r2,-1
 28041d4:	00c00044 	movi	r3,1
 28041d8:	2080038d 	sth	r2,14(r4)
 28041dc:	20c0030d 	sth	r3,12(r4)
 28041e0:	20000015 	stw	zero,0(r4)
 28041e4:	20000215 	stw	zero,8(r4)
 28041e8:	20000115 	stw	zero,4(r4)
 28041ec:	20000415 	stw	zero,16(r4)
 28041f0:	20000515 	stw	zero,20(r4)
 28041f4:	20000615 	stw	zero,24(r4)
 28041f8:	20000c15 	stw	zero,48(r4)
 28041fc:	20000d15 	stw	zero,52(r4)
 2804200:	20001115 	stw	zero,68(r4)
 2804204:	20001215 	stw	zero,72(r4)
 2804208:	2005883a 	mov	r2,r4
 280420c:	dfc00217 	ldw	ra,8(sp)
 2804210:	dc400117 	ldw	r17,4(sp)
 2804214:	dc000017 	ldw	r16,0(sp)
 2804218:	dec00304 	addi	sp,sp,12
 280421c:	f800283a 	ret
 2804220:	8009883a 	mov	r4,r16
 2804224:	2803fc40 	call	2803fc4 <__sinit>
 2804228:	003fd706 	br	2804188 <__sfp+0x28>
 280422c:	8809883a 	mov	r4,r17
 2804230:	01400104 	movi	r5,4
 2804234:	28040c40 	call	28040c4 <__sfmoreglue>
 2804238:	80800015 	stw	r2,0(r16)
 280423c:	103fe21e 	bne	r2,zero,28041c8 <__sfp+0x68>
 2804240:	00800304 	movi	r2,12
 2804244:	0009883a 	mov	r4,zero
 2804248:	88800015 	stw	r2,0(r17)
 280424c:	003fee06 	br	2804208 <__sfp+0xa8>

02804250 <_malloc_trim_r>:
 2804250:	defffb04 	addi	sp,sp,-20
 2804254:	dcc00315 	stw	r19,12(sp)
 2804258:	04c0a074 	movhi	r19,641
 280425c:	9cf77f04 	addi	r19,r19,-8708
 2804260:	dc800215 	stw	r18,8(sp)
 2804264:	dc400115 	stw	r17,4(sp)
 2804268:	dc000015 	stw	r16,0(sp)
 280426c:	2823883a 	mov	r17,r5
 2804270:	2025883a 	mov	r18,r4
 2804274:	dfc00415 	stw	ra,16(sp)
 2804278:	280a4180 	call	280a418 <__malloc_lock>
 280427c:	98800217 	ldw	r2,8(r19)
 2804280:	9009883a 	mov	r4,r18
 2804284:	000b883a 	mov	r5,zero
 2804288:	10c00117 	ldw	r3,4(r2)
 280428c:	00bfff04 	movi	r2,-4
 2804290:	18a0703a 	and	r16,r3,r2
 2804294:	8463c83a 	sub	r17,r16,r17
 2804298:	8c43fbc4 	addi	r17,r17,4079
 280429c:	8822d33a 	srli	r17,r17,12
 28042a0:	0083ffc4 	movi	r2,4095
 28042a4:	8c7fffc4 	addi	r17,r17,-1
 28042a8:	8822933a 	slli	r17,r17,12
 28042ac:	1440060e 	bge	r2,r17,28042c8 <_malloc_trim_r+0x78>
 28042b0:	28070300 	call	2807030 <_sbrk_r>
 28042b4:	98c00217 	ldw	r3,8(r19)
 28042b8:	9009883a 	mov	r4,r18
 28042bc:	044bc83a 	sub	r5,zero,r17
 28042c0:	80c7883a 	add	r3,r16,r3
 28042c4:	10c00926 	beq	r2,r3,28042ec <_malloc_trim_r+0x9c>
 28042c8:	280a4380 	call	280a438 <__malloc_unlock>
 28042cc:	0005883a 	mov	r2,zero
 28042d0:	dfc00417 	ldw	ra,16(sp)
 28042d4:	dcc00317 	ldw	r19,12(sp)
 28042d8:	dc800217 	ldw	r18,8(sp)
 28042dc:	dc400117 	ldw	r17,4(sp)
 28042e0:	dc000017 	ldw	r16,0(sp)
 28042e4:	dec00504 	addi	sp,sp,20
 28042e8:	f800283a 	ret
 28042ec:	9009883a 	mov	r4,r18
 28042f0:	28070300 	call	2807030 <_sbrk_r>
 28042f4:	844dc83a 	sub	r6,r16,r17
 28042f8:	00ffffc4 	movi	r3,-1
 28042fc:	9009883a 	mov	r4,r18
 2804300:	000b883a 	mov	r5,zero
 2804304:	01c0a074 	movhi	r7,641
 2804308:	39c42f04 	addi	r7,r7,4284
 280430c:	31800054 	ori	r6,r6,1
 2804310:	10c00926 	beq	r2,r3,2804338 <_malloc_trim_r+0xe8>
 2804314:	38800017 	ldw	r2,0(r7)
 2804318:	98c00217 	ldw	r3,8(r19)
 280431c:	9009883a 	mov	r4,r18
 2804320:	1445c83a 	sub	r2,r2,r17
 2804324:	38800015 	stw	r2,0(r7)
 2804328:	19800115 	stw	r6,4(r3)
 280432c:	280a4380 	call	280a438 <__malloc_unlock>
 2804330:	00800044 	movi	r2,1
 2804334:	003fe606 	br	28042d0 <_malloc_trim_r+0x80>
 2804338:	28070300 	call	2807030 <_sbrk_r>
 280433c:	99800217 	ldw	r6,8(r19)
 2804340:	100f883a 	mov	r7,r2
 2804344:	9009883a 	mov	r4,r18
 2804348:	1187c83a 	sub	r3,r2,r6
 280434c:	008003c4 	movi	r2,15
 2804350:	19400054 	ori	r5,r3,1
 2804354:	10ffdc0e 	bge	r2,r3,28042c8 <_malloc_trim_r+0x78>
 2804358:	0080a074 	movhi	r2,641
 280435c:	10bd3f04 	addi	r2,r2,-2820
 2804360:	10c00017 	ldw	r3,0(r2)
 2804364:	0080a074 	movhi	r2,641
 2804368:	10842f04 	addi	r2,r2,4284
 280436c:	31400115 	stw	r5,4(r6)
 2804370:	38c7c83a 	sub	r3,r7,r3
 2804374:	10c00015 	stw	r3,0(r2)
 2804378:	003fd306 	br	28042c8 <_malloc_trim_r+0x78>

0280437c <_free_r>:
 280437c:	defffd04 	addi	sp,sp,-12
 2804380:	dc400115 	stw	r17,4(sp)
 2804384:	dc000015 	stw	r16,0(sp)
 2804388:	dfc00215 	stw	ra,8(sp)
 280438c:	2821883a 	mov	r16,r5
 2804390:	2023883a 	mov	r17,r4
 2804394:	28005a26 	beq	r5,zero,2804500 <_free_r+0x184>
 2804398:	280a4180 	call	280a418 <__malloc_lock>
 280439c:	823ffe04 	addi	r8,r16,-8
 28043a0:	41400117 	ldw	r5,4(r8)
 28043a4:	00bfff84 	movi	r2,-2
 28043a8:	0280a074 	movhi	r10,641
 28043ac:	52b77f04 	addi	r10,r10,-8708
 28043b0:	288e703a 	and	r7,r5,r2
 28043b4:	41cd883a 	add	r6,r8,r7
 28043b8:	30c00117 	ldw	r3,4(r6)
 28043bc:	51000217 	ldw	r4,8(r10)
 28043c0:	00bfff04 	movi	r2,-4
 28043c4:	1892703a 	and	r9,r3,r2
 28043c8:	5017883a 	mov	r11,r10
 28043cc:	31006726 	beq	r6,r4,280456c <_free_r+0x1f0>
 28043d0:	2880004c 	andi	r2,r5,1
 28043d4:	1005003a 	cmpeq	r2,r2,zero
 28043d8:	32400115 	stw	r9,4(r6)
 28043dc:	10001a1e 	bne	r2,zero,2804448 <_free_r+0xcc>
 28043e0:	000b883a 	mov	r5,zero
 28043e4:	3247883a 	add	r3,r6,r9
 28043e8:	18800117 	ldw	r2,4(r3)
 28043ec:	1080004c 	andi	r2,r2,1
 28043f0:	1000231e 	bne	r2,zero,2804480 <_free_r+0x104>
 28043f4:	280ac03a 	cmpne	r5,r5,zero
 28043f8:	3a4f883a 	add	r7,r7,r9
 28043fc:	2800451e 	bne	r5,zero,2804514 <_free_r+0x198>
 2804400:	31000217 	ldw	r4,8(r6)
 2804404:	0080a074 	movhi	r2,641
 2804408:	10b78104 	addi	r2,r2,-8700
 280440c:	20807b26 	beq	r4,r2,28045fc <_free_r+0x280>
 2804410:	30800317 	ldw	r2,12(r6)
 2804414:	3a07883a 	add	r3,r7,r8
 2804418:	19c00015 	stw	r7,0(r3)
 280441c:	11000215 	stw	r4,8(r2)
 2804420:	20800315 	stw	r2,12(r4)
 2804424:	38800054 	ori	r2,r7,1
 2804428:	40800115 	stw	r2,4(r8)
 280442c:	28001a26 	beq	r5,zero,2804498 <_free_r+0x11c>
 2804430:	8809883a 	mov	r4,r17
 2804434:	dfc00217 	ldw	ra,8(sp)
 2804438:	dc400117 	ldw	r17,4(sp)
 280443c:	dc000017 	ldw	r16,0(sp)
 2804440:	dec00304 	addi	sp,sp,12
 2804444:	280a4381 	jmpi	280a438 <__malloc_unlock>
 2804448:	80bffe17 	ldw	r2,-8(r16)
 280444c:	50c00204 	addi	r3,r10,8
 2804450:	4091c83a 	sub	r8,r8,r2
 2804454:	41000217 	ldw	r4,8(r8)
 2804458:	388f883a 	add	r7,r7,r2
 280445c:	20c06126 	beq	r4,r3,28045e4 <_free_r+0x268>
 2804460:	40800317 	ldw	r2,12(r8)
 2804464:	3247883a 	add	r3,r6,r9
 2804468:	000b883a 	mov	r5,zero
 280446c:	11000215 	stw	r4,8(r2)
 2804470:	20800315 	stw	r2,12(r4)
 2804474:	18800117 	ldw	r2,4(r3)
 2804478:	1080004c 	andi	r2,r2,1
 280447c:	103fdd26 	beq	r2,zero,28043f4 <_free_r+0x78>
 2804480:	38800054 	ori	r2,r7,1
 2804484:	3a07883a 	add	r3,r7,r8
 2804488:	280ac03a 	cmpne	r5,r5,zero
 280448c:	40800115 	stw	r2,4(r8)
 2804490:	19c00015 	stw	r7,0(r3)
 2804494:	283fe61e 	bne	r5,zero,2804430 <_free_r+0xb4>
 2804498:	00807fc4 	movi	r2,511
 280449c:	11c01f2e 	bgeu	r2,r7,280451c <_free_r+0x1a0>
 28044a0:	3806d27a 	srli	r3,r7,9
 28044a4:	1800481e 	bne	r3,zero,28045c8 <_free_r+0x24c>
 28044a8:	3804d0fa 	srli	r2,r7,3
 28044ac:	100690fa 	slli	r3,r2,3
 28044b0:	1acd883a 	add	r6,r3,r11
 28044b4:	31400217 	ldw	r5,8(r6)
 28044b8:	31405926 	beq	r6,r5,2804620 <_free_r+0x2a4>
 28044bc:	28800117 	ldw	r2,4(r5)
 28044c0:	00ffff04 	movi	r3,-4
 28044c4:	10c4703a 	and	r2,r2,r3
 28044c8:	3880022e 	bgeu	r7,r2,28044d4 <_free_r+0x158>
 28044cc:	29400217 	ldw	r5,8(r5)
 28044d0:	317ffa1e 	bne	r6,r5,28044bc <_free_r+0x140>
 28044d4:	29800317 	ldw	r6,12(r5)
 28044d8:	41800315 	stw	r6,12(r8)
 28044dc:	41400215 	stw	r5,8(r8)
 28044e0:	8809883a 	mov	r4,r17
 28044e4:	2a000315 	stw	r8,12(r5)
 28044e8:	32000215 	stw	r8,8(r6)
 28044ec:	dfc00217 	ldw	ra,8(sp)
 28044f0:	dc400117 	ldw	r17,4(sp)
 28044f4:	dc000017 	ldw	r16,0(sp)
 28044f8:	dec00304 	addi	sp,sp,12
 28044fc:	280a4381 	jmpi	280a438 <__malloc_unlock>
 2804500:	dfc00217 	ldw	ra,8(sp)
 2804504:	dc400117 	ldw	r17,4(sp)
 2804508:	dc000017 	ldw	r16,0(sp)
 280450c:	dec00304 	addi	sp,sp,12
 2804510:	f800283a 	ret
 2804514:	31000217 	ldw	r4,8(r6)
 2804518:	003fbd06 	br	2804410 <_free_r+0x94>
 280451c:	3806d0fa 	srli	r3,r7,3
 2804520:	00800044 	movi	r2,1
 2804524:	51400117 	ldw	r5,4(r10)
 2804528:	180890fa 	slli	r4,r3,3
 280452c:	1807d0ba 	srai	r3,r3,2
 2804530:	22c9883a 	add	r4,r4,r11
 2804534:	21800217 	ldw	r6,8(r4)
 2804538:	10c4983a 	sll	r2,r2,r3
 280453c:	41000315 	stw	r4,12(r8)
 2804540:	41800215 	stw	r6,8(r8)
 2804544:	288ab03a 	or	r5,r5,r2
 2804548:	22000215 	stw	r8,8(r4)
 280454c:	8809883a 	mov	r4,r17
 2804550:	51400115 	stw	r5,4(r10)
 2804554:	32000315 	stw	r8,12(r6)
 2804558:	dfc00217 	ldw	ra,8(sp)
 280455c:	dc400117 	ldw	r17,4(sp)
 2804560:	dc000017 	ldw	r16,0(sp)
 2804564:	dec00304 	addi	sp,sp,12
 2804568:	280a4381 	jmpi	280a438 <__malloc_unlock>
 280456c:	2880004c 	andi	r2,r5,1
 2804570:	3a4d883a 	add	r6,r7,r9
 2804574:	1000071e 	bne	r2,zero,2804594 <_free_r+0x218>
 2804578:	80bffe17 	ldw	r2,-8(r16)
 280457c:	4091c83a 	sub	r8,r8,r2
 2804580:	41000317 	ldw	r4,12(r8)
 2804584:	40c00217 	ldw	r3,8(r8)
 2804588:	308d883a 	add	r6,r6,r2
 280458c:	20c00215 	stw	r3,8(r4)
 2804590:	19000315 	stw	r4,12(r3)
 2804594:	0080a074 	movhi	r2,641
 2804598:	10bd3e04 	addi	r2,r2,-2824
 280459c:	11000017 	ldw	r4,0(r2)
 28045a0:	30c00054 	ori	r3,r6,1
 28045a4:	52000215 	stw	r8,8(r10)
 28045a8:	40c00115 	stw	r3,4(r8)
 28045ac:	313fa036 	bltu	r6,r4,2804430 <_free_r+0xb4>
 28045b0:	0080a074 	movhi	r2,641
 28045b4:	10842304 	addi	r2,r2,4236
 28045b8:	11400017 	ldw	r5,0(r2)
 28045bc:	8809883a 	mov	r4,r17
 28045c0:	28042500 	call	2804250 <_malloc_trim_r>
 28045c4:	003f9a06 	br	2804430 <_free_r+0xb4>
 28045c8:	00800104 	movi	r2,4
 28045cc:	10c0072e 	bgeu	r2,r3,28045ec <_free_r+0x270>
 28045d0:	00800504 	movi	r2,20
 28045d4:	10c01936 	bltu	r2,r3,280463c <_free_r+0x2c0>
 28045d8:	188016c4 	addi	r2,r3,91
 28045dc:	100690fa 	slli	r3,r2,3
 28045e0:	003fb306 	br	28044b0 <_free_r+0x134>
 28045e4:	01400044 	movi	r5,1
 28045e8:	003f7e06 	br	28043e4 <_free_r+0x68>
 28045ec:	3804d1ba 	srli	r2,r7,6
 28045f0:	10800e04 	addi	r2,r2,56
 28045f4:	100690fa 	slli	r3,r2,3
 28045f8:	003fad06 	br	28044b0 <_free_r+0x134>
 28045fc:	22000315 	stw	r8,12(r4)
 2804600:	22000215 	stw	r8,8(r4)
 2804604:	3a05883a 	add	r2,r7,r8
 2804608:	38c00054 	ori	r3,r7,1
 280460c:	11c00015 	stw	r7,0(r2)
 2804610:	41000215 	stw	r4,8(r8)
 2804614:	40c00115 	stw	r3,4(r8)
 2804618:	41000315 	stw	r4,12(r8)
 280461c:	003f8406 	br	2804430 <_free_r+0xb4>
 2804620:	1005d0ba 	srai	r2,r2,2
 2804624:	00c00044 	movi	r3,1
 2804628:	51000117 	ldw	r4,4(r10)
 280462c:	1886983a 	sll	r3,r3,r2
 2804630:	20c8b03a 	or	r4,r4,r3
 2804634:	51000115 	stw	r4,4(r10)
 2804638:	003fa706 	br	28044d8 <_free_r+0x15c>
 280463c:	00801504 	movi	r2,84
 2804640:	10c00436 	bltu	r2,r3,2804654 <_free_r+0x2d8>
 2804644:	3804d33a 	srli	r2,r7,12
 2804648:	10801b84 	addi	r2,r2,110
 280464c:	100690fa 	slli	r3,r2,3
 2804650:	003f9706 	br	28044b0 <_free_r+0x134>
 2804654:	00805504 	movi	r2,340
 2804658:	10c00436 	bltu	r2,r3,280466c <_free_r+0x2f0>
 280465c:	3804d3fa 	srli	r2,r7,15
 2804660:	10801dc4 	addi	r2,r2,119
 2804664:	100690fa 	slli	r3,r2,3
 2804668:	003f9106 	br	28044b0 <_free_r+0x134>
 280466c:	00815504 	movi	r2,1364
 2804670:	10c0032e 	bgeu	r2,r3,2804680 <_free_r+0x304>
 2804674:	00801f84 	movi	r2,126
 2804678:	00c0fc04 	movi	r3,1008
 280467c:	003f8c06 	br	28044b0 <_free_r+0x134>
 2804680:	3804d4ba 	srli	r2,r7,18
 2804684:	10801f04 	addi	r2,r2,124
 2804688:	100690fa 	slli	r3,r2,3
 280468c:	003f8806 	br	28044b0 <_free_r+0x134>

02804690 <__sfvwrite_r>:
 2804690:	30800217 	ldw	r2,8(r6)
 2804694:	defff504 	addi	sp,sp,-44
 2804698:	df000915 	stw	fp,36(sp)
 280469c:	dd800715 	stw	r22,28(sp)
 28046a0:	dc800315 	stw	r18,12(sp)
 28046a4:	dfc00a15 	stw	ra,40(sp)
 28046a8:	ddc00815 	stw	r23,32(sp)
 28046ac:	dd400615 	stw	r21,24(sp)
 28046b0:	dd000515 	stw	r20,20(sp)
 28046b4:	dcc00415 	stw	r19,16(sp)
 28046b8:	dc400215 	stw	r17,8(sp)
 28046bc:	dc000115 	stw	r16,4(sp)
 28046c0:	302d883a 	mov	r22,r6
 28046c4:	2039883a 	mov	fp,r4
 28046c8:	2825883a 	mov	r18,r5
 28046cc:	10001c26 	beq	r2,zero,2804740 <__sfvwrite_r+0xb0>
 28046d0:	29c0030b 	ldhu	r7,12(r5)
 28046d4:	3880020c 	andi	r2,r7,8
 28046d8:	10002726 	beq	r2,zero,2804778 <__sfvwrite_r+0xe8>
 28046dc:	28800417 	ldw	r2,16(r5)
 28046e0:	10002526 	beq	r2,zero,2804778 <__sfvwrite_r+0xe8>
 28046e4:	3880008c 	andi	r2,r7,2
 28046e8:	b5400017 	ldw	r21,0(r22)
 28046ec:	10002826 	beq	r2,zero,2804790 <__sfvwrite_r+0x100>
 28046f0:	0021883a 	mov	r16,zero
 28046f4:	0023883a 	mov	r17,zero
 28046f8:	880d883a 	mov	r6,r17
 28046fc:	e009883a 	mov	r4,fp
 2804700:	00810004 	movi	r2,1024
 2804704:	80006e26 	beq	r16,zero,28048c0 <__sfvwrite_r+0x230>
 2804708:	800f883a 	mov	r7,r16
 280470c:	91400717 	ldw	r5,28(r18)
 2804710:	1400012e 	bgeu	r2,r16,2804718 <__sfvwrite_r+0x88>
 2804714:	100f883a 	mov	r7,r2
 2804718:	90c00917 	ldw	r3,36(r18)
 280471c:	183ee83a 	callr	r3
 2804720:	1007883a 	mov	r3,r2
 2804724:	80a1c83a 	sub	r16,r16,r2
 2804728:	88a3883a 	add	r17,r17,r2
 280472c:	00806d0e 	bge	zero,r2,28048e4 <__sfvwrite_r+0x254>
 2804730:	b0800217 	ldw	r2,8(r22)
 2804734:	10c5c83a 	sub	r2,r2,r3
 2804738:	b0800215 	stw	r2,8(r22)
 280473c:	103fee1e 	bne	r2,zero,28046f8 <__sfvwrite_r+0x68>
 2804740:	0009883a 	mov	r4,zero
 2804744:	2005883a 	mov	r2,r4
 2804748:	dfc00a17 	ldw	ra,40(sp)
 280474c:	df000917 	ldw	fp,36(sp)
 2804750:	ddc00817 	ldw	r23,32(sp)
 2804754:	dd800717 	ldw	r22,28(sp)
 2804758:	dd400617 	ldw	r21,24(sp)
 280475c:	dd000517 	ldw	r20,20(sp)
 2804760:	dcc00417 	ldw	r19,16(sp)
 2804764:	dc800317 	ldw	r18,12(sp)
 2804768:	dc400217 	ldw	r17,8(sp)
 280476c:	dc000117 	ldw	r16,4(sp)
 2804770:	dec00b04 	addi	sp,sp,44
 2804774:	f800283a 	ret
 2804778:	28023f80 	call	28023f8 <__swsetup_r>
 280477c:	1000e41e 	bne	r2,zero,2804b10 <__sfvwrite_r+0x480>
 2804780:	91c0030b 	ldhu	r7,12(r18)
 2804784:	b5400017 	ldw	r21,0(r22)
 2804788:	3880008c 	andi	r2,r7,2
 280478c:	103fd81e 	bne	r2,zero,28046f0 <__sfvwrite_r+0x60>
 2804790:	3880004c 	andi	r2,r7,1
 2804794:	1005003a 	cmpeq	r2,r2,zero
 2804798:	10005726 	beq	r2,zero,28048f8 <__sfvwrite_r+0x268>
 280479c:	0029883a 	mov	r20,zero
 28047a0:	002f883a 	mov	r23,zero
 28047a4:	a0004226 	beq	r20,zero,28048b0 <__sfvwrite_r+0x220>
 28047a8:	3880800c 	andi	r2,r7,512
 28047ac:	94000217 	ldw	r16,8(r18)
 28047b0:	10008b26 	beq	r2,zero,28049e0 <__sfvwrite_r+0x350>
 28047b4:	800d883a 	mov	r6,r16
 28047b8:	a400a536 	bltu	r20,r16,2804a50 <__sfvwrite_r+0x3c0>
 28047bc:	3881200c 	andi	r2,r7,1152
 28047c0:	10002726 	beq	r2,zero,2804860 <__sfvwrite_r+0x1d0>
 28047c4:	90800517 	ldw	r2,20(r18)
 28047c8:	92000417 	ldw	r8,16(r18)
 28047cc:	91400017 	ldw	r5,0(r18)
 28047d0:	1087883a 	add	r3,r2,r2
 28047d4:	1887883a 	add	r3,r3,r2
 28047d8:	1808d7fa 	srli	r4,r3,31
 28047dc:	2a21c83a 	sub	r16,r5,r8
 28047e0:	80800044 	addi	r2,r16,1
 28047e4:	20c9883a 	add	r4,r4,r3
 28047e8:	2027d07a 	srai	r19,r4,1
 28047ec:	a085883a 	add	r2,r20,r2
 28047f0:	980d883a 	mov	r6,r19
 28047f4:	9880022e 	bgeu	r19,r2,2804800 <__sfvwrite_r+0x170>
 28047f8:	1027883a 	mov	r19,r2
 28047fc:	100d883a 	mov	r6,r2
 2804800:	3881000c 	andi	r2,r7,1024
 2804804:	1000b826 	beq	r2,zero,2804ae8 <__sfvwrite_r+0x458>
 2804808:	300b883a 	mov	r5,r6
 280480c:	e009883a 	mov	r4,fp
 2804810:	2804f040 	call	2804f04 <_malloc_r>
 2804814:	10003126 	beq	r2,zero,28048dc <__sfvwrite_r+0x24c>
 2804818:	91400417 	ldw	r5,16(r18)
 280481c:	1009883a 	mov	r4,r2
 2804820:	800d883a 	mov	r6,r16
 2804824:	1023883a 	mov	r17,r2
 2804828:	28057280 	call	2805728 <memcpy>
 280482c:	90c0030b 	ldhu	r3,12(r18)
 2804830:	00beffc4 	movi	r2,-1025
 2804834:	1886703a 	and	r3,r3,r2
 2804838:	18c02014 	ori	r3,r3,128
 280483c:	90c0030d 	sth	r3,12(r18)
 2804840:	9c07c83a 	sub	r3,r19,r16
 2804844:	8c05883a 	add	r2,r17,r16
 2804848:	a00d883a 	mov	r6,r20
 280484c:	a021883a 	mov	r16,r20
 2804850:	90800015 	stw	r2,0(r18)
 2804854:	90c00215 	stw	r3,8(r18)
 2804858:	94400415 	stw	r17,16(r18)
 280485c:	94c00515 	stw	r19,20(r18)
 2804860:	91000017 	ldw	r4,0(r18)
 2804864:	b80b883a 	mov	r5,r23
 2804868:	a023883a 	mov	r17,r20
 280486c:	28057c80 	call	28057c8 <memmove>
 2804870:	90c00217 	ldw	r3,8(r18)
 2804874:	90800017 	ldw	r2,0(r18)
 2804878:	a027883a 	mov	r19,r20
 280487c:	1c07c83a 	sub	r3,r3,r16
 2804880:	1405883a 	add	r2,r2,r16
 2804884:	90c00215 	stw	r3,8(r18)
 2804888:	a021883a 	mov	r16,r20
 280488c:	90800015 	stw	r2,0(r18)
 2804890:	b0800217 	ldw	r2,8(r22)
 2804894:	1405c83a 	sub	r2,r2,r16
 2804898:	b0800215 	stw	r2,8(r22)
 280489c:	103fa826 	beq	r2,zero,2804740 <__sfvwrite_r+0xb0>
 28048a0:	a469c83a 	sub	r20,r20,r17
 28048a4:	91c0030b 	ldhu	r7,12(r18)
 28048a8:	bcef883a 	add	r23,r23,r19
 28048ac:	a03fbe1e 	bne	r20,zero,28047a8 <__sfvwrite_r+0x118>
 28048b0:	adc00017 	ldw	r23,0(r21)
 28048b4:	ad000117 	ldw	r20,4(r21)
 28048b8:	ad400204 	addi	r21,r21,8
 28048bc:	003fb906 	br	28047a4 <__sfvwrite_r+0x114>
 28048c0:	ac400017 	ldw	r17,0(r21)
 28048c4:	ac000117 	ldw	r16,4(r21)
 28048c8:	ad400204 	addi	r21,r21,8
 28048cc:	003f8a06 	br	28046f8 <__sfvwrite_r+0x68>
 28048d0:	91400417 	ldw	r5,16(r18)
 28048d4:	e009883a 	mov	r4,fp
 28048d8:	280437c0 	call	280437c <_free_r>
 28048dc:	00800304 	movi	r2,12
 28048e0:	e0800015 	stw	r2,0(fp)
 28048e4:	9080030b 	ldhu	r2,12(r18)
 28048e8:	013fffc4 	movi	r4,-1
 28048ec:	10801014 	ori	r2,r2,64
 28048f0:	9080030d 	sth	r2,12(r18)
 28048f4:	003f9306 	br	2804744 <__sfvwrite_r+0xb4>
 28048f8:	0027883a 	mov	r19,zero
 28048fc:	002f883a 	mov	r23,zero
 2804900:	d8000015 	stw	zero,0(sp)
 2804904:	0029883a 	mov	r20,zero
 2804908:	98001e26 	beq	r19,zero,2804984 <__sfvwrite_r+0x2f4>
 280490c:	d8c00017 	ldw	r3,0(sp)
 2804910:	1804c03a 	cmpne	r2,r3,zero
 2804914:	10005e26 	beq	r2,zero,2804a90 <__sfvwrite_r+0x400>
 2804918:	9821883a 	mov	r16,r19
 280491c:	a4c0012e 	bgeu	r20,r19,2804924 <__sfvwrite_r+0x294>
 2804920:	a021883a 	mov	r16,r20
 2804924:	91000017 	ldw	r4,0(r18)
 2804928:	90800417 	ldw	r2,16(r18)
 280492c:	91800217 	ldw	r6,8(r18)
 2804930:	91c00517 	ldw	r7,20(r18)
 2804934:	1100022e 	bgeu	r2,r4,2804940 <__sfvwrite_r+0x2b0>
 2804938:	31e3883a 	add	r17,r6,r7
 280493c:	8c001616 	blt	r17,r16,2804998 <__sfvwrite_r+0x308>
 2804940:	81c03816 	blt	r16,r7,2804a24 <__sfvwrite_r+0x394>
 2804944:	90c00917 	ldw	r3,36(r18)
 2804948:	91400717 	ldw	r5,28(r18)
 280494c:	e009883a 	mov	r4,fp
 2804950:	b80d883a 	mov	r6,r23
 2804954:	183ee83a 	callr	r3
 2804958:	1023883a 	mov	r17,r2
 280495c:	00bfe10e 	bge	zero,r2,28048e4 <__sfvwrite_r+0x254>
 2804960:	a469c83a 	sub	r20,r20,r17
 2804964:	a0001826 	beq	r20,zero,28049c8 <__sfvwrite_r+0x338>
 2804968:	b0800217 	ldw	r2,8(r22)
 280496c:	1445c83a 	sub	r2,r2,r17
 2804970:	b0800215 	stw	r2,8(r22)
 2804974:	103f7226 	beq	r2,zero,2804740 <__sfvwrite_r+0xb0>
 2804978:	9c67c83a 	sub	r19,r19,r17
 280497c:	bc6f883a 	add	r23,r23,r17
 2804980:	983fe21e 	bne	r19,zero,280490c <__sfvwrite_r+0x27c>
 2804984:	adc00017 	ldw	r23,0(r21)
 2804988:	acc00117 	ldw	r19,4(r21)
 280498c:	ad400204 	addi	r21,r21,8
 2804990:	d8000015 	stw	zero,0(sp)
 2804994:	003fdc06 	br	2804908 <__sfvwrite_r+0x278>
 2804998:	b80b883a 	mov	r5,r23
 280499c:	880d883a 	mov	r6,r17
 28049a0:	28057c80 	call	28057c8 <memmove>
 28049a4:	90c00017 	ldw	r3,0(r18)
 28049a8:	e009883a 	mov	r4,fp
 28049ac:	900b883a 	mov	r5,r18
 28049b0:	1c47883a 	add	r3,r3,r17
 28049b4:	90c00015 	stw	r3,0(r18)
 28049b8:	2803d2c0 	call	2803d2c <_fflush_r>
 28049bc:	103fc91e 	bne	r2,zero,28048e4 <__sfvwrite_r+0x254>
 28049c0:	a469c83a 	sub	r20,r20,r17
 28049c4:	a03fe81e 	bne	r20,zero,2804968 <__sfvwrite_r+0x2d8>
 28049c8:	e009883a 	mov	r4,fp
 28049cc:	900b883a 	mov	r5,r18
 28049d0:	2803d2c0 	call	2803d2c <_fflush_r>
 28049d4:	103fc31e 	bne	r2,zero,28048e4 <__sfvwrite_r+0x254>
 28049d8:	d8000015 	stw	zero,0(sp)
 28049dc:	003fe206 	br	2804968 <__sfvwrite_r+0x2d8>
 28049e0:	91000017 	ldw	r4,0(r18)
 28049e4:	90800417 	ldw	r2,16(r18)
 28049e8:	1100022e 	bgeu	r2,r4,28049f4 <__sfvwrite_r+0x364>
 28049ec:	8023883a 	mov	r17,r16
 28049f0:	85003136 	bltu	r16,r20,2804ab8 <__sfvwrite_r+0x428>
 28049f4:	91c00517 	ldw	r7,20(r18)
 28049f8:	a1c01836 	bltu	r20,r7,2804a5c <__sfvwrite_r+0x3cc>
 28049fc:	90c00917 	ldw	r3,36(r18)
 2804a00:	91400717 	ldw	r5,28(r18)
 2804a04:	e009883a 	mov	r4,fp
 2804a08:	b80d883a 	mov	r6,r23
 2804a0c:	183ee83a 	callr	r3
 2804a10:	1021883a 	mov	r16,r2
 2804a14:	00bfb30e 	bge	zero,r2,28048e4 <__sfvwrite_r+0x254>
 2804a18:	1023883a 	mov	r17,r2
 2804a1c:	1027883a 	mov	r19,r2
 2804a20:	003f9b06 	br	2804890 <__sfvwrite_r+0x200>
 2804a24:	b80b883a 	mov	r5,r23
 2804a28:	800d883a 	mov	r6,r16
 2804a2c:	28057c80 	call	28057c8 <memmove>
 2804a30:	90c00217 	ldw	r3,8(r18)
 2804a34:	90800017 	ldw	r2,0(r18)
 2804a38:	8023883a 	mov	r17,r16
 2804a3c:	1c07c83a 	sub	r3,r3,r16
 2804a40:	1405883a 	add	r2,r2,r16
 2804a44:	90c00215 	stw	r3,8(r18)
 2804a48:	90800015 	stw	r2,0(r18)
 2804a4c:	003fc406 	br	2804960 <__sfvwrite_r+0x2d0>
 2804a50:	a00d883a 	mov	r6,r20
 2804a54:	a021883a 	mov	r16,r20
 2804a58:	003f8106 	br	2804860 <__sfvwrite_r+0x1d0>
 2804a5c:	b80b883a 	mov	r5,r23
 2804a60:	a00d883a 	mov	r6,r20
 2804a64:	28057c80 	call	28057c8 <memmove>
 2804a68:	90c00217 	ldw	r3,8(r18)
 2804a6c:	90800017 	ldw	r2,0(r18)
 2804a70:	a021883a 	mov	r16,r20
 2804a74:	1d07c83a 	sub	r3,r3,r20
 2804a78:	1505883a 	add	r2,r2,r20
 2804a7c:	a023883a 	mov	r17,r20
 2804a80:	a027883a 	mov	r19,r20
 2804a84:	90c00215 	stw	r3,8(r18)
 2804a88:	90800015 	stw	r2,0(r18)
 2804a8c:	003f8006 	br	2804890 <__sfvwrite_r+0x200>
 2804a90:	b809883a 	mov	r4,r23
 2804a94:	01400284 	movi	r5,10
 2804a98:	980d883a 	mov	r6,r19
 2804a9c:	28056440 	call	2805644 <memchr>
 2804aa0:	10001726 	beq	r2,zero,2804b00 <__sfvwrite_r+0x470>
 2804aa4:	15c5c83a 	sub	r2,r2,r23
 2804aa8:	15000044 	addi	r20,r2,1
 2804aac:	00800044 	movi	r2,1
 2804ab0:	d8800015 	stw	r2,0(sp)
 2804ab4:	003f9806 	br	2804918 <__sfvwrite_r+0x288>
 2804ab8:	b80b883a 	mov	r5,r23
 2804abc:	800d883a 	mov	r6,r16
 2804ac0:	28057c80 	call	28057c8 <memmove>
 2804ac4:	90c00017 	ldw	r3,0(r18)
 2804ac8:	e009883a 	mov	r4,fp
 2804acc:	900b883a 	mov	r5,r18
 2804ad0:	1c07883a 	add	r3,r3,r16
 2804ad4:	90c00015 	stw	r3,0(r18)
 2804ad8:	8027883a 	mov	r19,r16
 2804adc:	2803d2c0 	call	2803d2c <_fflush_r>
 2804ae0:	103f6b26 	beq	r2,zero,2804890 <__sfvwrite_r+0x200>
 2804ae4:	003f7f06 	br	28048e4 <__sfvwrite_r+0x254>
 2804ae8:	400b883a 	mov	r5,r8
 2804aec:	e009883a 	mov	r4,fp
 2804af0:	28069cc0 	call	28069cc <_realloc_r>
 2804af4:	103f7626 	beq	r2,zero,28048d0 <__sfvwrite_r+0x240>
 2804af8:	1023883a 	mov	r17,r2
 2804afc:	003f5006 	br	2804840 <__sfvwrite_r+0x1b0>
 2804b00:	00c00044 	movi	r3,1
 2804b04:	9d000044 	addi	r20,r19,1
 2804b08:	d8c00015 	stw	r3,0(sp)
 2804b0c:	003f8206 	br	2804918 <__sfvwrite_r+0x288>
 2804b10:	9080030b 	ldhu	r2,12(r18)
 2804b14:	00c00244 	movi	r3,9
 2804b18:	013fffc4 	movi	r4,-1
 2804b1c:	10801014 	ori	r2,r2,64
 2804b20:	9080030d 	sth	r2,12(r18)
 2804b24:	e0c00015 	stw	r3,0(fp)
 2804b28:	003f0606 	br	2804744 <__sfvwrite_r+0xb4>

02804b2c <_fwalk_reent>:
 2804b2c:	defff704 	addi	sp,sp,-36
 2804b30:	dcc00315 	stw	r19,12(sp)
 2804b34:	24c0b804 	addi	r19,r4,736
 2804b38:	dd800615 	stw	r22,24(sp)
 2804b3c:	dd400515 	stw	r21,20(sp)
 2804b40:	dfc00815 	stw	ra,32(sp)
 2804b44:	ddc00715 	stw	r23,28(sp)
 2804b48:	dd000415 	stw	r20,16(sp)
 2804b4c:	dc800215 	stw	r18,8(sp)
 2804b50:	dc400115 	stw	r17,4(sp)
 2804b54:	dc000015 	stw	r16,0(sp)
 2804b58:	202b883a 	mov	r21,r4
 2804b5c:	282d883a 	mov	r22,r5
 2804b60:	2803fb40 	call	2803fb4 <__sfp_lock_acquire>
 2804b64:	98002126 	beq	r19,zero,2804bec <_fwalk_reent+0xc0>
 2804b68:	002f883a 	mov	r23,zero
 2804b6c:	9c800117 	ldw	r18,4(r19)
 2804b70:	9c000217 	ldw	r16,8(r19)
 2804b74:	90bfffc4 	addi	r2,r18,-1
 2804b78:	10000d16 	blt	r2,zero,2804bb0 <_fwalk_reent+0x84>
 2804b7c:	0023883a 	mov	r17,zero
 2804b80:	053fffc4 	movi	r20,-1
 2804b84:	8080030f 	ldh	r2,12(r16)
 2804b88:	8c400044 	addi	r17,r17,1
 2804b8c:	10000626 	beq	r2,zero,2804ba8 <_fwalk_reent+0x7c>
 2804b90:	8080038f 	ldh	r2,14(r16)
 2804b94:	800b883a 	mov	r5,r16
 2804b98:	a809883a 	mov	r4,r21
 2804b9c:	15000226 	beq	r2,r20,2804ba8 <_fwalk_reent+0x7c>
 2804ba0:	b03ee83a 	callr	r22
 2804ba4:	b8aeb03a 	or	r23,r23,r2
 2804ba8:	84001704 	addi	r16,r16,92
 2804bac:	947ff51e 	bne	r18,r17,2804b84 <_fwalk_reent+0x58>
 2804bb0:	9cc00017 	ldw	r19,0(r19)
 2804bb4:	983fed1e 	bne	r19,zero,2804b6c <_fwalk_reent+0x40>
 2804bb8:	2803fb80 	call	2803fb8 <__sfp_lock_release>
 2804bbc:	b805883a 	mov	r2,r23
 2804bc0:	dfc00817 	ldw	ra,32(sp)
 2804bc4:	ddc00717 	ldw	r23,28(sp)
 2804bc8:	dd800617 	ldw	r22,24(sp)
 2804bcc:	dd400517 	ldw	r21,20(sp)
 2804bd0:	dd000417 	ldw	r20,16(sp)
 2804bd4:	dcc00317 	ldw	r19,12(sp)
 2804bd8:	dc800217 	ldw	r18,8(sp)
 2804bdc:	dc400117 	ldw	r17,4(sp)
 2804be0:	dc000017 	ldw	r16,0(sp)
 2804be4:	dec00904 	addi	sp,sp,36
 2804be8:	f800283a 	ret
 2804bec:	002f883a 	mov	r23,zero
 2804bf0:	003ff106 	br	2804bb8 <_fwalk_reent+0x8c>

02804bf4 <_fwalk>:
 2804bf4:	defff804 	addi	sp,sp,-32
 2804bf8:	dcc00315 	stw	r19,12(sp)
 2804bfc:	24c0b804 	addi	r19,r4,736
 2804c00:	dd400515 	stw	r21,20(sp)
 2804c04:	dfc00715 	stw	ra,28(sp)
 2804c08:	dd800615 	stw	r22,24(sp)
 2804c0c:	dd000415 	stw	r20,16(sp)
 2804c10:	dc800215 	stw	r18,8(sp)
 2804c14:	dc400115 	stw	r17,4(sp)
 2804c18:	dc000015 	stw	r16,0(sp)
 2804c1c:	282b883a 	mov	r21,r5
 2804c20:	2803fb40 	call	2803fb4 <__sfp_lock_acquire>
 2804c24:	98001f26 	beq	r19,zero,2804ca4 <_fwalk+0xb0>
 2804c28:	002d883a 	mov	r22,zero
 2804c2c:	9c800117 	ldw	r18,4(r19)
 2804c30:	9c000217 	ldw	r16,8(r19)
 2804c34:	90bfffc4 	addi	r2,r18,-1
 2804c38:	10000c16 	blt	r2,zero,2804c6c <_fwalk+0x78>
 2804c3c:	0023883a 	mov	r17,zero
 2804c40:	053fffc4 	movi	r20,-1
 2804c44:	8080030f 	ldh	r2,12(r16)
 2804c48:	8c400044 	addi	r17,r17,1
 2804c4c:	10000526 	beq	r2,zero,2804c64 <_fwalk+0x70>
 2804c50:	8080038f 	ldh	r2,14(r16)
 2804c54:	8009883a 	mov	r4,r16
 2804c58:	15000226 	beq	r2,r20,2804c64 <_fwalk+0x70>
 2804c5c:	a83ee83a 	callr	r21
 2804c60:	b0acb03a 	or	r22,r22,r2
 2804c64:	84001704 	addi	r16,r16,92
 2804c68:	947ff61e 	bne	r18,r17,2804c44 <_fwalk+0x50>
 2804c6c:	9cc00017 	ldw	r19,0(r19)
 2804c70:	983fee1e 	bne	r19,zero,2804c2c <_fwalk+0x38>
 2804c74:	2803fb80 	call	2803fb8 <__sfp_lock_release>
 2804c78:	b005883a 	mov	r2,r22
 2804c7c:	dfc00717 	ldw	ra,28(sp)
 2804c80:	dd800617 	ldw	r22,24(sp)
 2804c84:	dd400517 	ldw	r21,20(sp)
 2804c88:	dd000417 	ldw	r20,16(sp)
 2804c8c:	dcc00317 	ldw	r19,12(sp)
 2804c90:	dc800217 	ldw	r18,8(sp)
 2804c94:	dc400117 	ldw	r17,4(sp)
 2804c98:	dc000017 	ldw	r16,0(sp)
 2804c9c:	dec00804 	addi	sp,sp,32
 2804ca0:	f800283a 	ret
 2804ca4:	002d883a 	mov	r22,zero
 2804ca8:	003ff206 	br	2804c74 <_fwalk+0x80>

02804cac <__locale_charset>:
 2804cac:	d0a00317 	ldw	r2,-32756(gp)
 2804cb0:	f800283a 	ret

02804cb4 <_localeconv_r>:
 2804cb4:	0080a074 	movhi	r2,641
 2804cb8:	10b5d404 	addi	r2,r2,-10416
 2804cbc:	f800283a 	ret

02804cc0 <localeconv>:
 2804cc0:	0080a074 	movhi	r2,641
 2804cc4:	10bd3a04 	addi	r2,r2,-2840
 2804cc8:	11000017 	ldw	r4,0(r2)
 2804ccc:	2804cb41 	jmpi	2804cb4 <_localeconv_r>

02804cd0 <_setlocale_r>:
 2804cd0:	defffc04 	addi	sp,sp,-16
 2804cd4:	00c0a074 	movhi	r3,641
 2804cd8:	18f5cf04 	addi	r3,r3,-10436
 2804cdc:	dc800215 	stw	r18,8(sp)
 2804ce0:	dc400115 	stw	r17,4(sp)
 2804ce4:	dc000015 	stw	r16,0(sp)
 2804ce8:	2023883a 	mov	r17,r4
 2804cec:	2825883a 	mov	r18,r5
 2804cf0:	dfc00315 	stw	ra,12(sp)
 2804cf4:	3021883a 	mov	r16,r6
 2804cf8:	3009883a 	mov	r4,r6
 2804cfc:	180b883a 	mov	r5,r3
 2804d00:	30000926 	beq	r6,zero,2804d28 <_setlocale_r+0x58>
 2804d04:	28071ec0 	call	28071ec <strcmp>
 2804d08:	8009883a 	mov	r4,r16
 2804d0c:	0140a074 	movhi	r5,641
 2804d10:	2975ba04 	addi	r5,r5,-10520
 2804d14:	10000b1e 	bne	r2,zero,2804d44 <_setlocale_r+0x74>
 2804d18:	8c000d15 	stw	r16,52(r17)
 2804d1c:	8c800c15 	stw	r18,48(r17)
 2804d20:	00c0a074 	movhi	r3,641
 2804d24:	18f5cf04 	addi	r3,r3,-10436
 2804d28:	1805883a 	mov	r2,r3
 2804d2c:	dfc00317 	ldw	ra,12(sp)
 2804d30:	dc800217 	ldw	r18,8(sp)
 2804d34:	dc400117 	ldw	r17,4(sp)
 2804d38:	dc000017 	ldw	r16,0(sp)
 2804d3c:	dec00404 	addi	sp,sp,16
 2804d40:	f800283a 	ret
 2804d44:	28071ec0 	call	28071ec <strcmp>
 2804d48:	0007883a 	mov	r3,zero
 2804d4c:	103ff226 	beq	r2,zero,2804d18 <_setlocale_r+0x48>
 2804d50:	003ff506 	br	2804d28 <_setlocale_r+0x58>

02804d54 <setlocale>:
 2804d54:	0180a074 	movhi	r6,641
 2804d58:	31bd3a04 	addi	r6,r6,-2840
 2804d5c:	2007883a 	mov	r3,r4
 2804d60:	31000017 	ldw	r4,0(r6)
 2804d64:	280d883a 	mov	r6,r5
 2804d68:	180b883a 	mov	r5,r3
 2804d6c:	2804cd01 	jmpi	2804cd0 <_setlocale_r>

02804d70 <__smakebuf_r>:
 2804d70:	2880030b 	ldhu	r2,12(r5)
 2804d74:	deffed04 	addi	sp,sp,-76
 2804d78:	dc401015 	stw	r17,64(sp)
 2804d7c:	1080008c 	andi	r2,r2,2
 2804d80:	dc000f15 	stw	r16,60(sp)
 2804d84:	dfc01215 	stw	ra,72(sp)
 2804d88:	dc801115 	stw	r18,68(sp)
 2804d8c:	2821883a 	mov	r16,r5
 2804d90:	2023883a 	mov	r17,r4
 2804d94:	10000b26 	beq	r2,zero,2804dc4 <__smakebuf_r+0x54>
 2804d98:	28c010c4 	addi	r3,r5,67
 2804d9c:	00800044 	movi	r2,1
 2804da0:	28800515 	stw	r2,20(r5)
 2804da4:	28c00415 	stw	r3,16(r5)
 2804da8:	28c00015 	stw	r3,0(r5)
 2804dac:	dfc01217 	ldw	ra,72(sp)
 2804db0:	dc801117 	ldw	r18,68(sp)
 2804db4:	dc401017 	ldw	r17,64(sp)
 2804db8:	dc000f17 	ldw	r16,60(sp)
 2804dbc:	dec01304 	addi	sp,sp,76
 2804dc0:	f800283a 	ret
 2804dc4:	2940038f 	ldh	r5,14(r5)
 2804dc8:	28002116 	blt	r5,zero,2804e50 <__smakebuf_r+0xe0>
 2804dcc:	d80d883a 	mov	r6,sp
 2804dd0:	280757c0 	call	280757c <_fstat_r>
 2804dd4:	10001e16 	blt	r2,zero,2804e50 <__smakebuf_r+0xe0>
 2804dd8:	d8800117 	ldw	r2,4(sp)
 2804ddc:	00e00014 	movui	r3,32768
 2804de0:	113c000c 	andi	r4,r2,61440
 2804de4:	20c03126 	beq	r4,r3,2804eac <__smakebuf_r+0x13c>
 2804de8:	8080030b 	ldhu	r2,12(r16)
 2804dec:	00c80004 	movi	r3,8192
 2804df0:	10820014 	ori	r2,r2,2048
 2804df4:	8080030d 	sth	r2,12(r16)
 2804df8:	20c01e26 	beq	r4,r3,2804e74 <__smakebuf_r+0x104>
 2804dfc:	04810004 	movi	r18,1024
 2804e00:	8809883a 	mov	r4,r17
 2804e04:	900b883a 	mov	r5,r18
 2804e08:	2804f040 	call	2804f04 <_malloc_r>
 2804e0c:	1009883a 	mov	r4,r2
 2804e10:	10003126 	beq	r2,zero,2804ed8 <__smakebuf_r+0x168>
 2804e14:	80c0030b 	ldhu	r3,12(r16)
 2804e18:	0080a034 	movhi	r2,640
 2804e1c:	10902a04 	addi	r2,r2,16552
 2804e20:	88800f15 	stw	r2,60(r17)
 2804e24:	18c02014 	ori	r3,r3,128
 2804e28:	84800515 	stw	r18,20(r16)
 2804e2c:	80c0030d 	sth	r3,12(r16)
 2804e30:	81000415 	stw	r4,16(r16)
 2804e34:	81000015 	stw	r4,0(r16)
 2804e38:	dfc01217 	ldw	ra,72(sp)
 2804e3c:	dc801117 	ldw	r18,68(sp)
 2804e40:	dc401017 	ldw	r17,64(sp)
 2804e44:	dc000f17 	ldw	r16,60(sp)
 2804e48:	dec01304 	addi	sp,sp,76
 2804e4c:	f800283a 	ret
 2804e50:	80c0030b 	ldhu	r3,12(r16)
 2804e54:	1880200c 	andi	r2,r3,128
 2804e58:	10000426 	beq	r2,zero,2804e6c <__smakebuf_r+0xfc>
 2804e5c:	04801004 	movi	r18,64
 2804e60:	18820014 	ori	r2,r3,2048
 2804e64:	8080030d 	sth	r2,12(r16)
 2804e68:	003fe506 	br	2804e00 <__smakebuf_r+0x90>
 2804e6c:	04810004 	movi	r18,1024
 2804e70:	003ffb06 	br	2804e60 <__smakebuf_r+0xf0>
 2804e74:	8140038f 	ldh	r5,14(r16)
 2804e78:	8809883a 	mov	r4,r17
 2804e7c:	28075f00 	call	28075f0 <_isatty_r>
 2804e80:	103fde26 	beq	r2,zero,2804dfc <__smakebuf_r+0x8c>
 2804e84:	8080030b 	ldhu	r2,12(r16)
 2804e88:	80c010c4 	addi	r3,r16,67
 2804e8c:	04810004 	movi	r18,1024
 2804e90:	10800054 	ori	r2,r2,1
 2804e94:	8080030d 	sth	r2,12(r16)
 2804e98:	00800044 	movi	r2,1
 2804e9c:	80c00415 	stw	r3,16(r16)
 2804ea0:	80800515 	stw	r2,20(r16)
 2804ea4:	80c00015 	stw	r3,0(r16)
 2804ea8:	003fd506 	br	2804e00 <__smakebuf_r+0x90>
 2804eac:	80c00a17 	ldw	r3,40(r16)
 2804eb0:	0080a034 	movhi	r2,640
 2804eb4:	109c2a04 	addi	r2,r2,28840
 2804eb8:	18bfcb1e 	bne	r3,r2,2804de8 <__smakebuf_r+0x78>
 2804ebc:	8080030b 	ldhu	r2,12(r16)
 2804ec0:	00c10004 	movi	r3,1024
 2804ec4:	1825883a 	mov	r18,r3
 2804ec8:	10c4b03a 	or	r2,r2,r3
 2804ecc:	8080030d 	sth	r2,12(r16)
 2804ed0:	80c01315 	stw	r3,76(r16)
 2804ed4:	003fca06 	br	2804e00 <__smakebuf_r+0x90>
 2804ed8:	8100030b 	ldhu	r4,12(r16)
 2804edc:	2080800c 	andi	r2,r4,512
 2804ee0:	103fb21e 	bne	r2,zero,2804dac <__smakebuf_r+0x3c>
 2804ee4:	80c010c4 	addi	r3,r16,67
 2804ee8:	21000094 	ori	r4,r4,2
 2804eec:	00800044 	movi	r2,1
 2804ef0:	80800515 	stw	r2,20(r16)
 2804ef4:	8100030d 	sth	r4,12(r16)
 2804ef8:	80c00415 	stw	r3,16(r16)
 2804efc:	80c00015 	stw	r3,0(r16)
 2804f00:	003faa06 	br	2804dac <__smakebuf_r+0x3c>

02804f04 <_malloc_r>:
 2804f04:	defff604 	addi	sp,sp,-40
 2804f08:	28c002c4 	addi	r3,r5,11
 2804f0c:	00800584 	movi	r2,22
 2804f10:	dc800215 	stw	r18,8(sp)
 2804f14:	dfc00915 	stw	ra,36(sp)
 2804f18:	df000815 	stw	fp,32(sp)
 2804f1c:	ddc00715 	stw	r23,28(sp)
 2804f20:	dd800615 	stw	r22,24(sp)
 2804f24:	dd400515 	stw	r21,20(sp)
 2804f28:	dd000415 	stw	r20,16(sp)
 2804f2c:	dcc00315 	stw	r19,12(sp)
 2804f30:	dc400115 	stw	r17,4(sp)
 2804f34:	dc000015 	stw	r16,0(sp)
 2804f38:	2025883a 	mov	r18,r4
 2804f3c:	10c01236 	bltu	r2,r3,2804f88 <_malloc_r+0x84>
 2804f40:	04400404 	movi	r17,16
 2804f44:	8940142e 	bgeu	r17,r5,2804f98 <_malloc_r+0x94>
 2804f48:	00800304 	movi	r2,12
 2804f4c:	0007883a 	mov	r3,zero
 2804f50:	90800015 	stw	r2,0(r18)
 2804f54:	1805883a 	mov	r2,r3
 2804f58:	dfc00917 	ldw	ra,36(sp)
 2804f5c:	df000817 	ldw	fp,32(sp)
 2804f60:	ddc00717 	ldw	r23,28(sp)
 2804f64:	dd800617 	ldw	r22,24(sp)
 2804f68:	dd400517 	ldw	r21,20(sp)
 2804f6c:	dd000417 	ldw	r20,16(sp)
 2804f70:	dcc00317 	ldw	r19,12(sp)
 2804f74:	dc800217 	ldw	r18,8(sp)
 2804f78:	dc400117 	ldw	r17,4(sp)
 2804f7c:	dc000017 	ldw	r16,0(sp)
 2804f80:	dec00a04 	addi	sp,sp,40
 2804f84:	f800283a 	ret
 2804f88:	00bffe04 	movi	r2,-8
 2804f8c:	18a2703a 	and	r17,r3,r2
 2804f90:	883fed16 	blt	r17,zero,2804f48 <_malloc_r+0x44>
 2804f94:	897fec36 	bltu	r17,r5,2804f48 <_malloc_r+0x44>
 2804f98:	9009883a 	mov	r4,r18
 2804f9c:	280a4180 	call	280a418 <__malloc_lock>
 2804fa0:	00807dc4 	movi	r2,503
 2804fa4:	14402b2e 	bgeu	r2,r17,2805054 <_malloc_r+0x150>
 2804fa8:	8806d27a 	srli	r3,r17,9
 2804fac:	18003f1e 	bne	r3,zero,28050ac <_malloc_r+0x1a8>
 2804fb0:	880cd0fa 	srli	r6,r17,3
 2804fb4:	300490fa 	slli	r2,r6,3
 2804fb8:	02c0a074 	movhi	r11,641
 2804fbc:	5af77f04 	addi	r11,r11,-8708
 2804fc0:	12cb883a 	add	r5,r2,r11
 2804fc4:	2c000317 	ldw	r16,12(r5)
 2804fc8:	580f883a 	mov	r7,r11
 2804fcc:	2c00041e 	bne	r5,r16,2804fe0 <_malloc_r+0xdc>
 2804fd0:	00000a06 	br	2804ffc <_malloc_r+0xf8>
 2804fd4:	1800860e 	bge	r3,zero,28051f0 <_malloc_r+0x2ec>
 2804fd8:	84000317 	ldw	r16,12(r16)
 2804fdc:	2c000726 	beq	r5,r16,2804ffc <_malloc_r+0xf8>
 2804fe0:	80800117 	ldw	r2,4(r16)
 2804fe4:	00ffff04 	movi	r3,-4
 2804fe8:	10c8703a 	and	r4,r2,r3
 2804fec:	2447c83a 	sub	r3,r4,r17
 2804ff0:	008003c4 	movi	r2,15
 2804ff4:	10fff70e 	bge	r2,r3,2804fd4 <_malloc_r+0xd0>
 2804ff8:	31bfffc4 	addi	r6,r6,-1
 2804ffc:	32400044 	addi	r9,r6,1
 2805000:	0280a074 	movhi	r10,641
 2805004:	52b78104 	addi	r10,r10,-8700
 2805008:	54000217 	ldw	r16,8(r10)
 280500c:	8280a026 	beq	r16,r10,2805290 <_malloc_r+0x38c>
 2805010:	80800117 	ldw	r2,4(r16)
 2805014:	00ffff04 	movi	r3,-4
 2805018:	10ca703a 	and	r5,r2,r3
 280501c:	2c4dc83a 	sub	r6,r5,r17
 2805020:	008003c4 	movi	r2,15
 2805024:	11808316 	blt	r2,r6,2805234 <_malloc_r+0x330>
 2805028:	52800315 	stw	r10,12(r10)
 280502c:	52800215 	stw	r10,8(r10)
 2805030:	30002916 	blt	r6,zero,28050d8 <_malloc_r+0x1d4>
 2805034:	8147883a 	add	r3,r16,r5
 2805038:	18800117 	ldw	r2,4(r3)
 280503c:	9009883a 	mov	r4,r18
 2805040:	10800054 	ori	r2,r2,1
 2805044:	18800115 	stw	r2,4(r3)
 2805048:	280a4380 	call	280a438 <__malloc_unlock>
 280504c:	80c00204 	addi	r3,r16,8
 2805050:	003fc006 	br	2804f54 <_malloc_r+0x50>
 2805054:	02c0a074 	movhi	r11,641
 2805058:	5af77f04 	addi	r11,r11,-8708
 280505c:	8ac5883a 	add	r2,r17,r11
 2805060:	14000317 	ldw	r16,12(r2)
 2805064:	580f883a 	mov	r7,r11
 2805068:	8806d0fa 	srli	r3,r17,3
 280506c:	14006c26 	beq	r2,r16,2805220 <_malloc_r+0x31c>
 2805070:	80c00117 	ldw	r3,4(r16)
 2805074:	00bfff04 	movi	r2,-4
 2805078:	81800317 	ldw	r6,12(r16)
 280507c:	1886703a 	and	r3,r3,r2
 2805080:	80c7883a 	add	r3,r16,r3
 2805084:	18800117 	ldw	r2,4(r3)
 2805088:	81400217 	ldw	r5,8(r16)
 280508c:	9009883a 	mov	r4,r18
 2805090:	10800054 	ori	r2,r2,1
 2805094:	18800115 	stw	r2,4(r3)
 2805098:	31400215 	stw	r5,8(r6)
 280509c:	29800315 	stw	r6,12(r5)
 28050a0:	280a4380 	call	280a438 <__malloc_unlock>
 28050a4:	80c00204 	addi	r3,r16,8
 28050a8:	003faa06 	br	2804f54 <_malloc_r+0x50>
 28050ac:	00800104 	movi	r2,4
 28050b0:	10c0052e 	bgeu	r2,r3,28050c8 <_malloc_r+0x1c4>
 28050b4:	00800504 	movi	r2,20
 28050b8:	10c07836 	bltu	r2,r3,280529c <_malloc_r+0x398>
 28050bc:	198016c4 	addi	r6,r3,91
 28050c0:	300490fa 	slli	r2,r6,3
 28050c4:	003fbc06 	br	2804fb8 <_malloc_r+0xb4>
 28050c8:	8804d1ba 	srli	r2,r17,6
 28050cc:	11800e04 	addi	r6,r2,56
 28050d0:	300490fa 	slli	r2,r6,3
 28050d4:	003fb806 	br	2804fb8 <_malloc_r+0xb4>
 28050d8:	00807fc4 	movi	r2,511
 28050dc:	1140bb36 	bltu	r2,r5,28053cc <_malloc_r+0x4c8>
 28050e0:	2806d0fa 	srli	r3,r5,3
 28050e4:	573ffe04 	addi	fp,r10,-8
 28050e8:	00800044 	movi	r2,1
 28050ec:	180890fa 	slli	r4,r3,3
 28050f0:	1807d0ba 	srai	r3,r3,2
 28050f4:	e1c00117 	ldw	r7,4(fp)
 28050f8:	5909883a 	add	r4,r11,r4
 28050fc:	21400217 	ldw	r5,8(r4)
 2805100:	10c4983a 	sll	r2,r2,r3
 2805104:	81000315 	stw	r4,12(r16)
 2805108:	81400215 	stw	r5,8(r16)
 280510c:	388eb03a 	or	r7,r7,r2
 2805110:	2c000315 	stw	r16,12(r5)
 2805114:	24000215 	stw	r16,8(r4)
 2805118:	e1c00115 	stw	r7,4(fp)
 280511c:	4807883a 	mov	r3,r9
 2805120:	4800cd16 	blt	r9,zero,2805458 <_malloc_r+0x554>
 2805124:	1807d0ba 	srai	r3,r3,2
 2805128:	00800044 	movi	r2,1
 280512c:	10c8983a 	sll	r4,r2,r3
 2805130:	39004436 	bltu	r7,r4,2805244 <_malloc_r+0x340>
 2805134:	21c4703a 	and	r2,r4,r7
 2805138:	10000a1e 	bne	r2,zero,2805164 <_malloc_r+0x260>
 280513c:	2109883a 	add	r4,r4,r4
 2805140:	00bfff04 	movi	r2,-4
 2805144:	4884703a 	and	r2,r9,r2
 2805148:	3906703a 	and	r3,r7,r4
 280514c:	12400104 	addi	r9,r2,4
 2805150:	1800041e 	bne	r3,zero,2805164 <_malloc_r+0x260>
 2805154:	2109883a 	add	r4,r4,r4
 2805158:	3904703a 	and	r2,r7,r4
 280515c:	4a400104 	addi	r9,r9,4
 2805160:	103ffc26 	beq	r2,zero,2805154 <_malloc_r+0x250>
 2805164:	480490fa 	slli	r2,r9,3
 2805168:	4819883a 	mov	r12,r9
 280516c:	023fff04 	movi	r8,-4
 2805170:	589b883a 	add	r13,r11,r2
 2805174:	6807883a 	mov	r3,r13
 2805178:	014003c4 	movi	r5,15
 280517c:	1c000317 	ldw	r16,12(r3)
 2805180:	1c00041e 	bne	r3,r16,2805194 <_malloc_r+0x290>
 2805184:	0000a706 	br	2805424 <_malloc_r+0x520>
 2805188:	3000ab0e 	bge	r6,zero,2805438 <_malloc_r+0x534>
 280518c:	84000317 	ldw	r16,12(r16)
 2805190:	1c00a426 	beq	r3,r16,2805424 <_malloc_r+0x520>
 2805194:	80800117 	ldw	r2,4(r16)
 2805198:	1204703a 	and	r2,r2,r8
 280519c:	144dc83a 	sub	r6,r2,r17
 28051a0:	29bff90e 	bge	r5,r6,2805188 <_malloc_r+0x284>
 28051a4:	81000317 	ldw	r4,12(r16)
 28051a8:	80c00217 	ldw	r3,8(r16)
 28051ac:	89400054 	ori	r5,r17,1
 28051b0:	8445883a 	add	r2,r16,r17
 28051b4:	20c00215 	stw	r3,8(r4)
 28051b8:	19000315 	stw	r4,12(r3)
 28051bc:	81400115 	stw	r5,4(r16)
 28051c0:	1187883a 	add	r3,r2,r6
 28051c4:	31000054 	ori	r4,r6,1
 28051c8:	50800315 	stw	r2,12(r10)
 28051cc:	50800215 	stw	r2,8(r10)
 28051d0:	19800015 	stw	r6,0(r3)
 28051d4:	11000115 	stw	r4,4(r2)
 28051d8:	12800215 	stw	r10,8(r2)
 28051dc:	12800315 	stw	r10,12(r2)
 28051e0:	9009883a 	mov	r4,r18
 28051e4:	280a4380 	call	280a438 <__malloc_unlock>
 28051e8:	80c00204 	addi	r3,r16,8
 28051ec:	003f5906 	br	2804f54 <_malloc_r+0x50>
 28051f0:	8109883a 	add	r4,r16,r4
 28051f4:	20800117 	ldw	r2,4(r4)
 28051f8:	80c00217 	ldw	r3,8(r16)
 28051fc:	81400317 	ldw	r5,12(r16)
 2805200:	10800054 	ori	r2,r2,1
 2805204:	20800115 	stw	r2,4(r4)
 2805208:	28c00215 	stw	r3,8(r5)
 280520c:	19400315 	stw	r5,12(r3)
 2805210:	9009883a 	mov	r4,r18
 2805214:	280a4380 	call	280a438 <__malloc_unlock>
 2805218:	80c00204 	addi	r3,r16,8
 280521c:	003f4d06 	br	2804f54 <_malloc_r+0x50>
 2805220:	80800204 	addi	r2,r16,8
 2805224:	14000317 	ldw	r16,12(r2)
 2805228:	143f911e 	bne	r2,r16,2805070 <_malloc_r+0x16c>
 280522c:	1a400084 	addi	r9,r3,2
 2805230:	003f7306 	br	2805000 <_malloc_r+0xfc>
 2805234:	88c00054 	ori	r3,r17,1
 2805238:	8445883a 	add	r2,r16,r17
 280523c:	80c00115 	stw	r3,4(r16)
 2805240:	003fdf06 	br	28051c0 <_malloc_r+0x2bc>
 2805244:	e4000217 	ldw	r16,8(fp)
 2805248:	00bfff04 	movi	r2,-4
 280524c:	80c00117 	ldw	r3,4(r16)
 2805250:	802d883a 	mov	r22,r16
 2805254:	18aa703a 	and	r21,r3,r2
 2805258:	ac401636 	bltu	r21,r17,28052b4 <_malloc_r+0x3b0>
 280525c:	ac49c83a 	sub	r4,r21,r17
 2805260:	008003c4 	movi	r2,15
 2805264:	1100130e 	bge	r2,r4,28052b4 <_malloc_r+0x3b0>
 2805268:	88800054 	ori	r2,r17,1
 280526c:	8447883a 	add	r3,r16,r17
 2805270:	80800115 	stw	r2,4(r16)
 2805274:	20800054 	ori	r2,r4,1
 2805278:	18800115 	stw	r2,4(r3)
 280527c:	e0c00215 	stw	r3,8(fp)
 2805280:	9009883a 	mov	r4,r18
 2805284:	280a4380 	call	280a438 <__malloc_unlock>
 2805288:	80c00204 	addi	r3,r16,8
 280528c:	003f3106 	br	2804f54 <_malloc_r+0x50>
 2805290:	39c00117 	ldw	r7,4(r7)
 2805294:	573ffe04 	addi	fp,r10,-8
 2805298:	003fa006 	br	280511c <_malloc_r+0x218>
 280529c:	00801504 	movi	r2,84
 28052a0:	10c06736 	bltu	r2,r3,2805440 <_malloc_r+0x53c>
 28052a4:	8804d33a 	srli	r2,r17,12
 28052a8:	11801b84 	addi	r6,r2,110
 28052ac:	300490fa 	slli	r2,r6,3
 28052b0:	003f4106 	br	2804fb8 <_malloc_r+0xb4>
 28052b4:	d0a6e917 	ldw	r2,-25692(gp)
 28052b8:	d0e00517 	ldw	r3,-32748(gp)
 28052bc:	053fffc4 	movi	r20,-1
 28052c0:	10800404 	addi	r2,r2,16
 28052c4:	88a7883a 	add	r19,r17,r2
 28052c8:	1d000326 	beq	r3,r20,28052d8 <_malloc_r+0x3d4>
 28052cc:	98c3ffc4 	addi	r3,r19,4095
 28052d0:	00bc0004 	movi	r2,-4096
 28052d4:	18a6703a 	and	r19,r3,r2
 28052d8:	9009883a 	mov	r4,r18
 28052dc:	980b883a 	mov	r5,r19
 28052e0:	28070300 	call	2807030 <_sbrk_r>
 28052e4:	1009883a 	mov	r4,r2
 28052e8:	15000426 	beq	r2,r20,28052fc <_malloc_r+0x3f8>
 28052ec:	854b883a 	add	r5,r16,r21
 28052f0:	1029883a 	mov	r20,r2
 28052f4:	11405a2e 	bgeu	r2,r5,2805460 <_malloc_r+0x55c>
 28052f8:	87000c26 	beq	r16,fp,280532c <_malloc_r+0x428>
 28052fc:	e4000217 	ldw	r16,8(fp)
 2805300:	80c00117 	ldw	r3,4(r16)
 2805304:	00bfff04 	movi	r2,-4
 2805308:	1884703a 	and	r2,r3,r2
 280530c:	14400336 	bltu	r2,r17,280531c <_malloc_r+0x418>
 2805310:	1449c83a 	sub	r4,r2,r17
 2805314:	008003c4 	movi	r2,15
 2805318:	113fd316 	blt	r2,r4,2805268 <_malloc_r+0x364>
 280531c:	9009883a 	mov	r4,r18
 2805320:	280a4380 	call	280a438 <__malloc_unlock>
 2805324:	0007883a 	mov	r3,zero
 2805328:	003f0a06 	br	2804f54 <_malloc_r+0x50>
 280532c:	05c0a074 	movhi	r23,641
 2805330:	bdc42f04 	addi	r23,r23,4284
 2805334:	b8800017 	ldw	r2,0(r23)
 2805338:	988d883a 	add	r6,r19,r2
 280533c:	b9800015 	stw	r6,0(r23)
 2805340:	d0e00517 	ldw	r3,-32748(gp)
 2805344:	00bfffc4 	movi	r2,-1
 2805348:	18808e26 	beq	r3,r2,2805584 <_malloc_r+0x680>
 280534c:	2145c83a 	sub	r2,r4,r5
 2805350:	3085883a 	add	r2,r6,r2
 2805354:	b8800015 	stw	r2,0(r23)
 2805358:	20c001cc 	andi	r3,r4,7
 280535c:	18005f1e 	bne	r3,zero,28054dc <_malloc_r+0x5d8>
 2805360:	000b883a 	mov	r5,zero
 2805364:	a4c5883a 	add	r2,r20,r19
 2805368:	1083ffcc 	andi	r2,r2,4095
 280536c:	00c40004 	movi	r3,4096
 2805370:	1887c83a 	sub	r3,r3,r2
 2805374:	28e7883a 	add	r19,r5,r3
 2805378:	9009883a 	mov	r4,r18
 280537c:	980b883a 	mov	r5,r19
 2805380:	28070300 	call	2807030 <_sbrk_r>
 2805384:	1007883a 	mov	r3,r2
 2805388:	00bfffc4 	movi	r2,-1
 280538c:	18807a26 	beq	r3,r2,2805578 <_malloc_r+0x674>
 2805390:	1d05c83a 	sub	r2,r3,r20
 2805394:	9885883a 	add	r2,r19,r2
 2805398:	10c00054 	ori	r3,r2,1
 280539c:	b8800017 	ldw	r2,0(r23)
 28053a0:	a021883a 	mov	r16,r20
 28053a4:	a0c00115 	stw	r3,4(r20)
 28053a8:	9885883a 	add	r2,r19,r2
 28053ac:	b8800015 	stw	r2,0(r23)
 28053b0:	e5000215 	stw	r20,8(fp)
 28053b4:	b7003626 	beq	r22,fp,2805490 <_malloc_r+0x58c>
 28053b8:	018003c4 	movi	r6,15
 28053bc:	35404b36 	bltu	r6,r21,28054ec <_malloc_r+0x5e8>
 28053c0:	00800044 	movi	r2,1
 28053c4:	a0800115 	stw	r2,4(r20)
 28053c8:	003fcd06 	br	2805300 <_malloc_r+0x3fc>
 28053cc:	2808d27a 	srli	r4,r5,9
 28053d0:	2000371e 	bne	r4,zero,28054b0 <_malloc_r+0x5ac>
 28053d4:	2808d0fa 	srli	r4,r5,3
 28053d8:	200690fa 	slli	r3,r4,3
 28053dc:	1ad1883a 	add	r8,r3,r11
 28053e0:	41800217 	ldw	r6,8(r8)
 28053e4:	41805b26 	beq	r8,r6,2805554 <_malloc_r+0x650>
 28053e8:	30800117 	ldw	r2,4(r6)
 28053ec:	00ffff04 	movi	r3,-4
 28053f0:	10c4703a 	and	r2,r2,r3
 28053f4:	2880022e 	bgeu	r5,r2,2805400 <_malloc_r+0x4fc>
 28053f8:	31800217 	ldw	r6,8(r6)
 28053fc:	41bffa1e 	bne	r8,r6,28053e8 <_malloc_r+0x4e4>
 2805400:	32000317 	ldw	r8,12(r6)
 2805404:	39c00117 	ldw	r7,4(r7)
 2805408:	82000315 	stw	r8,12(r16)
 280540c:	81800215 	stw	r6,8(r16)
 2805410:	0700a074 	movhi	fp,641
 2805414:	e7377f04 	addi	fp,fp,-8708
 2805418:	34000315 	stw	r16,12(r6)
 280541c:	44000215 	stw	r16,8(r8)
 2805420:	003f3e06 	br	280511c <_malloc_r+0x218>
 2805424:	63000044 	addi	r12,r12,1
 2805428:	608000cc 	andi	r2,r12,3
 280542c:	10005d26 	beq	r2,zero,28055a4 <_malloc_r+0x6a0>
 2805430:	18c00204 	addi	r3,r3,8
 2805434:	003f5106 	br	280517c <_malloc_r+0x278>
 2805438:	8089883a 	add	r4,r16,r2
 280543c:	003f6d06 	br	28051f4 <_malloc_r+0x2f0>
 2805440:	00805504 	movi	r2,340
 2805444:	10c02036 	bltu	r2,r3,28054c8 <_malloc_r+0x5c4>
 2805448:	8804d3fa 	srli	r2,r17,15
 280544c:	11801dc4 	addi	r6,r2,119
 2805450:	300490fa 	slli	r2,r6,3
 2805454:	003ed806 	br	2804fb8 <_malloc_r+0xb4>
 2805458:	48c000c4 	addi	r3,r9,3
 280545c:	003f3106 	br	2805124 <_malloc_r+0x220>
 2805460:	05c0a074 	movhi	r23,641
 2805464:	bdc42f04 	addi	r23,r23,4284
 2805468:	b8800017 	ldw	r2,0(r23)
 280546c:	988d883a 	add	r6,r19,r2
 2805470:	b9800015 	stw	r6,0(r23)
 2805474:	293fb21e 	bne	r5,r4,2805340 <_malloc_r+0x43c>
 2805478:	2083ffcc 	andi	r2,r4,4095
 280547c:	103fb01e 	bne	r2,zero,2805340 <_malloc_r+0x43c>
 2805480:	e4000217 	ldw	r16,8(fp)
 2805484:	9d45883a 	add	r2,r19,r21
 2805488:	10800054 	ori	r2,r2,1
 280548c:	80800115 	stw	r2,4(r16)
 2805490:	b8c00017 	ldw	r3,0(r23)
 2805494:	d0a6ea17 	ldw	r2,-25688(gp)
 2805498:	10c0012e 	bgeu	r2,r3,28054a0 <_malloc_r+0x59c>
 280549c:	d0e6ea15 	stw	r3,-25688(gp)
 28054a0:	d0a6eb17 	ldw	r2,-25684(gp)
 28054a4:	10ff962e 	bgeu	r2,r3,2805300 <_malloc_r+0x3fc>
 28054a8:	d0e6eb15 	stw	r3,-25684(gp)
 28054ac:	003f9406 	br	2805300 <_malloc_r+0x3fc>
 28054b0:	00800104 	movi	r2,4
 28054b4:	11001e36 	bltu	r2,r4,2805530 <_malloc_r+0x62c>
 28054b8:	2804d1ba 	srli	r2,r5,6
 28054bc:	11000e04 	addi	r4,r2,56
 28054c0:	200690fa 	slli	r3,r4,3
 28054c4:	003fc506 	br	28053dc <_malloc_r+0x4d8>
 28054c8:	00815504 	movi	r2,1364
 28054cc:	10c01d2e 	bgeu	r2,r3,2805544 <_malloc_r+0x640>
 28054d0:	01801f84 	movi	r6,126
 28054d4:	0080fc04 	movi	r2,1008
 28054d8:	003eb706 	br	2804fb8 <_malloc_r+0xb4>
 28054dc:	00800204 	movi	r2,8
 28054e0:	10cbc83a 	sub	r5,r2,r3
 28054e4:	2169883a 	add	r20,r4,r5
 28054e8:	003f9e06 	br	2805364 <_malloc_r+0x460>
 28054ec:	00bffe04 	movi	r2,-8
 28054f0:	a93ffd04 	addi	r4,r21,-12
 28054f4:	2088703a 	and	r4,r4,r2
 28054f8:	b10b883a 	add	r5,r22,r4
 28054fc:	00c00144 	movi	r3,5
 2805500:	28c00215 	stw	r3,8(r5)
 2805504:	28c00115 	stw	r3,4(r5)
 2805508:	b0800117 	ldw	r2,4(r22)
 280550c:	1080004c 	andi	r2,r2,1
 2805510:	2084b03a 	or	r2,r4,r2
 2805514:	b0800115 	stw	r2,4(r22)
 2805518:	313fdd2e 	bgeu	r6,r4,2805490 <_malloc_r+0x58c>
 280551c:	b1400204 	addi	r5,r22,8
 2805520:	9009883a 	mov	r4,r18
 2805524:	280437c0 	call	280437c <_free_r>
 2805528:	e4000217 	ldw	r16,8(fp)
 280552c:	003fd806 	br	2805490 <_malloc_r+0x58c>
 2805530:	00800504 	movi	r2,20
 2805534:	11001536 	bltu	r2,r4,280558c <_malloc_r+0x688>
 2805538:	210016c4 	addi	r4,r4,91
 280553c:	200690fa 	slli	r3,r4,3
 2805540:	003fa606 	br	28053dc <_malloc_r+0x4d8>
 2805544:	8804d4ba 	srli	r2,r17,18
 2805548:	11801f04 	addi	r6,r2,124
 280554c:	300490fa 	slli	r2,r6,3
 2805550:	003e9906 	br	2804fb8 <_malloc_r+0xb4>
 2805554:	2009d0ba 	srai	r4,r4,2
 2805558:	0140a074 	movhi	r5,641
 280555c:	29777f04 	addi	r5,r5,-8708
 2805560:	00c00044 	movi	r3,1
 2805564:	28800117 	ldw	r2,4(r5)
 2805568:	1906983a 	sll	r3,r3,r4
 280556c:	10c4b03a 	or	r2,r2,r3
 2805570:	28800115 	stw	r2,4(r5)
 2805574:	003fa306 	br	2805404 <_malloc_r+0x500>
 2805578:	0027883a 	mov	r19,zero
 280557c:	00c00044 	movi	r3,1
 2805580:	003f8606 	br	280539c <_malloc_r+0x498>
 2805584:	d1200515 	stw	r4,-32748(gp)
 2805588:	003f7306 	br	2805358 <_malloc_r+0x454>
 280558c:	00801504 	movi	r2,84
 2805590:	11001936 	bltu	r2,r4,28055f8 <_malloc_r+0x6f4>
 2805594:	2804d33a 	srli	r2,r5,12
 2805598:	11001b84 	addi	r4,r2,110
 280559c:	200690fa 	slli	r3,r4,3
 28055a0:	003f8e06 	br	28053dc <_malloc_r+0x4d8>
 28055a4:	480b883a 	mov	r5,r9
 28055a8:	6807883a 	mov	r3,r13
 28055ac:	288000cc 	andi	r2,r5,3
 28055b0:	18fffe04 	addi	r3,r3,-8
 28055b4:	297fffc4 	addi	r5,r5,-1
 28055b8:	10001526 	beq	r2,zero,2805610 <_malloc_r+0x70c>
 28055bc:	18800217 	ldw	r2,8(r3)
 28055c0:	10fffa26 	beq	r2,r3,28055ac <_malloc_r+0x6a8>
 28055c4:	2109883a 	add	r4,r4,r4
 28055c8:	393f1e36 	bltu	r7,r4,2805244 <_malloc_r+0x340>
 28055cc:	203f1d26 	beq	r4,zero,2805244 <_malloc_r+0x340>
 28055d0:	21c4703a 	and	r2,r4,r7
 28055d4:	10000226 	beq	r2,zero,28055e0 <_malloc_r+0x6dc>
 28055d8:	6013883a 	mov	r9,r12
 28055dc:	003ee106 	br	2805164 <_malloc_r+0x260>
 28055e0:	2109883a 	add	r4,r4,r4
 28055e4:	3904703a 	and	r2,r7,r4
 28055e8:	63000104 	addi	r12,r12,4
 28055ec:	103ffc26 	beq	r2,zero,28055e0 <_malloc_r+0x6dc>
 28055f0:	6013883a 	mov	r9,r12
 28055f4:	003edb06 	br	2805164 <_malloc_r+0x260>
 28055f8:	00805504 	movi	r2,340
 28055fc:	11000836 	bltu	r2,r4,2805620 <_malloc_r+0x71c>
 2805600:	2804d3fa 	srli	r2,r5,15
 2805604:	11001dc4 	addi	r4,r2,119
 2805608:	200690fa 	slli	r3,r4,3
 280560c:	003f7306 	br	28053dc <_malloc_r+0x4d8>
 2805610:	0104303a 	nor	r2,zero,r4
 2805614:	388e703a 	and	r7,r7,r2
 2805618:	e1c00115 	stw	r7,4(fp)
 280561c:	003fe906 	br	28055c4 <_malloc_r+0x6c0>
 2805620:	00815504 	movi	r2,1364
 2805624:	1100032e 	bgeu	r2,r4,2805634 <_malloc_r+0x730>
 2805628:	01001f84 	movi	r4,126
 280562c:	00c0fc04 	movi	r3,1008
 2805630:	003f6a06 	br	28053dc <_malloc_r+0x4d8>
 2805634:	2804d4ba 	srli	r2,r5,18
 2805638:	11001f04 	addi	r4,r2,124
 280563c:	200690fa 	slli	r3,r4,3
 2805640:	003f6606 	br	28053dc <_malloc_r+0x4d8>

02805644 <memchr>:
 2805644:	008000c4 	movi	r2,3
 2805648:	29403fcc 	andi	r5,r5,255
 280564c:	2007883a 	mov	r3,r4
 2805650:	1180022e 	bgeu	r2,r6,280565c <memchr+0x18>
 2805654:	2084703a 	and	r2,r4,r2
 2805658:	10000b26 	beq	r2,zero,2805688 <memchr+0x44>
 280565c:	313fffc4 	addi	r4,r6,-1
 2805660:	3000051e 	bne	r6,zero,2805678 <memchr+0x34>
 2805664:	00002c06 	br	2805718 <memchr+0xd4>
 2805668:	213fffc4 	addi	r4,r4,-1
 280566c:	00bfffc4 	movi	r2,-1
 2805670:	18c00044 	addi	r3,r3,1
 2805674:	20802826 	beq	r4,r2,2805718 <memchr+0xd4>
 2805678:	18800003 	ldbu	r2,0(r3)
 280567c:	28bffa1e 	bne	r5,r2,2805668 <memchr+0x24>
 2805680:	1805883a 	mov	r2,r3
 2805684:	f800283a 	ret
 2805688:	0011883a 	mov	r8,zero
 280568c:	0007883a 	mov	r3,zero
 2805690:	01c00104 	movi	r7,4
 2805694:	4004923a 	slli	r2,r8,8
 2805698:	18c00044 	addi	r3,r3,1
 280569c:	1151883a 	add	r8,r2,r5
 28056a0:	19fffc1e 	bne	r3,r7,2805694 <memchr+0x50>
 28056a4:	02bfbff4 	movhi	r10,65279
 28056a8:	52bfbfc4 	addi	r10,r10,-257
 28056ac:	02602074 	movhi	r9,32897
 28056b0:	4a602004 	addi	r9,r9,-32640
 28056b4:	02c000c4 	movi	r11,3
 28056b8:	20800017 	ldw	r2,0(r4)
 28056bc:	31bfff04 	addi	r6,r6,-4
 28056c0:	200f883a 	mov	r7,r4
 28056c4:	1204f03a 	xor	r2,r2,r8
 28056c8:	1287883a 	add	r3,r2,r10
 28056cc:	1a46703a 	and	r3,r3,r9
 28056d0:	0084303a 	nor	r2,zero,r2
 28056d4:	10c4703a 	and	r2,r2,r3
 28056d8:	10000b26 	beq	r2,zero,2805708 <memchr+0xc4>
 28056dc:	20800003 	ldbu	r2,0(r4)
 28056e0:	28800f26 	beq	r5,r2,2805720 <memchr+0xdc>
 28056e4:	20800043 	ldbu	r2,1(r4)
 28056e8:	21c00044 	addi	r7,r4,1
 28056ec:	28800c26 	beq	r5,r2,2805720 <memchr+0xdc>
 28056f0:	20800083 	ldbu	r2,2(r4)
 28056f4:	21c00084 	addi	r7,r4,2
 28056f8:	28800926 	beq	r5,r2,2805720 <memchr+0xdc>
 28056fc:	208000c3 	ldbu	r2,3(r4)
 2805700:	21c000c4 	addi	r7,r4,3
 2805704:	28800626 	beq	r5,r2,2805720 <memchr+0xdc>
 2805708:	21000104 	addi	r4,r4,4
 280570c:	59bfea36 	bltu	r11,r6,28056b8 <memchr+0x74>
 2805710:	2007883a 	mov	r3,r4
 2805714:	003fd106 	br	280565c <memchr+0x18>
 2805718:	0005883a 	mov	r2,zero
 280571c:	f800283a 	ret
 2805720:	3805883a 	mov	r2,r7
 2805724:	f800283a 	ret

02805728 <memcpy>:
 2805728:	01c003c4 	movi	r7,15
 280572c:	2007883a 	mov	r3,r4
 2805730:	3980032e 	bgeu	r7,r6,2805740 <memcpy+0x18>
 2805734:	2904b03a 	or	r2,r5,r4
 2805738:	108000cc 	andi	r2,r2,3
 280573c:	10000926 	beq	r2,zero,2805764 <memcpy+0x3c>
 2805740:	30000626 	beq	r6,zero,280575c <memcpy+0x34>
 2805744:	30cd883a 	add	r6,r6,r3
 2805748:	28800003 	ldbu	r2,0(r5)
 280574c:	29400044 	addi	r5,r5,1
 2805750:	18800005 	stb	r2,0(r3)
 2805754:	18c00044 	addi	r3,r3,1
 2805758:	30fffb1e 	bne	r6,r3,2805748 <memcpy+0x20>
 280575c:	2005883a 	mov	r2,r4
 2805760:	f800283a 	ret
 2805764:	3811883a 	mov	r8,r7
 2805768:	200f883a 	mov	r7,r4
 280576c:	28c00017 	ldw	r3,0(r5)
 2805770:	31bffc04 	addi	r6,r6,-16
 2805774:	38c00015 	stw	r3,0(r7)
 2805778:	28800117 	ldw	r2,4(r5)
 280577c:	38800115 	stw	r2,4(r7)
 2805780:	28c00217 	ldw	r3,8(r5)
 2805784:	38c00215 	stw	r3,8(r7)
 2805788:	28800317 	ldw	r2,12(r5)
 280578c:	29400404 	addi	r5,r5,16
 2805790:	38800315 	stw	r2,12(r7)
 2805794:	39c00404 	addi	r7,r7,16
 2805798:	41bff436 	bltu	r8,r6,280576c <memcpy+0x44>
 280579c:	008000c4 	movi	r2,3
 28057a0:	1180072e 	bgeu	r2,r6,28057c0 <memcpy+0x98>
 28057a4:	1007883a 	mov	r3,r2
 28057a8:	28800017 	ldw	r2,0(r5)
 28057ac:	31bfff04 	addi	r6,r6,-4
 28057b0:	29400104 	addi	r5,r5,4
 28057b4:	38800015 	stw	r2,0(r7)
 28057b8:	39c00104 	addi	r7,r7,4
 28057bc:	19bffa36 	bltu	r3,r6,28057a8 <memcpy+0x80>
 28057c0:	3807883a 	mov	r3,r7
 28057c4:	003fde06 	br	2805740 <memcpy+0x18>

028057c8 <memmove>:
 28057c8:	2807883a 	mov	r3,r5
 28057cc:	2011883a 	mov	r8,r4
 28057d0:	29000c2e 	bgeu	r5,r4,2805804 <memmove+0x3c>
 28057d4:	298f883a 	add	r7,r5,r6
 28057d8:	21c00a2e 	bgeu	r4,r7,2805804 <memmove+0x3c>
 28057dc:	30000726 	beq	r6,zero,28057fc <memmove+0x34>
 28057e0:	2187883a 	add	r3,r4,r6
 28057e4:	198dc83a 	sub	r6,r3,r6
 28057e8:	39ffffc4 	addi	r7,r7,-1
 28057ec:	38800003 	ldbu	r2,0(r7)
 28057f0:	18ffffc4 	addi	r3,r3,-1
 28057f4:	18800005 	stb	r2,0(r3)
 28057f8:	19bffb1e 	bne	r3,r6,28057e8 <memmove+0x20>
 28057fc:	2005883a 	mov	r2,r4
 2805800:	f800283a 	ret
 2805804:	01c003c4 	movi	r7,15
 2805808:	39800a36 	bltu	r7,r6,2805834 <memmove+0x6c>
 280580c:	303ffb26 	beq	r6,zero,28057fc <memmove+0x34>
 2805810:	400f883a 	mov	r7,r8
 2805814:	320d883a 	add	r6,r6,r8
 2805818:	28800003 	ldbu	r2,0(r5)
 280581c:	29400044 	addi	r5,r5,1
 2805820:	38800005 	stb	r2,0(r7)
 2805824:	39c00044 	addi	r7,r7,1
 2805828:	39bffb1e 	bne	r7,r6,2805818 <memmove+0x50>
 280582c:	2005883a 	mov	r2,r4
 2805830:	f800283a 	ret
 2805834:	1904b03a 	or	r2,r3,r4
 2805838:	108000cc 	andi	r2,r2,3
 280583c:	103ff31e 	bne	r2,zero,280580c <memmove+0x44>
 2805840:	3811883a 	mov	r8,r7
 2805844:	180b883a 	mov	r5,r3
 2805848:	200f883a 	mov	r7,r4
 280584c:	28c00017 	ldw	r3,0(r5)
 2805850:	31bffc04 	addi	r6,r6,-16
 2805854:	38c00015 	stw	r3,0(r7)
 2805858:	28800117 	ldw	r2,4(r5)
 280585c:	38800115 	stw	r2,4(r7)
 2805860:	28c00217 	ldw	r3,8(r5)
 2805864:	38c00215 	stw	r3,8(r7)
 2805868:	28800317 	ldw	r2,12(r5)
 280586c:	29400404 	addi	r5,r5,16
 2805870:	38800315 	stw	r2,12(r7)
 2805874:	39c00404 	addi	r7,r7,16
 2805878:	41bff436 	bltu	r8,r6,280584c <memmove+0x84>
 280587c:	008000c4 	movi	r2,3
 2805880:	1180072e 	bgeu	r2,r6,28058a0 <memmove+0xd8>
 2805884:	1007883a 	mov	r3,r2
 2805888:	28800017 	ldw	r2,0(r5)
 280588c:	31bfff04 	addi	r6,r6,-4
 2805890:	29400104 	addi	r5,r5,4
 2805894:	38800015 	stw	r2,0(r7)
 2805898:	39c00104 	addi	r7,r7,4
 280589c:	19bffa36 	bltu	r3,r6,2805888 <memmove+0xc0>
 28058a0:	3811883a 	mov	r8,r7
 28058a4:	003fd906 	br	280580c <memmove+0x44>

028058a8 <memset>:
 28058a8:	008000c4 	movi	r2,3
 28058ac:	29403fcc 	andi	r5,r5,255
 28058b0:	2007883a 	mov	r3,r4
 28058b4:	1180022e 	bgeu	r2,r6,28058c0 <memset+0x18>
 28058b8:	2084703a 	and	r2,r4,r2
 28058bc:	10000826 	beq	r2,zero,28058e0 <memset+0x38>
 28058c0:	30000526 	beq	r6,zero,28058d8 <memset+0x30>
 28058c4:	2805883a 	mov	r2,r5
 28058c8:	30cd883a 	add	r6,r6,r3
 28058cc:	18800005 	stb	r2,0(r3)
 28058d0:	18c00044 	addi	r3,r3,1
 28058d4:	19bffd1e 	bne	r3,r6,28058cc <memset+0x24>
 28058d8:	2005883a 	mov	r2,r4
 28058dc:	f800283a 	ret
 28058e0:	2804923a 	slli	r2,r5,8
 28058e4:	020003c4 	movi	r8,15
 28058e8:	200f883a 	mov	r7,r4
 28058ec:	2884b03a 	or	r2,r5,r2
 28058f0:	1006943a 	slli	r3,r2,16
 28058f4:	10c6b03a 	or	r3,r2,r3
 28058f8:	41800a2e 	bgeu	r8,r6,2805924 <memset+0x7c>
 28058fc:	4005883a 	mov	r2,r8
 2805900:	31bffc04 	addi	r6,r6,-16
 2805904:	38c00015 	stw	r3,0(r7)
 2805908:	38c00115 	stw	r3,4(r7)
 280590c:	38c00215 	stw	r3,8(r7)
 2805910:	38c00315 	stw	r3,12(r7)
 2805914:	39c00404 	addi	r7,r7,16
 2805918:	11bff936 	bltu	r2,r6,2805900 <memset+0x58>
 280591c:	008000c4 	movi	r2,3
 2805920:	1180052e 	bgeu	r2,r6,2805938 <memset+0x90>
 2805924:	31bfff04 	addi	r6,r6,-4
 2805928:	008000c4 	movi	r2,3
 280592c:	38c00015 	stw	r3,0(r7)
 2805930:	39c00104 	addi	r7,r7,4
 2805934:	11bffb36 	bltu	r2,r6,2805924 <memset+0x7c>
 2805938:	3807883a 	mov	r3,r7
 280593c:	003fe006 	br	28058c0 <memset+0x18>

02805940 <_Bfree>:
 2805940:	28000826 	beq	r5,zero,2805964 <_Bfree+0x24>
 2805944:	28800117 	ldw	r2,4(r5)
 2805948:	21001317 	ldw	r4,76(r4)
 280594c:	1085883a 	add	r2,r2,r2
 2805950:	1085883a 	add	r2,r2,r2
 2805954:	1105883a 	add	r2,r2,r4
 2805958:	10c00017 	ldw	r3,0(r2)
 280595c:	28c00015 	stw	r3,0(r5)
 2805960:	11400015 	stw	r5,0(r2)
 2805964:	f800283a 	ret

02805968 <__hi0bits>:
 2805968:	20bfffec 	andhi	r2,r4,65535
 280596c:	10001426 	beq	r2,zero,28059c0 <__hi0bits+0x58>
 2805970:	0007883a 	mov	r3,zero
 2805974:	20bfc02c 	andhi	r2,r4,65280
 2805978:	1000021e 	bne	r2,zero,2805984 <__hi0bits+0x1c>
 280597c:	2008923a 	slli	r4,r4,8
 2805980:	18c00204 	addi	r3,r3,8
 2805984:	20bc002c 	andhi	r2,r4,61440
 2805988:	1000021e 	bne	r2,zero,2805994 <__hi0bits+0x2c>
 280598c:	2008913a 	slli	r4,r4,4
 2805990:	18c00104 	addi	r3,r3,4
 2805994:	20b0002c 	andhi	r2,r4,49152
 2805998:	1000031e 	bne	r2,zero,28059a8 <__hi0bits+0x40>
 280599c:	2105883a 	add	r2,r4,r4
 28059a0:	18c00084 	addi	r3,r3,2
 28059a4:	1089883a 	add	r4,r2,r2
 28059a8:	20000316 	blt	r4,zero,28059b8 <__hi0bits+0x50>
 28059ac:	2090002c 	andhi	r2,r4,16384
 28059b0:	10000626 	beq	r2,zero,28059cc <__hi0bits+0x64>
 28059b4:	18c00044 	addi	r3,r3,1
 28059b8:	1805883a 	mov	r2,r3
 28059bc:	f800283a 	ret
 28059c0:	2008943a 	slli	r4,r4,16
 28059c4:	00c00404 	movi	r3,16
 28059c8:	003fea06 	br	2805974 <__hi0bits+0xc>
 28059cc:	00c00804 	movi	r3,32
 28059d0:	1805883a 	mov	r2,r3
 28059d4:	f800283a 	ret

028059d8 <__lo0bits>:
 28059d8:	20c00017 	ldw	r3,0(r4)
 28059dc:	188001cc 	andi	r2,r3,7
 28059e0:	10000a26 	beq	r2,zero,2805a0c <__lo0bits+0x34>
 28059e4:	1880004c 	andi	r2,r3,1
 28059e8:	1005003a 	cmpeq	r2,r2,zero
 28059ec:	10002126 	beq	r2,zero,2805a74 <__lo0bits+0x9c>
 28059f0:	1880008c 	andi	r2,r3,2
 28059f4:	1000251e 	bne	r2,zero,2805a8c <__lo0bits+0xb4>
 28059f8:	1804d0ba 	srli	r2,r3,2
 28059fc:	01400084 	movi	r5,2
 2805a00:	20800015 	stw	r2,0(r4)
 2805a04:	2805883a 	mov	r2,r5
 2805a08:	f800283a 	ret
 2805a0c:	18bfffcc 	andi	r2,r3,65535
 2805a10:	10001526 	beq	r2,zero,2805a68 <__lo0bits+0x90>
 2805a14:	000b883a 	mov	r5,zero
 2805a18:	18803fcc 	andi	r2,r3,255
 2805a1c:	1000021e 	bne	r2,zero,2805a28 <__lo0bits+0x50>
 2805a20:	1806d23a 	srli	r3,r3,8
 2805a24:	29400204 	addi	r5,r5,8
 2805a28:	188003cc 	andi	r2,r3,15
 2805a2c:	1000021e 	bne	r2,zero,2805a38 <__lo0bits+0x60>
 2805a30:	1806d13a 	srli	r3,r3,4
 2805a34:	29400104 	addi	r5,r5,4
 2805a38:	188000cc 	andi	r2,r3,3
 2805a3c:	1000021e 	bne	r2,zero,2805a48 <__lo0bits+0x70>
 2805a40:	1806d0ba 	srli	r3,r3,2
 2805a44:	29400084 	addi	r5,r5,2
 2805a48:	1880004c 	andi	r2,r3,1
 2805a4c:	1000031e 	bne	r2,zero,2805a5c <__lo0bits+0x84>
 2805a50:	1806d07a 	srli	r3,r3,1
 2805a54:	18000a26 	beq	r3,zero,2805a80 <__lo0bits+0xa8>
 2805a58:	29400044 	addi	r5,r5,1
 2805a5c:	2805883a 	mov	r2,r5
 2805a60:	20c00015 	stw	r3,0(r4)
 2805a64:	f800283a 	ret
 2805a68:	1806d43a 	srli	r3,r3,16
 2805a6c:	01400404 	movi	r5,16
 2805a70:	003fe906 	br	2805a18 <__lo0bits+0x40>
 2805a74:	000b883a 	mov	r5,zero
 2805a78:	2805883a 	mov	r2,r5
 2805a7c:	f800283a 	ret
 2805a80:	01400804 	movi	r5,32
 2805a84:	2805883a 	mov	r2,r5
 2805a88:	f800283a 	ret
 2805a8c:	1804d07a 	srli	r2,r3,1
 2805a90:	01400044 	movi	r5,1
 2805a94:	20800015 	stw	r2,0(r4)
 2805a98:	003fda06 	br	2805a04 <__lo0bits+0x2c>

02805a9c <__mcmp>:
 2805a9c:	20800417 	ldw	r2,16(r4)
 2805aa0:	28c00417 	ldw	r3,16(r5)
 2805aa4:	10cfc83a 	sub	r7,r2,r3
 2805aa8:	38000c1e 	bne	r7,zero,2805adc <__mcmp+0x40>
 2805aac:	18c5883a 	add	r2,r3,r3
 2805ab0:	1085883a 	add	r2,r2,r2
 2805ab4:	10c00504 	addi	r3,r2,20
 2805ab8:	21000504 	addi	r4,r4,20
 2805abc:	28cb883a 	add	r5,r5,r3
 2805ac0:	2085883a 	add	r2,r4,r2
 2805ac4:	10bfff04 	addi	r2,r2,-4
 2805ac8:	297fff04 	addi	r5,r5,-4
 2805acc:	11800017 	ldw	r6,0(r2)
 2805ad0:	28c00017 	ldw	r3,0(r5)
 2805ad4:	30c0031e 	bne	r6,r3,2805ae4 <__mcmp+0x48>
 2805ad8:	20bffa36 	bltu	r4,r2,2805ac4 <__mcmp+0x28>
 2805adc:	3805883a 	mov	r2,r7
 2805ae0:	f800283a 	ret
 2805ae4:	30c00336 	bltu	r6,r3,2805af4 <__mcmp+0x58>
 2805ae8:	01c00044 	movi	r7,1
 2805aec:	3805883a 	mov	r2,r7
 2805af0:	f800283a 	ret
 2805af4:	01ffffc4 	movi	r7,-1
 2805af8:	003ff806 	br	2805adc <__mcmp+0x40>

02805afc <__ulp>:
 2805afc:	295ffc2c 	andhi	r5,r5,32752
 2805b00:	013f3034 	movhi	r4,64704
 2805b04:	290b883a 	add	r5,r5,r4
 2805b08:	0145c83a 	sub	r2,zero,r5
 2805b0c:	1007d53a 	srai	r3,r2,20
 2805b10:	000d883a 	mov	r6,zero
 2805b14:	0140040e 	bge	zero,r5,2805b28 <__ulp+0x2c>
 2805b18:	280f883a 	mov	r7,r5
 2805b1c:	3807883a 	mov	r3,r7
 2805b20:	3005883a 	mov	r2,r6
 2805b24:	f800283a 	ret
 2805b28:	008004c4 	movi	r2,19
 2805b2c:	193ffb04 	addi	r4,r3,-20
 2805b30:	10c00c0e 	bge	r2,r3,2805b64 <__ulp+0x68>
 2805b34:	008007c4 	movi	r2,31
 2805b38:	1107c83a 	sub	r3,r2,r4
 2805b3c:	00800784 	movi	r2,30
 2805b40:	01400044 	movi	r5,1
 2805b44:	11000216 	blt	r2,r4,2805b50 <__ulp+0x54>
 2805b48:	00800044 	movi	r2,1
 2805b4c:	10ca983a 	sll	r5,r2,r3
 2805b50:	000f883a 	mov	r7,zero
 2805b54:	280d883a 	mov	r6,r5
 2805b58:	3807883a 	mov	r3,r7
 2805b5c:	3005883a 	mov	r2,r6
 2805b60:	f800283a 	ret
 2805b64:	00800234 	movhi	r2,8
 2805b68:	10cfd83a 	sra	r7,r2,r3
 2805b6c:	000d883a 	mov	r6,zero
 2805b70:	3005883a 	mov	r2,r6
 2805b74:	3807883a 	mov	r3,r7
 2805b78:	f800283a 	ret

02805b7c <__b2d>:
 2805b7c:	20800417 	ldw	r2,16(r4)
 2805b80:	defff904 	addi	sp,sp,-28
 2805b84:	dd000415 	stw	r20,16(sp)
 2805b88:	1085883a 	add	r2,r2,r2
 2805b8c:	25000504 	addi	r20,r4,20
 2805b90:	1085883a 	add	r2,r2,r2
 2805b94:	dc000015 	stw	r16,0(sp)
 2805b98:	a0a1883a 	add	r16,r20,r2
 2805b9c:	dd400515 	stw	r21,20(sp)
 2805ba0:	857fff17 	ldw	r21,-4(r16)
 2805ba4:	dc400115 	stw	r17,4(sp)
 2805ba8:	dfc00615 	stw	ra,24(sp)
 2805bac:	a809883a 	mov	r4,r21
 2805bb0:	2823883a 	mov	r17,r5
 2805bb4:	dcc00315 	stw	r19,12(sp)
 2805bb8:	dc800215 	stw	r18,8(sp)
 2805bbc:	28059680 	call	2805968 <__hi0bits>
 2805bc0:	100b883a 	mov	r5,r2
 2805bc4:	00800804 	movi	r2,32
 2805bc8:	1145c83a 	sub	r2,r2,r5
 2805bcc:	88800015 	stw	r2,0(r17)
 2805bd0:	00800284 	movi	r2,10
 2805bd4:	80ffff04 	addi	r3,r16,-4
 2805bd8:	11401416 	blt	r2,r5,2805c2c <__b2d+0xb0>
 2805bdc:	008002c4 	movi	r2,11
 2805be0:	1149c83a 	sub	r4,r2,r5
 2805be4:	a0c02736 	bltu	r20,r3,2805c84 <__b2d+0x108>
 2805be8:	000d883a 	mov	r6,zero
 2805bec:	28800544 	addi	r2,r5,21
 2805bf0:	a906d83a 	srl	r3,r21,r4
 2805bf4:	a884983a 	sll	r2,r21,r2
 2805bf8:	1ccffc34 	orhi	r19,r3,16368
 2805bfc:	11a4b03a 	or	r18,r2,r6
 2805c00:	9005883a 	mov	r2,r18
 2805c04:	9807883a 	mov	r3,r19
 2805c08:	dfc00617 	ldw	ra,24(sp)
 2805c0c:	dd400517 	ldw	r21,20(sp)
 2805c10:	dd000417 	ldw	r20,16(sp)
 2805c14:	dcc00317 	ldw	r19,12(sp)
 2805c18:	dc800217 	ldw	r18,8(sp)
 2805c1c:	dc400117 	ldw	r17,4(sp)
 2805c20:	dc000017 	ldw	r16,0(sp)
 2805c24:	dec00704 	addi	sp,sp,28
 2805c28:	f800283a 	ret
 2805c2c:	a0c00e36 	bltu	r20,r3,2805c68 <__b2d+0xec>
 2805c30:	293ffd44 	addi	r4,r5,-11
 2805c34:	000d883a 	mov	r6,zero
 2805c38:	20000f26 	beq	r4,zero,2805c78 <__b2d+0xfc>
 2805c3c:	00800804 	movi	r2,32
 2805c40:	110bc83a 	sub	r5,r2,r4
 2805c44:	a0c01236 	bltu	r20,r3,2805c90 <__b2d+0x114>
 2805c48:	000f883a 	mov	r7,zero
 2805c4c:	a904983a 	sll	r2,r21,r4
 2805c50:	3146d83a 	srl	r3,r6,r5
 2805c54:	3108983a 	sll	r4,r6,r4
 2805c58:	108ffc34 	orhi	r2,r2,16368
 2805c5c:	18a6b03a 	or	r19,r3,r2
 2805c60:	3924b03a 	or	r18,r7,r4
 2805c64:	003fe606 	br	2805c00 <__b2d+0x84>
 2805c68:	293ffd44 	addi	r4,r5,-11
 2805c6c:	81bffe17 	ldw	r6,-8(r16)
 2805c70:	80fffe04 	addi	r3,r16,-8
 2805c74:	203ff11e 	bne	r4,zero,2805c3c <__b2d+0xc0>
 2805c78:	accffc34 	orhi	r19,r21,16368
 2805c7c:	3025883a 	mov	r18,r6
 2805c80:	003fdf06 	br	2805c00 <__b2d+0x84>
 2805c84:	18bfff17 	ldw	r2,-4(r3)
 2805c88:	110cd83a 	srl	r6,r2,r4
 2805c8c:	003fd706 	br	2805bec <__b2d+0x70>
 2805c90:	18bfff17 	ldw	r2,-4(r3)
 2805c94:	114ed83a 	srl	r7,r2,r5
 2805c98:	003fec06 	br	2805c4c <__b2d+0xd0>

02805c9c <__ratio>:
 2805c9c:	defff904 	addi	sp,sp,-28
 2805ca0:	dc400215 	stw	r17,8(sp)
 2805ca4:	2823883a 	mov	r17,r5
 2805ca8:	d80b883a 	mov	r5,sp
 2805cac:	dfc00615 	stw	ra,24(sp)
 2805cb0:	dd000515 	stw	r20,20(sp)
 2805cb4:	dcc00415 	stw	r19,16(sp)
 2805cb8:	dc800315 	stw	r18,12(sp)
 2805cbc:	2025883a 	mov	r18,r4
 2805cc0:	2805b7c0 	call	2805b7c <__b2d>
 2805cc4:	8809883a 	mov	r4,r17
 2805cc8:	d9400104 	addi	r5,sp,4
 2805ccc:	1027883a 	mov	r19,r2
 2805cd0:	1829883a 	mov	r20,r3
 2805cd4:	2805b7c0 	call	2805b7c <__b2d>
 2805cd8:	89000417 	ldw	r4,16(r17)
 2805cdc:	91c00417 	ldw	r7,16(r18)
 2805ce0:	d9800117 	ldw	r6,4(sp)
 2805ce4:	180b883a 	mov	r5,r3
 2805ce8:	390fc83a 	sub	r7,r7,r4
 2805cec:	1009883a 	mov	r4,r2
 2805cf0:	d8800017 	ldw	r2,0(sp)
 2805cf4:	380e917a 	slli	r7,r7,5
 2805cf8:	2011883a 	mov	r8,r4
 2805cfc:	1185c83a 	sub	r2,r2,r6
 2805d00:	11c5883a 	add	r2,r2,r7
 2805d04:	1006953a 	slli	r3,r2,20
 2805d08:	2813883a 	mov	r9,r5
 2805d0c:	00800d0e 	bge	zero,r2,2805d44 <__ratio+0xa8>
 2805d10:	1d29883a 	add	r20,r3,r20
 2805d14:	a00b883a 	mov	r5,r20
 2805d18:	480f883a 	mov	r7,r9
 2805d1c:	9809883a 	mov	r4,r19
 2805d20:	400d883a 	mov	r6,r8
 2805d24:	2808ce40 	call	2808ce4 <__divdf3>
 2805d28:	dfc00617 	ldw	ra,24(sp)
 2805d2c:	dd000517 	ldw	r20,20(sp)
 2805d30:	dcc00417 	ldw	r19,16(sp)
 2805d34:	dc800317 	ldw	r18,12(sp)
 2805d38:	dc400217 	ldw	r17,8(sp)
 2805d3c:	dec00704 	addi	sp,sp,28
 2805d40:	f800283a 	ret
 2805d44:	28d3c83a 	sub	r9,r5,r3
 2805d48:	003ff206 	br	2805d14 <__ratio+0x78>

02805d4c <_mprec_log10>:
 2805d4c:	defffe04 	addi	sp,sp,-8
 2805d50:	008005c4 	movi	r2,23
 2805d54:	dc000015 	stw	r16,0(sp)
 2805d58:	dfc00115 	stw	ra,4(sp)
 2805d5c:	2021883a 	mov	r16,r4
 2805d60:	11000c16 	blt	r2,r4,2805d94 <_mprec_log10+0x48>
 2805d64:	200490fa 	slli	r2,r4,3
 2805d68:	00c0a074 	movhi	r3,641
 2805d6c:	18f5e004 	addi	r3,r3,-10368
 2805d70:	10c5883a 	add	r2,r2,r3
 2805d74:	12400117 	ldw	r9,4(r2)
 2805d78:	12000017 	ldw	r8,0(r2)
 2805d7c:	4807883a 	mov	r3,r9
 2805d80:	4005883a 	mov	r2,r8
 2805d84:	dfc00117 	ldw	ra,4(sp)
 2805d88:	dc000017 	ldw	r16,0(sp)
 2805d8c:	dec00204 	addi	sp,sp,8
 2805d90:	f800283a 	ret
 2805d94:	0011883a 	mov	r8,zero
 2805d98:	024ffc34 	movhi	r9,16368
 2805d9c:	0005883a 	mov	r2,zero
 2805da0:	00d00934 	movhi	r3,16420
 2805da4:	480b883a 	mov	r5,r9
 2805da8:	4009883a 	mov	r4,r8
 2805dac:	180f883a 	mov	r7,r3
 2805db0:	100d883a 	mov	r6,r2
 2805db4:	28089200 	call	2808920 <__muldf3>
 2805db8:	843fffc4 	addi	r16,r16,-1
 2805dbc:	1011883a 	mov	r8,r2
 2805dc0:	1813883a 	mov	r9,r3
 2805dc4:	803ff51e 	bne	r16,zero,2805d9c <_mprec_log10+0x50>
 2805dc8:	4005883a 	mov	r2,r8
 2805dcc:	4807883a 	mov	r3,r9
 2805dd0:	dfc00117 	ldw	ra,4(sp)
 2805dd4:	dc000017 	ldw	r16,0(sp)
 2805dd8:	dec00204 	addi	sp,sp,8
 2805ddc:	f800283a 	ret

02805de0 <__copybits>:
 2805de0:	297fffc4 	addi	r5,r5,-1
 2805de4:	30800417 	ldw	r2,16(r6)
 2805de8:	280bd17a 	srai	r5,r5,5
 2805dec:	31800504 	addi	r6,r6,20
 2805df0:	1085883a 	add	r2,r2,r2
 2805df4:	294b883a 	add	r5,r5,r5
 2805df8:	294b883a 	add	r5,r5,r5
 2805dfc:	1085883a 	add	r2,r2,r2
 2805e00:	290b883a 	add	r5,r5,r4
 2805e04:	3087883a 	add	r3,r6,r2
 2805e08:	29400104 	addi	r5,r5,4
 2805e0c:	30c0052e 	bgeu	r6,r3,2805e24 <__copybits+0x44>
 2805e10:	30800017 	ldw	r2,0(r6)
 2805e14:	31800104 	addi	r6,r6,4
 2805e18:	20800015 	stw	r2,0(r4)
 2805e1c:	21000104 	addi	r4,r4,4
 2805e20:	30fffb36 	bltu	r6,r3,2805e10 <__copybits+0x30>
 2805e24:	2140032e 	bgeu	r4,r5,2805e34 <__copybits+0x54>
 2805e28:	20000015 	stw	zero,0(r4)
 2805e2c:	21000104 	addi	r4,r4,4
 2805e30:	217ffd36 	bltu	r4,r5,2805e28 <__copybits+0x48>
 2805e34:	f800283a 	ret

02805e38 <__any_on>:
 2805e38:	20800417 	ldw	r2,16(r4)
 2805e3c:	2807d17a 	srai	r3,r5,5
 2805e40:	21000504 	addi	r4,r4,20
 2805e44:	10c00d0e 	bge	r2,r3,2805e7c <__any_on+0x44>
 2805e48:	1085883a 	add	r2,r2,r2
 2805e4c:	1085883a 	add	r2,r2,r2
 2805e50:	208d883a 	add	r6,r4,r2
 2805e54:	2180182e 	bgeu	r4,r6,2805eb8 <__any_on+0x80>
 2805e58:	30bfff17 	ldw	r2,-4(r6)
 2805e5c:	30ffff04 	addi	r3,r6,-4
 2805e60:	1000041e 	bne	r2,zero,2805e74 <__any_on+0x3c>
 2805e64:	20c0142e 	bgeu	r4,r3,2805eb8 <__any_on+0x80>
 2805e68:	18ffff04 	addi	r3,r3,-4
 2805e6c:	18800017 	ldw	r2,0(r3)
 2805e70:	103ffc26 	beq	r2,zero,2805e64 <__any_on+0x2c>
 2805e74:	00800044 	movi	r2,1
 2805e78:	f800283a 	ret
 2805e7c:	18800a0e 	bge	r3,r2,2805ea8 <__any_on+0x70>
 2805e80:	294007cc 	andi	r5,r5,31
 2805e84:	28000826 	beq	r5,zero,2805ea8 <__any_on+0x70>
 2805e88:	18c5883a 	add	r2,r3,r3
 2805e8c:	1085883a 	add	r2,r2,r2
 2805e90:	208d883a 	add	r6,r4,r2
 2805e94:	30c00017 	ldw	r3,0(r6)
 2805e98:	1944d83a 	srl	r2,r3,r5
 2805e9c:	1144983a 	sll	r2,r2,r5
 2805ea0:	18bff41e 	bne	r3,r2,2805e74 <__any_on+0x3c>
 2805ea4:	003feb06 	br	2805e54 <__any_on+0x1c>
 2805ea8:	18c5883a 	add	r2,r3,r3
 2805eac:	1085883a 	add	r2,r2,r2
 2805eb0:	208d883a 	add	r6,r4,r2
 2805eb4:	003fe706 	br	2805e54 <__any_on+0x1c>
 2805eb8:	0005883a 	mov	r2,zero
 2805ebc:	f800283a 	ret

02805ec0 <_Balloc>:
 2805ec0:	20c01317 	ldw	r3,76(r4)
 2805ec4:	defffb04 	addi	sp,sp,-20
 2805ec8:	dcc00315 	stw	r19,12(sp)
 2805ecc:	dc800215 	stw	r18,8(sp)
 2805ed0:	dfc00415 	stw	ra,16(sp)
 2805ed4:	2825883a 	mov	r18,r5
 2805ed8:	dc400115 	stw	r17,4(sp)
 2805edc:	dc000015 	stw	r16,0(sp)
 2805ee0:	2027883a 	mov	r19,r4
 2805ee4:	01800404 	movi	r6,16
 2805ee8:	01400104 	movi	r5,4
 2805eec:	18001726 	beq	r3,zero,2805f4c <_Balloc+0x8c>
 2805ef0:	01400044 	movi	r5,1
 2805ef4:	9485883a 	add	r2,r18,r18
 2805ef8:	2ca2983a 	sll	r17,r5,r18
 2805efc:	1085883a 	add	r2,r2,r2
 2805f00:	10c7883a 	add	r3,r2,r3
 2805f04:	1c000017 	ldw	r16,0(r3)
 2805f08:	8c4d883a 	add	r6,r17,r17
 2805f0c:	318d883a 	add	r6,r6,r6
 2805f10:	9809883a 	mov	r4,r19
 2805f14:	31800504 	addi	r6,r6,20
 2805f18:	80001226 	beq	r16,zero,2805f64 <_Balloc+0xa4>
 2805f1c:	80800017 	ldw	r2,0(r16)
 2805f20:	18800015 	stw	r2,0(r3)
 2805f24:	80000415 	stw	zero,16(r16)
 2805f28:	80000315 	stw	zero,12(r16)
 2805f2c:	8005883a 	mov	r2,r16
 2805f30:	dfc00417 	ldw	ra,16(sp)
 2805f34:	dcc00317 	ldw	r19,12(sp)
 2805f38:	dc800217 	ldw	r18,8(sp)
 2805f3c:	dc400117 	ldw	r17,4(sp)
 2805f40:	dc000017 	ldw	r16,0(sp)
 2805f44:	dec00504 	addi	sp,sp,20
 2805f48:	f800283a 	ret
 2805f4c:	28073200 	call	2807320 <_calloc_r>
 2805f50:	1007883a 	mov	r3,r2
 2805f54:	0021883a 	mov	r16,zero
 2805f58:	98801315 	stw	r2,76(r19)
 2805f5c:	103fe41e 	bne	r2,zero,2805ef0 <_Balloc+0x30>
 2805f60:	003ff206 	br	2805f2c <_Balloc+0x6c>
 2805f64:	28073200 	call	2807320 <_calloc_r>
 2805f68:	103ff026 	beq	r2,zero,2805f2c <_Balloc+0x6c>
 2805f6c:	1021883a 	mov	r16,r2
 2805f70:	14800115 	stw	r18,4(r2)
 2805f74:	14400215 	stw	r17,8(r2)
 2805f78:	003fea06 	br	2805f24 <_Balloc+0x64>

02805f7c <__d2b>:
 2805f7c:	defff504 	addi	sp,sp,-44
 2805f80:	dcc00515 	stw	r19,20(sp)
 2805f84:	04c00044 	movi	r19,1
 2805f88:	dc000215 	stw	r16,8(sp)
 2805f8c:	2821883a 	mov	r16,r5
 2805f90:	980b883a 	mov	r5,r19
 2805f94:	ddc00915 	stw	r23,36(sp)
 2805f98:	dd800815 	stw	r22,32(sp)
 2805f9c:	dd400715 	stw	r21,28(sp)
 2805fa0:	dd000615 	stw	r20,24(sp)
 2805fa4:	dc800415 	stw	r18,16(sp)
 2805fa8:	dc400315 	stw	r17,12(sp)
 2805fac:	dfc00a15 	stw	ra,40(sp)
 2805fb0:	3023883a 	mov	r17,r6
 2805fb4:	382d883a 	mov	r22,r7
 2805fb8:	ddc00b17 	ldw	r23,44(sp)
 2805fbc:	2805ec00 	call	2805ec0 <_Balloc>
 2805fc0:	1025883a 	mov	r18,r2
 2805fc4:	00a00034 	movhi	r2,32768
 2805fc8:	10bfffc4 	addi	r2,r2,-1
 2805fcc:	8888703a 	and	r4,r17,r2
 2805fd0:	202ad53a 	srli	r21,r4,20
 2805fd4:	00800434 	movhi	r2,16
 2805fd8:	10bfffc4 	addi	r2,r2,-1
 2805fdc:	8886703a 	and	r3,r17,r2
 2805fe0:	a829003a 	cmpeq	r20,r21,zero
 2805fe4:	800b883a 	mov	r5,r16
 2805fe8:	d8c00115 	stw	r3,4(sp)
 2805fec:	94000504 	addi	r16,r18,20
 2805ff0:	a000021e 	bne	r20,zero,2805ffc <__d2b+0x80>
 2805ff4:	18c00434 	orhi	r3,r3,16
 2805ff8:	d8c00115 	stw	r3,4(sp)
 2805ffc:	28002726 	beq	r5,zero,280609c <__d2b+0x120>
 2806000:	d809883a 	mov	r4,sp
 2806004:	d9400015 	stw	r5,0(sp)
 2806008:	28059d80 	call	28059d8 <__lo0bits>
 280600c:	100d883a 	mov	r6,r2
 2806010:	10003526 	beq	r2,zero,28060e8 <__d2b+0x16c>
 2806014:	d8c00117 	ldw	r3,4(sp)
 2806018:	00800804 	movi	r2,32
 280601c:	1185c83a 	sub	r2,r2,r6
 2806020:	d9000017 	ldw	r4,0(sp)
 2806024:	1886983a 	sll	r3,r3,r2
 2806028:	1906b03a 	or	r3,r3,r4
 280602c:	90c00515 	stw	r3,20(r18)
 2806030:	d8c00117 	ldw	r3,4(sp)
 2806034:	1986d83a 	srl	r3,r3,r6
 2806038:	d8c00115 	stw	r3,4(sp)
 280603c:	180b003a 	cmpeq	r5,r3,zero
 2806040:	00800084 	movi	r2,2
 2806044:	114bc83a 	sub	r5,r2,r5
 2806048:	80c00115 	stw	r3,4(r16)
 280604c:	91400415 	stw	r5,16(r18)
 2806050:	a0001a1e 	bne	r20,zero,28060bc <__d2b+0x140>
 2806054:	3545883a 	add	r2,r6,r21
 2806058:	10bef344 	addi	r2,r2,-1075
 280605c:	00c00d44 	movi	r3,53
 2806060:	b0800015 	stw	r2,0(r22)
 2806064:	1987c83a 	sub	r3,r3,r6
 2806068:	b8c00015 	stw	r3,0(r23)
 280606c:	9005883a 	mov	r2,r18
 2806070:	dfc00a17 	ldw	ra,40(sp)
 2806074:	ddc00917 	ldw	r23,36(sp)
 2806078:	dd800817 	ldw	r22,32(sp)
 280607c:	dd400717 	ldw	r21,28(sp)
 2806080:	dd000617 	ldw	r20,24(sp)
 2806084:	dcc00517 	ldw	r19,20(sp)
 2806088:	dc800417 	ldw	r18,16(sp)
 280608c:	dc400317 	ldw	r17,12(sp)
 2806090:	dc000217 	ldw	r16,8(sp)
 2806094:	dec00b04 	addi	sp,sp,44
 2806098:	f800283a 	ret
 280609c:	d9000104 	addi	r4,sp,4
 28060a0:	28059d80 	call	28059d8 <__lo0bits>
 28060a4:	11800804 	addi	r6,r2,32
 28060a8:	d8800117 	ldw	r2,4(sp)
 28060ac:	94c00415 	stw	r19,16(r18)
 28060b0:	980b883a 	mov	r5,r19
 28060b4:	90800515 	stw	r2,20(r18)
 28060b8:	a03fe626 	beq	r20,zero,2806054 <__d2b+0xd8>
 28060bc:	2945883a 	add	r2,r5,r5
 28060c0:	1085883a 	add	r2,r2,r2
 28060c4:	1405883a 	add	r2,r2,r16
 28060c8:	113fff17 	ldw	r4,-4(r2)
 28060cc:	30fef384 	addi	r3,r6,-1074
 28060d0:	2820917a 	slli	r16,r5,5
 28060d4:	b0c00015 	stw	r3,0(r22)
 28060d8:	28059680 	call	2805968 <__hi0bits>
 28060dc:	80a1c83a 	sub	r16,r16,r2
 28060e0:	bc000015 	stw	r16,0(r23)
 28060e4:	003fe106 	br	280606c <__d2b+0xf0>
 28060e8:	d8800017 	ldw	r2,0(sp)
 28060ec:	90800515 	stw	r2,20(r18)
 28060f0:	d8c00117 	ldw	r3,4(sp)
 28060f4:	003fd106 	br	280603c <__d2b+0xc0>

028060f8 <__mdiff>:
 28060f8:	defffb04 	addi	sp,sp,-20
 28060fc:	dc000015 	stw	r16,0(sp)
 2806100:	2821883a 	mov	r16,r5
 2806104:	dc800215 	stw	r18,8(sp)
 2806108:	300b883a 	mov	r5,r6
 280610c:	2025883a 	mov	r18,r4
 2806110:	8009883a 	mov	r4,r16
 2806114:	dc400115 	stw	r17,4(sp)
 2806118:	dfc00415 	stw	ra,16(sp)
 280611c:	dcc00315 	stw	r19,12(sp)
 2806120:	3023883a 	mov	r17,r6
 2806124:	2805a9c0 	call	2805a9c <__mcmp>
 2806128:	10004226 	beq	r2,zero,2806234 <__mdiff+0x13c>
 280612c:	10005016 	blt	r2,zero,2806270 <__mdiff+0x178>
 2806130:	0027883a 	mov	r19,zero
 2806134:	81400117 	ldw	r5,4(r16)
 2806138:	9009883a 	mov	r4,r18
 280613c:	2805ec00 	call	2805ec0 <_Balloc>
 2806140:	1019883a 	mov	r12,r2
 2806144:	82800417 	ldw	r10,16(r16)
 2806148:	88800417 	ldw	r2,16(r17)
 280614c:	81800504 	addi	r6,r16,20
 2806150:	5287883a 	add	r3,r10,r10
 2806154:	1085883a 	add	r2,r2,r2
 2806158:	18c7883a 	add	r3,r3,r3
 280615c:	1085883a 	add	r2,r2,r2
 2806160:	8a000504 	addi	r8,r17,20
 2806164:	64c00315 	stw	r19,12(r12)
 2806168:	30db883a 	add	r13,r6,r3
 280616c:	4097883a 	add	r11,r8,r2
 2806170:	61c00504 	addi	r7,r12,20
 2806174:	0013883a 	mov	r9,zero
 2806178:	31000017 	ldw	r4,0(r6)
 280617c:	41400017 	ldw	r5,0(r8)
 2806180:	42000104 	addi	r8,r8,4
 2806184:	20bfffcc 	andi	r2,r4,65535
 2806188:	28ffffcc 	andi	r3,r5,65535
 280618c:	10c5c83a 	sub	r2,r2,r3
 2806190:	1245883a 	add	r2,r2,r9
 2806194:	2008d43a 	srli	r4,r4,16
 2806198:	280ad43a 	srli	r5,r5,16
 280619c:	1007d43a 	srai	r3,r2,16
 28061a0:	3880000d 	sth	r2,0(r7)
 28061a4:	2149c83a 	sub	r4,r4,r5
 28061a8:	20c9883a 	add	r4,r4,r3
 28061ac:	3900008d 	sth	r4,2(r7)
 28061b0:	31800104 	addi	r6,r6,4
 28061b4:	39c00104 	addi	r7,r7,4
 28061b8:	2013d43a 	srai	r9,r4,16
 28061bc:	42ffee36 	bltu	r8,r11,2806178 <__mdiff+0x80>
 28061c0:	33400c2e 	bgeu	r6,r13,28061f4 <__mdiff+0xfc>
 28061c4:	30800017 	ldw	r2,0(r6)
 28061c8:	31800104 	addi	r6,r6,4
 28061cc:	10ffffcc 	andi	r3,r2,65535
 28061d0:	1a47883a 	add	r3,r3,r9
 28061d4:	1004d43a 	srli	r2,r2,16
 28061d8:	1809d43a 	srai	r4,r3,16
 28061dc:	38c0000d 	sth	r3,0(r7)
 28061e0:	1105883a 	add	r2,r2,r4
 28061e4:	3880008d 	sth	r2,2(r7)
 28061e8:	1013d43a 	srai	r9,r2,16
 28061ec:	39c00104 	addi	r7,r7,4
 28061f0:	337ff436 	bltu	r6,r13,28061c4 <__mdiff+0xcc>
 28061f4:	38bfff17 	ldw	r2,-4(r7)
 28061f8:	38ffff04 	addi	r3,r7,-4
 28061fc:	1000041e 	bne	r2,zero,2806210 <__mdiff+0x118>
 2806200:	18ffff04 	addi	r3,r3,-4
 2806204:	18800017 	ldw	r2,0(r3)
 2806208:	52bfffc4 	addi	r10,r10,-1
 280620c:	103ffc26 	beq	r2,zero,2806200 <__mdiff+0x108>
 2806210:	6005883a 	mov	r2,r12
 2806214:	62800415 	stw	r10,16(r12)
 2806218:	dfc00417 	ldw	ra,16(sp)
 280621c:	dcc00317 	ldw	r19,12(sp)
 2806220:	dc800217 	ldw	r18,8(sp)
 2806224:	dc400117 	ldw	r17,4(sp)
 2806228:	dc000017 	ldw	r16,0(sp)
 280622c:	dec00504 	addi	sp,sp,20
 2806230:	f800283a 	ret
 2806234:	9009883a 	mov	r4,r18
 2806238:	000b883a 	mov	r5,zero
 280623c:	2805ec00 	call	2805ec0 <_Balloc>
 2806240:	1019883a 	mov	r12,r2
 2806244:	00800044 	movi	r2,1
 2806248:	60800415 	stw	r2,16(r12)
 280624c:	6005883a 	mov	r2,r12
 2806250:	60000515 	stw	zero,20(r12)
 2806254:	dfc00417 	ldw	ra,16(sp)
 2806258:	dcc00317 	ldw	r19,12(sp)
 280625c:	dc800217 	ldw	r18,8(sp)
 2806260:	dc400117 	ldw	r17,4(sp)
 2806264:	dc000017 	ldw	r16,0(sp)
 2806268:	dec00504 	addi	sp,sp,20
 280626c:	f800283a 	ret
 2806270:	880d883a 	mov	r6,r17
 2806274:	04c00044 	movi	r19,1
 2806278:	8023883a 	mov	r17,r16
 280627c:	3021883a 	mov	r16,r6
 2806280:	003fac06 	br	2806134 <__mdiff+0x3c>

02806284 <__lshift>:
 2806284:	defff904 	addi	sp,sp,-28
 2806288:	28800417 	ldw	r2,16(r5)
 280628c:	dc000015 	stw	r16,0(sp)
 2806290:	3021d17a 	srai	r16,r6,5
 2806294:	28c00217 	ldw	r3,8(r5)
 2806298:	10800044 	addi	r2,r2,1
 280629c:	dc400115 	stw	r17,4(sp)
 28062a0:	80a3883a 	add	r17,r16,r2
 28062a4:	dd400515 	stw	r21,20(sp)
 28062a8:	dd000415 	stw	r20,16(sp)
 28062ac:	dc800215 	stw	r18,8(sp)
 28062b0:	dfc00615 	stw	ra,24(sp)
 28062b4:	2825883a 	mov	r18,r5
 28062b8:	dcc00315 	stw	r19,12(sp)
 28062bc:	3029883a 	mov	r20,r6
 28062c0:	202b883a 	mov	r21,r4
 28062c4:	29400117 	ldw	r5,4(r5)
 28062c8:	1c40030e 	bge	r3,r17,28062d8 <__lshift+0x54>
 28062cc:	18c7883a 	add	r3,r3,r3
 28062d0:	29400044 	addi	r5,r5,1
 28062d4:	1c7ffd16 	blt	r3,r17,28062cc <__lshift+0x48>
 28062d8:	a809883a 	mov	r4,r21
 28062dc:	2805ec00 	call	2805ec0 <_Balloc>
 28062e0:	1027883a 	mov	r19,r2
 28062e4:	11400504 	addi	r5,r2,20
 28062e8:	0400090e 	bge	zero,r16,2806310 <__lshift+0x8c>
 28062ec:	2805883a 	mov	r2,r5
 28062f0:	0007883a 	mov	r3,zero
 28062f4:	18c00044 	addi	r3,r3,1
 28062f8:	10000015 	stw	zero,0(r2)
 28062fc:	10800104 	addi	r2,r2,4
 2806300:	80fffc1e 	bne	r16,r3,28062f4 <__lshift+0x70>
 2806304:	8405883a 	add	r2,r16,r16
 2806308:	1085883a 	add	r2,r2,r2
 280630c:	288b883a 	add	r5,r5,r2
 2806310:	90800417 	ldw	r2,16(r18)
 2806314:	91000504 	addi	r4,r18,20
 2806318:	a18007cc 	andi	r6,r20,31
 280631c:	1085883a 	add	r2,r2,r2
 2806320:	1085883a 	add	r2,r2,r2
 2806324:	208f883a 	add	r7,r4,r2
 2806328:	30001e26 	beq	r6,zero,28063a4 <__lshift+0x120>
 280632c:	00800804 	movi	r2,32
 2806330:	1191c83a 	sub	r8,r2,r6
 2806334:	0007883a 	mov	r3,zero
 2806338:	20800017 	ldw	r2,0(r4)
 280633c:	1184983a 	sll	r2,r2,r6
 2806340:	1884b03a 	or	r2,r3,r2
 2806344:	28800015 	stw	r2,0(r5)
 2806348:	20c00017 	ldw	r3,0(r4)
 280634c:	21000104 	addi	r4,r4,4
 2806350:	29400104 	addi	r5,r5,4
 2806354:	1a06d83a 	srl	r3,r3,r8
 2806358:	21fff736 	bltu	r4,r7,2806338 <__lshift+0xb4>
 280635c:	28c00015 	stw	r3,0(r5)
 2806360:	18000126 	beq	r3,zero,2806368 <__lshift+0xe4>
 2806364:	8c400044 	addi	r17,r17,1
 2806368:	88bfffc4 	addi	r2,r17,-1
 280636c:	98800415 	stw	r2,16(r19)
 2806370:	a809883a 	mov	r4,r21
 2806374:	900b883a 	mov	r5,r18
 2806378:	28059400 	call	2805940 <_Bfree>
 280637c:	9805883a 	mov	r2,r19
 2806380:	dfc00617 	ldw	ra,24(sp)
 2806384:	dd400517 	ldw	r21,20(sp)
 2806388:	dd000417 	ldw	r20,16(sp)
 280638c:	dcc00317 	ldw	r19,12(sp)
 2806390:	dc800217 	ldw	r18,8(sp)
 2806394:	dc400117 	ldw	r17,4(sp)
 2806398:	dc000017 	ldw	r16,0(sp)
 280639c:	dec00704 	addi	sp,sp,28
 28063a0:	f800283a 	ret
 28063a4:	20800017 	ldw	r2,0(r4)
 28063a8:	21000104 	addi	r4,r4,4
 28063ac:	28800015 	stw	r2,0(r5)
 28063b0:	29400104 	addi	r5,r5,4
 28063b4:	21ffec2e 	bgeu	r4,r7,2806368 <__lshift+0xe4>
 28063b8:	20800017 	ldw	r2,0(r4)
 28063bc:	21000104 	addi	r4,r4,4
 28063c0:	28800015 	stw	r2,0(r5)
 28063c4:	29400104 	addi	r5,r5,4
 28063c8:	21fff636 	bltu	r4,r7,28063a4 <__lshift+0x120>
 28063cc:	003fe606 	br	2806368 <__lshift+0xe4>

028063d0 <__multiply>:
 28063d0:	defff004 	addi	sp,sp,-64
 28063d4:	dc800815 	stw	r18,32(sp)
 28063d8:	dc400715 	stw	r17,28(sp)
 28063dc:	2c800417 	ldw	r18,16(r5)
 28063e0:	34400417 	ldw	r17,16(r6)
 28063e4:	dcc00915 	stw	r19,36(sp)
 28063e8:	dc000615 	stw	r16,24(sp)
 28063ec:	dfc00f15 	stw	ra,60(sp)
 28063f0:	df000e15 	stw	fp,56(sp)
 28063f4:	ddc00d15 	stw	r23,52(sp)
 28063f8:	dd800c15 	stw	r22,48(sp)
 28063fc:	dd400b15 	stw	r21,44(sp)
 2806400:	dd000a15 	stw	r20,40(sp)
 2806404:	2821883a 	mov	r16,r5
 2806408:	3027883a 	mov	r19,r6
 280640c:	9440040e 	bge	r18,r17,2806420 <__multiply+0x50>
 2806410:	8825883a 	mov	r18,r17
 2806414:	2c400417 	ldw	r17,16(r5)
 2806418:	2827883a 	mov	r19,r5
 280641c:	3021883a 	mov	r16,r6
 2806420:	80800217 	ldw	r2,8(r16)
 2806424:	9447883a 	add	r3,r18,r17
 2806428:	d8c00415 	stw	r3,16(sp)
 280642c:	81400117 	ldw	r5,4(r16)
 2806430:	10c0010e 	bge	r2,r3,2806438 <__multiply+0x68>
 2806434:	29400044 	addi	r5,r5,1
 2806438:	2805ec00 	call	2805ec0 <_Balloc>
 280643c:	d8800515 	stw	r2,20(sp)
 2806440:	d9000417 	ldw	r4,16(sp)
 2806444:	d8c00517 	ldw	r3,20(sp)
 2806448:	2105883a 	add	r2,r4,r4
 280644c:	1085883a 	add	r2,r2,r2
 2806450:	19000504 	addi	r4,r3,20
 2806454:	2085883a 	add	r2,r4,r2
 2806458:	d8800315 	stw	r2,12(sp)
 280645c:	2080052e 	bgeu	r4,r2,2806474 <__multiply+0xa4>
 2806460:	2005883a 	mov	r2,r4
 2806464:	d8c00317 	ldw	r3,12(sp)
 2806468:	10000015 	stw	zero,0(r2)
 280646c:	10800104 	addi	r2,r2,4
 2806470:	10fffc36 	bltu	r2,r3,2806464 <__multiply+0x94>
 2806474:	8c45883a 	add	r2,r17,r17
 2806478:	9487883a 	add	r3,r18,r18
 280647c:	9dc00504 	addi	r23,r19,20
 2806480:	1085883a 	add	r2,r2,r2
 2806484:	84000504 	addi	r16,r16,20
 2806488:	18c7883a 	add	r3,r3,r3
 280648c:	b885883a 	add	r2,r23,r2
 2806490:	dc000015 	stw	r16,0(sp)
 2806494:	d8800215 	stw	r2,8(sp)
 2806498:	80f9883a 	add	fp,r16,r3
 280649c:	b880432e 	bgeu	r23,r2,28065ac <__multiply+0x1dc>
 28064a0:	d9000115 	stw	r4,4(sp)
 28064a4:	b9000017 	ldw	r4,0(r23)
 28064a8:	253fffcc 	andi	r20,r4,65535
 28064ac:	a0001a26 	beq	r20,zero,2806518 <__multiply+0x148>
 28064b0:	dcc00017 	ldw	r19,0(sp)
 28064b4:	dc800117 	ldw	r18,4(sp)
 28064b8:	002b883a 	mov	r21,zero
 28064bc:	9c400017 	ldw	r17,0(r19)
 28064c0:	94000017 	ldw	r16,0(r18)
 28064c4:	a009883a 	mov	r4,r20
 28064c8:	897fffcc 	andi	r5,r17,65535
 28064cc:	28096940 	call	2809694 <__mulsi3>
 28064d0:	880ad43a 	srli	r5,r17,16
 28064d4:	80ffffcc 	andi	r3,r16,65535
 28064d8:	a8c7883a 	add	r3,r21,r3
 28064dc:	a009883a 	mov	r4,r20
 28064e0:	10e3883a 	add	r17,r2,r3
 28064e4:	8020d43a 	srli	r16,r16,16
 28064e8:	28096940 	call	2809694 <__mulsi3>
 28064ec:	8806d43a 	srli	r3,r17,16
 28064f0:	1405883a 	add	r2,r2,r16
 28064f4:	9cc00104 	addi	r19,r19,4
 28064f8:	1887883a 	add	r3,r3,r2
 28064fc:	90c0008d 	sth	r3,2(r18)
 2806500:	9440000d 	sth	r17,0(r18)
 2806504:	182ad43a 	srli	r21,r3,16
 2806508:	94800104 	addi	r18,r18,4
 280650c:	9f3feb36 	bltu	r19,fp,28064bc <__multiply+0xec>
 2806510:	95400015 	stw	r21,0(r18)
 2806514:	b9000017 	ldw	r4,0(r23)
 2806518:	202ad43a 	srli	r21,r4,16
 280651c:	a8001c26 	beq	r21,zero,2806590 <__multiply+0x1c0>
 2806520:	d9000117 	ldw	r4,4(sp)
 2806524:	dd000017 	ldw	r20,0(sp)
 2806528:	002d883a 	mov	r22,zero
 280652c:	24c00017 	ldw	r19,0(r4)
 2806530:	2025883a 	mov	r18,r4
 2806534:	9823883a 	mov	r17,r19
 2806538:	a4000017 	ldw	r16,0(r20)
 280653c:	a809883a 	mov	r4,r21
 2806540:	a5000104 	addi	r20,r20,4
 2806544:	817fffcc 	andi	r5,r16,65535
 2806548:	28096940 	call	2809694 <__mulsi3>
 280654c:	8806d43a 	srli	r3,r17,16
 2806550:	800ad43a 	srli	r5,r16,16
 2806554:	94c0000d 	sth	r19,0(r18)
 2806558:	b0c7883a 	add	r3,r22,r3
 280655c:	10e1883a 	add	r16,r2,r3
 2806560:	9400008d 	sth	r16,2(r18)
 2806564:	a809883a 	mov	r4,r21
 2806568:	94800104 	addi	r18,r18,4
 280656c:	28096940 	call	2809694 <__mulsi3>
 2806570:	94400017 	ldw	r17,0(r18)
 2806574:	8020d43a 	srli	r16,r16,16
 2806578:	88ffffcc 	andi	r3,r17,65535
 280657c:	10c5883a 	add	r2,r2,r3
 2806580:	80a7883a 	add	r19,r16,r2
 2806584:	982cd43a 	srli	r22,r19,16
 2806588:	a73feb36 	bltu	r20,fp,2806538 <__multiply+0x168>
 280658c:	94c00015 	stw	r19,0(r18)
 2806590:	d8800217 	ldw	r2,8(sp)
 2806594:	bdc00104 	addi	r23,r23,4
 2806598:	b880042e 	bgeu	r23,r2,28065ac <__multiply+0x1dc>
 280659c:	d8c00117 	ldw	r3,4(sp)
 28065a0:	18c00104 	addi	r3,r3,4
 28065a4:	d8c00115 	stw	r3,4(sp)
 28065a8:	003fbe06 	br	28064a4 <__multiply+0xd4>
 28065ac:	d9000417 	ldw	r4,16(sp)
 28065b0:	01000c0e 	bge	zero,r4,28065e4 <__multiply+0x214>
 28065b4:	d8c00317 	ldw	r3,12(sp)
 28065b8:	18bfff17 	ldw	r2,-4(r3)
 28065bc:	18ffff04 	addi	r3,r3,-4
 28065c0:	10000326 	beq	r2,zero,28065d0 <__multiply+0x200>
 28065c4:	00000706 	br	28065e4 <__multiply+0x214>
 28065c8:	18800017 	ldw	r2,0(r3)
 28065cc:	1000051e 	bne	r2,zero,28065e4 <__multiply+0x214>
 28065d0:	d9000417 	ldw	r4,16(sp)
 28065d4:	18ffff04 	addi	r3,r3,-4
 28065d8:	213fffc4 	addi	r4,r4,-1
 28065dc:	d9000415 	stw	r4,16(sp)
 28065e0:	203ff91e 	bne	r4,zero,28065c8 <__multiply+0x1f8>
 28065e4:	d8800417 	ldw	r2,16(sp)
 28065e8:	d8c00517 	ldw	r3,20(sp)
 28065ec:	18800415 	stw	r2,16(r3)
 28065f0:	1805883a 	mov	r2,r3
 28065f4:	dfc00f17 	ldw	ra,60(sp)
 28065f8:	df000e17 	ldw	fp,56(sp)
 28065fc:	ddc00d17 	ldw	r23,52(sp)
 2806600:	dd800c17 	ldw	r22,48(sp)
 2806604:	dd400b17 	ldw	r21,44(sp)
 2806608:	dd000a17 	ldw	r20,40(sp)
 280660c:	dcc00917 	ldw	r19,36(sp)
 2806610:	dc800817 	ldw	r18,32(sp)
 2806614:	dc400717 	ldw	r17,28(sp)
 2806618:	dc000617 	ldw	r16,24(sp)
 280661c:	dec01004 	addi	sp,sp,64
 2806620:	f800283a 	ret

02806624 <__i2b>:
 2806624:	defffd04 	addi	sp,sp,-12
 2806628:	dc000015 	stw	r16,0(sp)
 280662c:	04000044 	movi	r16,1
 2806630:	dc800115 	stw	r18,4(sp)
 2806634:	2825883a 	mov	r18,r5
 2806638:	800b883a 	mov	r5,r16
 280663c:	dfc00215 	stw	ra,8(sp)
 2806640:	2805ec00 	call	2805ec0 <_Balloc>
 2806644:	14000415 	stw	r16,16(r2)
 2806648:	14800515 	stw	r18,20(r2)
 280664c:	dfc00217 	ldw	ra,8(sp)
 2806650:	dc800117 	ldw	r18,4(sp)
 2806654:	dc000017 	ldw	r16,0(sp)
 2806658:	dec00304 	addi	sp,sp,12
 280665c:	f800283a 	ret

02806660 <__multadd>:
 2806660:	defff604 	addi	sp,sp,-40
 2806664:	dd800615 	stw	r22,24(sp)
 2806668:	2d800417 	ldw	r22,16(r5)
 280666c:	df000815 	stw	fp,32(sp)
 2806670:	ddc00715 	stw	r23,28(sp)
 2806674:	dd400515 	stw	r21,20(sp)
 2806678:	dd000415 	stw	r20,16(sp)
 280667c:	dcc00315 	stw	r19,12(sp)
 2806680:	dc800215 	stw	r18,8(sp)
 2806684:	dfc00915 	stw	ra,36(sp)
 2806688:	dc400115 	stw	r17,4(sp)
 280668c:	dc000015 	stw	r16,0(sp)
 2806690:	282f883a 	mov	r23,r5
 2806694:	2039883a 	mov	fp,r4
 2806698:	302b883a 	mov	r21,r6
 280669c:	3829883a 	mov	r20,r7
 28066a0:	2c800504 	addi	r18,r5,20
 28066a4:	0027883a 	mov	r19,zero
 28066a8:	94400017 	ldw	r17,0(r18)
 28066ac:	a80b883a 	mov	r5,r21
 28066b0:	9cc00044 	addi	r19,r19,1
 28066b4:	893fffcc 	andi	r4,r17,65535
 28066b8:	28096940 	call	2809694 <__mulsi3>
 28066bc:	8808d43a 	srli	r4,r17,16
 28066c0:	1521883a 	add	r16,r2,r20
 28066c4:	a80b883a 	mov	r5,r21
 28066c8:	28096940 	call	2809694 <__mulsi3>
 28066cc:	8008d43a 	srli	r4,r16,16
 28066d0:	843fffcc 	andi	r16,r16,65535
 28066d4:	1105883a 	add	r2,r2,r4
 28066d8:	1006943a 	slli	r3,r2,16
 28066dc:	1028d43a 	srli	r20,r2,16
 28066e0:	1c07883a 	add	r3,r3,r16
 28066e4:	90c00015 	stw	r3,0(r18)
 28066e8:	94800104 	addi	r18,r18,4
 28066ec:	9dbfee16 	blt	r19,r22,28066a8 <__multadd+0x48>
 28066f0:	a0000826 	beq	r20,zero,2806714 <__multadd+0xb4>
 28066f4:	b8800217 	ldw	r2,8(r23)
 28066f8:	b080130e 	bge	r22,r2,2806748 <__multadd+0xe8>
 28066fc:	b585883a 	add	r2,r22,r22
 2806700:	1085883a 	add	r2,r2,r2
 2806704:	15c5883a 	add	r2,r2,r23
 2806708:	b0c00044 	addi	r3,r22,1
 280670c:	15000515 	stw	r20,20(r2)
 2806710:	b8c00415 	stw	r3,16(r23)
 2806714:	b805883a 	mov	r2,r23
 2806718:	dfc00917 	ldw	ra,36(sp)
 280671c:	df000817 	ldw	fp,32(sp)
 2806720:	ddc00717 	ldw	r23,28(sp)
 2806724:	dd800617 	ldw	r22,24(sp)
 2806728:	dd400517 	ldw	r21,20(sp)
 280672c:	dd000417 	ldw	r20,16(sp)
 2806730:	dcc00317 	ldw	r19,12(sp)
 2806734:	dc800217 	ldw	r18,8(sp)
 2806738:	dc400117 	ldw	r17,4(sp)
 280673c:	dc000017 	ldw	r16,0(sp)
 2806740:	dec00a04 	addi	sp,sp,40
 2806744:	f800283a 	ret
 2806748:	b9400117 	ldw	r5,4(r23)
 280674c:	e009883a 	mov	r4,fp
 2806750:	29400044 	addi	r5,r5,1
 2806754:	2805ec00 	call	2805ec0 <_Balloc>
 2806758:	b9800417 	ldw	r6,16(r23)
 280675c:	b9400304 	addi	r5,r23,12
 2806760:	11000304 	addi	r4,r2,12
 2806764:	318d883a 	add	r6,r6,r6
 2806768:	318d883a 	add	r6,r6,r6
 280676c:	31800204 	addi	r6,r6,8
 2806770:	1023883a 	mov	r17,r2
 2806774:	28057280 	call	2805728 <memcpy>
 2806778:	b80b883a 	mov	r5,r23
 280677c:	e009883a 	mov	r4,fp
 2806780:	28059400 	call	2805940 <_Bfree>
 2806784:	882f883a 	mov	r23,r17
 2806788:	003fdc06 	br	28066fc <__multadd+0x9c>

0280678c <__pow5mult>:
 280678c:	defffa04 	addi	sp,sp,-24
 2806790:	308000cc 	andi	r2,r6,3
 2806794:	dd000415 	stw	r20,16(sp)
 2806798:	dcc00315 	stw	r19,12(sp)
 280679c:	dc000015 	stw	r16,0(sp)
 28067a0:	dfc00515 	stw	ra,20(sp)
 28067a4:	dc800215 	stw	r18,8(sp)
 28067a8:	dc400115 	stw	r17,4(sp)
 28067ac:	3021883a 	mov	r16,r6
 28067b0:	2027883a 	mov	r19,r4
 28067b4:	2829883a 	mov	r20,r5
 28067b8:	10002b1e 	bne	r2,zero,2806868 <__pow5mult+0xdc>
 28067bc:	8025d0ba 	srai	r18,r16,2
 28067c0:	90001b26 	beq	r18,zero,2806830 <__pow5mult+0xa4>
 28067c4:	9c001217 	ldw	r16,72(r19)
 28067c8:	8000081e 	bne	r16,zero,28067ec <__pow5mult+0x60>
 28067cc:	00003006 	br	2806890 <__pow5mult+0x104>
 28067d0:	800b883a 	mov	r5,r16
 28067d4:	800d883a 	mov	r6,r16
 28067d8:	9809883a 	mov	r4,r19
 28067dc:	90001426 	beq	r18,zero,2806830 <__pow5mult+0xa4>
 28067e0:	80800017 	ldw	r2,0(r16)
 28067e4:	10001b26 	beq	r2,zero,2806854 <__pow5mult+0xc8>
 28067e8:	1021883a 	mov	r16,r2
 28067ec:	9080004c 	andi	r2,r18,1
 28067f0:	1005003a 	cmpeq	r2,r2,zero
 28067f4:	9025d07a 	srai	r18,r18,1
 28067f8:	800d883a 	mov	r6,r16
 28067fc:	9809883a 	mov	r4,r19
 2806800:	a00b883a 	mov	r5,r20
 2806804:	103ff21e 	bne	r2,zero,28067d0 <__pow5mult+0x44>
 2806808:	28063d00 	call	28063d0 <__multiply>
 280680c:	a00b883a 	mov	r5,r20
 2806810:	9809883a 	mov	r4,r19
 2806814:	1023883a 	mov	r17,r2
 2806818:	28059400 	call	2805940 <_Bfree>
 280681c:	8829883a 	mov	r20,r17
 2806820:	800b883a 	mov	r5,r16
 2806824:	800d883a 	mov	r6,r16
 2806828:	9809883a 	mov	r4,r19
 280682c:	903fec1e 	bne	r18,zero,28067e0 <__pow5mult+0x54>
 2806830:	a005883a 	mov	r2,r20
 2806834:	dfc00517 	ldw	ra,20(sp)
 2806838:	dd000417 	ldw	r20,16(sp)
 280683c:	dcc00317 	ldw	r19,12(sp)
 2806840:	dc800217 	ldw	r18,8(sp)
 2806844:	dc400117 	ldw	r17,4(sp)
 2806848:	dc000017 	ldw	r16,0(sp)
 280684c:	dec00604 	addi	sp,sp,24
 2806850:	f800283a 	ret
 2806854:	28063d00 	call	28063d0 <__multiply>
 2806858:	80800015 	stw	r2,0(r16)
 280685c:	1021883a 	mov	r16,r2
 2806860:	10000015 	stw	zero,0(r2)
 2806864:	003fe106 	br	28067ec <__pow5mult+0x60>
 2806868:	1085883a 	add	r2,r2,r2
 280686c:	00c0a074 	movhi	r3,641
 2806870:	18f62604 	addi	r3,r3,-10088
 2806874:	1085883a 	add	r2,r2,r2
 2806878:	10c5883a 	add	r2,r2,r3
 280687c:	11bfff17 	ldw	r6,-4(r2)
 2806880:	000f883a 	mov	r7,zero
 2806884:	28066600 	call	2806660 <__multadd>
 2806888:	1029883a 	mov	r20,r2
 280688c:	003fcb06 	br	28067bc <__pow5mult+0x30>
 2806890:	9809883a 	mov	r4,r19
 2806894:	01409c44 	movi	r5,625
 2806898:	28066240 	call	2806624 <__i2b>
 280689c:	98801215 	stw	r2,72(r19)
 28068a0:	1021883a 	mov	r16,r2
 28068a4:	10000015 	stw	zero,0(r2)
 28068a8:	003fd006 	br	28067ec <__pow5mult+0x60>

028068ac <__s2b>:
 28068ac:	defff904 	addi	sp,sp,-28
 28068b0:	dcc00315 	stw	r19,12(sp)
 28068b4:	dc800215 	stw	r18,8(sp)
 28068b8:	2827883a 	mov	r19,r5
 28068bc:	2025883a 	mov	r18,r4
 28068c0:	01400244 	movi	r5,9
 28068c4:	39000204 	addi	r4,r7,8
 28068c8:	dd000415 	stw	r20,16(sp)
 28068cc:	dc400115 	stw	r17,4(sp)
 28068d0:	dfc00615 	stw	ra,24(sp)
 28068d4:	dd400515 	stw	r21,20(sp)
 28068d8:	dc000015 	stw	r16,0(sp)
 28068dc:	3829883a 	mov	r20,r7
 28068e0:	3023883a 	mov	r17,r6
 28068e4:	28095c40 	call	28095c4 <__divsi3>
 28068e8:	00c00044 	movi	r3,1
 28068ec:	1880350e 	bge	r3,r2,28069c4 <__s2b+0x118>
 28068f0:	000b883a 	mov	r5,zero
 28068f4:	18c7883a 	add	r3,r3,r3
 28068f8:	29400044 	addi	r5,r5,1
 28068fc:	18bffd16 	blt	r3,r2,28068f4 <__s2b+0x48>
 2806900:	9009883a 	mov	r4,r18
 2806904:	2805ec00 	call	2805ec0 <_Balloc>
 2806908:	1011883a 	mov	r8,r2
 280690c:	d8800717 	ldw	r2,28(sp)
 2806910:	00c00044 	movi	r3,1
 2806914:	01800244 	movi	r6,9
 2806918:	40800515 	stw	r2,20(r8)
 280691c:	40c00415 	stw	r3,16(r8)
 2806920:	3440260e 	bge	r6,r17,28069bc <__s2b+0x110>
 2806924:	3021883a 	mov	r16,r6
 2806928:	99ab883a 	add	r21,r19,r6
 280692c:	9c05883a 	add	r2,r19,r16
 2806930:	11c00007 	ldb	r7,0(r2)
 2806934:	400b883a 	mov	r5,r8
 2806938:	9009883a 	mov	r4,r18
 280693c:	39fff404 	addi	r7,r7,-48
 2806940:	01800284 	movi	r6,10
 2806944:	28066600 	call	2806660 <__multadd>
 2806948:	84000044 	addi	r16,r16,1
 280694c:	1011883a 	mov	r8,r2
 2806950:	8c3ff61e 	bne	r17,r16,280692c <__s2b+0x80>
 2806954:	ac45883a 	add	r2,r21,r17
 2806958:	117ffe04 	addi	r5,r2,-8
 280695c:	880d883a 	mov	r6,r17
 2806960:	35000c0e 	bge	r6,r20,2806994 <__s2b+0xe8>
 2806964:	a185c83a 	sub	r2,r20,r6
 2806968:	2821883a 	mov	r16,r5
 280696c:	28a3883a 	add	r17,r5,r2
 2806970:	81c00007 	ldb	r7,0(r16)
 2806974:	400b883a 	mov	r5,r8
 2806978:	9009883a 	mov	r4,r18
 280697c:	39fff404 	addi	r7,r7,-48
 2806980:	01800284 	movi	r6,10
 2806984:	28066600 	call	2806660 <__multadd>
 2806988:	84000044 	addi	r16,r16,1
 280698c:	1011883a 	mov	r8,r2
 2806990:	847ff71e 	bne	r16,r17,2806970 <__s2b+0xc4>
 2806994:	4005883a 	mov	r2,r8
 2806998:	dfc00617 	ldw	ra,24(sp)
 280699c:	dd400517 	ldw	r21,20(sp)
 28069a0:	dd000417 	ldw	r20,16(sp)
 28069a4:	dcc00317 	ldw	r19,12(sp)
 28069a8:	dc800217 	ldw	r18,8(sp)
 28069ac:	dc400117 	ldw	r17,4(sp)
 28069b0:	dc000017 	ldw	r16,0(sp)
 28069b4:	dec00704 	addi	sp,sp,28
 28069b8:	f800283a 	ret
 28069bc:	99400284 	addi	r5,r19,10
 28069c0:	003fe706 	br	2806960 <__s2b+0xb4>
 28069c4:	000b883a 	mov	r5,zero
 28069c8:	003fcd06 	br	2806900 <__s2b+0x54>

028069cc <_realloc_r>:
 28069cc:	defff404 	addi	sp,sp,-48
 28069d0:	dd800815 	stw	r22,32(sp)
 28069d4:	dc800415 	stw	r18,16(sp)
 28069d8:	dc400315 	stw	r17,12(sp)
 28069dc:	dfc00b15 	stw	ra,44(sp)
 28069e0:	df000a15 	stw	fp,40(sp)
 28069e4:	ddc00915 	stw	r23,36(sp)
 28069e8:	dd400715 	stw	r21,28(sp)
 28069ec:	dd000615 	stw	r20,24(sp)
 28069f0:	dcc00515 	stw	r19,20(sp)
 28069f4:	dc000215 	stw	r16,8(sp)
 28069f8:	2825883a 	mov	r18,r5
 28069fc:	3023883a 	mov	r17,r6
 2806a00:	202d883a 	mov	r22,r4
 2806a04:	2800c926 	beq	r5,zero,2806d2c <_realloc_r+0x360>
 2806a08:	280a4180 	call	280a418 <__malloc_lock>
 2806a0c:	943ffe04 	addi	r16,r18,-8
 2806a10:	88c002c4 	addi	r3,r17,11
 2806a14:	00800584 	movi	r2,22
 2806a18:	82000117 	ldw	r8,4(r16)
 2806a1c:	10c01b2e 	bgeu	r2,r3,2806a8c <_realloc_r+0xc0>
 2806a20:	00bffe04 	movi	r2,-8
 2806a24:	188e703a 	and	r7,r3,r2
 2806a28:	3839883a 	mov	fp,r7
 2806a2c:	38001a16 	blt	r7,zero,2806a98 <_realloc_r+0xcc>
 2806a30:	e4401936 	bltu	fp,r17,2806a98 <_realloc_r+0xcc>
 2806a34:	013fff04 	movi	r4,-4
 2806a38:	4126703a 	and	r19,r8,r4
 2806a3c:	99c02616 	blt	r19,r7,2806ad8 <_realloc_r+0x10c>
 2806a40:	802b883a 	mov	r21,r16
 2806a44:	9829883a 	mov	r20,r19
 2806a48:	84000204 	addi	r16,r16,8
 2806a4c:	a80f883a 	mov	r7,r21
 2806a50:	a70dc83a 	sub	r6,r20,fp
 2806a54:	008003c4 	movi	r2,15
 2806a58:	1180c136 	bltu	r2,r6,2806d60 <_realloc_r+0x394>
 2806a5c:	38800117 	ldw	r2,4(r7)
 2806a60:	a549883a 	add	r4,r20,r21
 2806a64:	1080004c 	andi	r2,r2,1
 2806a68:	a084b03a 	or	r2,r20,r2
 2806a6c:	38800115 	stw	r2,4(r7)
 2806a70:	20c00117 	ldw	r3,4(r4)
 2806a74:	18c00054 	ori	r3,r3,1
 2806a78:	20c00115 	stw	r3,4(r4)
 2806a7c:	b009883a 	mov	r4,r22
 2806a80:	280a4380 	call	280a438 <__malloc_unlock>
 2806a84:	8023883a 	mov	r17,r16
 2806a88:	00000606 	br	2806aa4 <_realloc_r+0xd8>
 2806a8c:	01c00404 	movi	r7,16
 2806a90:	3839883a 	mov	fp,r7
 2806a94:	e47fe72e 	bgeu	fp,r17,2806a34 <_realloc_r+0x68>
 2806a98:	00800304 	movi	r2,12
 2806a9c:	0023883a 	mov	r17,zero
 2806aa0:	b0800015 	stw	r2,0(r22)
 2806aa4:	8805883a 	mov	r2,r17
 2806aa8:	dfc00b17 	ldw	ra,44(sp)
 2806aac:	df000a17 	ldw	fp,40(sp)
 2806ab0:	ddc00917 	ldw	r23,36(sp)
 2806ab4:	dd800817 	ldw	r22,32(sp)
 2806ab8:	dd400717 	ldw	r21,28(sp)
 2806abc:	dd000617 	ldw	r20,24(sp)
 2806ac0:	dcc00517 	ldw	r19,20(sp)
 2806ac4:	dc800417 	ldw	r18,16(sp)
 2806ac8:	dc400317 	ldw	r17,12(sp)
 2806acc:	dc000217 	ldw	r16,8(sp)
 2806ad0:	dec00c04 	addi	sp,sp,48
 2806ad4:	f800283a 	ret
 2806ad8:	0080a074 	movhi	r2,641
 2806adc:	10b77f04 	addi	r2,r2,-8708
 2806ae0:	12400217 	ldw	r9,8(r2)
 2806ae4:	84cd883a 	add	r6,r16,r19
 2806ae8:	802b883a 	mov	r21,r16
 2806aec:	3240b926 	beq	r6,r9,2806dd4 <_realloc_r+0x408>
 2806af0:	31400117 	ldw	r5,4(r6)
 2806af4:	00bfff84 	movi	r2,-2
 2806af8:	2884703a 	and	r2,r5,r2
 2806afc:	1185883a 	add	r2,r2,r6
 2806b00:	10c00117 	ldw	r3,4(r2)
 2806b04:	18c0004c 	andi	r3,r3,1
 2806b08:	1807003a 	cmpeq	r3,r3,zero
 2806b0c:	1800a326 	beq	r3,zero,2806d9c <_realloc_r+0x3d0>
 2806b10:	2908703a 	and	r4,r5,r4
 2806b14:	9929883a 	add	r20,r19,r4
 2806b18:	a1c0a30e 	bge	r20,r7,2806da8 <_realloc_r+0x3dc>
 2806b1c:	4080004c 	andi	r2,r8,1
 2806b20:	1000551e 	bne	r2,zero,2806c78 <_realloc_r+0x2ac>
 2806b24:	80800017 	ldw	r2,0(r16)
 2806b28:	80afc83a 	sub	r23,r16,r2
 2806b2c:	b8c00117 	ldw	r3,4(r23)
 2806b30:	00bfff04 	movi	r2,-4
 2806b34:	1884703a 	and	r2,r3,r2
 2806b38:	30002e26 	beq	r6,zero,2806bf4 <_realloc_r+0x228>
 2806b3c:	3240b926 	beq	r6,r9,2806e24 <_realloc_r+0x458>
 2806b40:	98a9883a 	add	r20,r19,r2
 2806b44:	2509883a 	add	r4,r4,r20
 2806b48:	d9000015 	stw	r4,0(sp)
 2806b4c:	21c02a16 	blt	r4,r7,2806bf8 <_realloc_r+0x22c>
 2806b50:	30800317 	ldw	r2,12(r6)
 2806b54:	30c00217 	ldw	r3,8(r6)
 2806b58:	01400904 	movi	r5,36
 2806b5c:	99bfff04 	addi	r6,r19,-4
 2806b60:	18800315 	stw	r2,12(r3)
 2806b64:	10c00215 	stw	r3,8(r2)
 2806b68:	b9000317 	ldw	r4,12(r23)
 2806b6c:	b8800217 	ldw	r2,8(r23)
 2806b70:	b82b883a 	mov	r21,r23
 2806b74:	bc000204 	addi	r16,r23,8
 2806b78:	20800215 	stw	r2,8(r4)
 2806b7c:	11000315 	stw	r4,12(r2)
 2806b80:	2980e436 	bltu	r5,r6,2806f14 <_realloc_r+0x548>
 2806b84:	008004c4 	movi	r2,19
 2806b88:	9009883a 	mov	r4,r18
 2806b8c:	8011883a 	mov	r8,r16
 2806b90:	11800f2e 	bgeu	r2,r6,2806bd0 <_realloc_r+0x204>
 2806b94:	90800017 	ldw	r2,0(r18)
 2806b98:	ba000404 	addi	r8,r23,16
 2806b9c:	91000204 	addi	r4,r18,8
 2806ba0:	b8800215 	stw	r2,8(r23)
 2806ba4:	90c00117 	ldw	r3,4(r18)
 2806ba8:	008006c4 	movi	r2,27
 2806bac:	b8c00315 	stw	r3,12(r23)
 2806bb0:	1180072e 	bgeu	r2,r6,2806bd0 <_realloc_r+0x204>
 2806bb4:	90c00217 	ldw	r3,8(r18)
 2806bb8:	ba000604 	addi	r8,r23,24
 2806bbc:	91000404 	addi	r4,r18,16
 2806bc0:	b8c00415 	stw	r3,16(r23)
 2806bc4:	90800317 	ldw	r2,12(r18)
 2806bc8:	b8800515 	stw	r2,20(r23)
 2806bcc:	3140e726 	beq	r6,r5,2806f6c <_realloc_r+0x5a0>
 2806bd0:	20800017 	ldw	r2,0(r4)
 2806bd4:	dd000017 	ldw	r20,0(sp)
 2806bd8:	b80f883a 	mov	r7,r23
 2806bdc:	40800015 	stw	r2,0(r8)
 2806be0:	20c00117 	ldw	r3,4(r4)
 2806be4:	40c00115 	stw	r3,4(r8)
 2806be8:	20800217 	ldw	r2,8(r4)
 2806bec:	40800215 	stw	r2,8(r8)
 2806bf0:	003f9706 	br	2806a50 <_realloc_r+0x84>
 2806bf4:	98a9883a 	add	r20,r19,r2
 2806bf8:	a1c01f16 	blt	r20,r7,2806c78 <_realloc_r+0x2ac>
 2806bfc:	b8c00317 	ldw	r3,12(r23)
 2806c00:	b8800217 	ldw	r2,8(r23)
 2806c04:	99bfff04 	addi	r6,r19,-4
 2806c08:	01400904 	movi	r5,36
 2806c0c:	b82b883a 	mov	r21,r23
 2806c10:	18800215 	stw	r2,8(r3)
 2806c14:	10c00315 	stw	r3,12(r2)
 2806c18:	bc000204 	addi	r16,r23,8
 2806c1c:	2980c336 	bltu	r5,r6,2806f2c <_realloc_r+0x560>
 2806c20:	008004c4 	movi	r2,19
 2806c24:	9009883a 	mov	r4,r18
 2806c28:	8011883a 	mov	r8,r16
 2806c2c:	11800f2e 	bgeu	r2,r6,2806c6c <_realloc_r+0x2a0>
 2806c30:	90800017 	ldw	r2,0(r18)
 2806c34:	ba000404 	addi	r8,r23,16
 2806c38:	91000204 	addi	r4,r18,8
 2806c3c:	b8800215 	stw	r2,8(r23)
 2806c40:	90c00117 	ldw	r3,4(r18)
 2806c44:	008006c4 	movi	r2,27
 2806c48:	b8c00315 	stw	r3,12(r23)
 2806c4c:	1180072e 	bgeu	r2,r6,2806c6c <_realloc_r+0x2a0>
 2806c50:	90c00217 	ldw	r3,8(r18)
 2806c54:	ba000604 	addi	r8,r23,24
 2806c58:	91000404 	addi	r4,r18,16
 2806c5c:	b8c00415 	stw	r3,16(r23)
 2806c60:	90800317 	ldw	r2,12(r18)
 2806c64:	b8800515 	stw	r2,20(r23)
 2806c68:	3140c726 	beq	r6,r5,2806f88 <_realloc_r+0x5bc>
 2806c6c:	20800017 	ldw	r2,0(r4)
 2806c70:	b80f883a 	mov	r7,r23
 2806c74:	003fd906 	br	2806bdc <_realloc_r+0x210>
 2806c78:	880b883a 	mov	r5,r17
 2806c7c:	b009883a 	mov	r4,r22
 2806c80:	2804f040 	call	2804f04 <_malloc_r>
 2806c84:	1023883a 	mov	r17,r2
 2806c88:	10002526 	beq	r2,zero,2806d20 <_realloc_r+0x354>
 2806c8c:	80800117 	ldw	r2,4(r16)
 2806c90:	00ffff84 	movi	r3,-2
 2806c94:	893ffe04 	addi	r4,r17,-8
 2806c98:	10c4703a 	and	r2,r2,r3
 2806c9c:	8085883a 	add	r2,r16,r2
 2806ca0:	20809526 	beq	r4,r2,2806ef8 <_realloc_r+0x52c>
 2806ca4:	99bfff04 	addi	r6,r19,-4
 2806ca8:	01c00904 	movi	r7,36
 2806cac:	39804536 	bltu	r7,r6,2806dc4 <_realloc_r+0x3f8>
 2806cb0:	008004c4 	movi	r2,19
 2806cb4:	9009883a 	mov	r4,r18
 2806cb8:	880b883a 	mov	r5,r17
 2806cbc:	11800f2e 	bgeu	r2,r6,2806cfc <_realloc_r+0x330>
 2806cc0:	90800017 	ldw	r2,0(r18)
 2806cc4:	89400204 	addi	r5,r17,8
 2806cc8:	91000204 	addi	r4,r18,8
 2806ccc:	88800015 	stw	r2,0(r17)
 2806cd0:	90c00117 	ldw	r3,4(r18)
 2806cd4:	008006c4 	movi	r2,27
 2806cd8:	88c00115 	stw	r3,4(r17)
 2806cdc:	1180072e 	bgeu	r2,r6,2806cfc <_realloc_r+0x330>
 2806ce0:	90c00217 	ldw	r3,8(r18)
 2806ce4:	89400404 	addi	r5,r17,16
 2806ce8:	91000404 	addi	r4,r18,16
 2806cec:	88c00215 	stw	r3,8(r17)
 2806cf0:	90800317 	ldw	r2,12(r18)
 2806cf4:	88800315 	stw	r2,12(r17)
 2806cf8:	31c09126 	beq	r6,r7,2806f40 <_realloc_r+0x574>
 2806cfc:	20800017 	ldw	r2,0(r4)
 2806d00:	28800015 	stw	r2,0(r5)
 2806d04:	20c00117 	ldw	r3,4(r4)
 2806d08:	28c00115 	stw	r3,4(r5)
 2806d0c:	20800217 	ldw	r2,8(r4)
 2806d10:	28800215 	stw	r2,8(r5)
 2806d14:	900b883a 	mov	r5,r18
 2806d18:	b009883a 	mov	r4,r22
 2806d1c:	280437c0 	call	280437c <_free_r>
 2806d20:	b009883a 	mov	r4,r22
 2806d24:	280a4380 	call	280a438 <__malloc_unlock>
 2806d28:	003f5e06 	br	2806aa4 <_realloc_r+0xd8>
 2806d2c:	300b883a 	mov	r5,r6
 2806d30:	dfc00b17 	ldw	ra,44(sp)
 2806d34:	df000a17 	ldw	fp,40(sp)
 2806d38:	ddc00917 	ldw	r23,36(sp)
 2806d3c:	dd800817 	ldw	r22,32(sp)
 2806d40:	dd400717 	ldw	r21,28(sp)
 2806d44:	dd000617 	ldw	r20,24(sp)
 2806d48:	dcc00517 	ldw	r19,20(sp)
 2806d4c:	dc800417 	ldw	r18,16(sp)
 2806d50:	dc400317 	ldw	r17,12(sp)
 2806d54:	dc000217 	ldw	r16,8(sp)
 2806d58:	dec00c04 	addi	sp,sp,48
 2806d5c:	2804f041 	jmpi	2804f04 <_malloc_r>
 2806d60:	38800117 	ldw	r2,4(r7)
 2806d64:	e54b883a 	add	r5,fp,r21
 2806d68:	31000054 	ori	r4,r6,1
 2806d6c:	1080004c 	andi	r2,r2,1
 2806d70:	1704b03a 	or	r2,r2,fp
 2806d74:	38800115 	stw	r2,4(r7)
 2806d78:	29000115 	stw	r4,4(r5)
 2806d7c:	2987883a 	add	r3,r5,r6
 2806d80:	18800117 	ldw	r2,4(r3)
 2806d84:	29400204 	addi	r5,r5,8
 2806d88:	b009883a 	mov	r4,r22
 2806d8c:	10800054 	ori	r2,r2,1
 2806d90:	18800115 	stw	r2,4(r3)
 2806d94:	280437c0 	call	280437c <_free_r>
 2806d98:	003f3806 	br	2806a7c <_realloc_r+0xb0>
 2806d9c:	000d883a 	mov	r6,zero
 2806da0:	0009883a 	mov	r4,zero
 2806da4:	003f5d06 	br	2806b1c <_realloc_r+0x150>
 2806da8:	30c00217 	ldw	r3,8(r6)
 2806dac:	30800317 	ldw	r2,12(r6)
 2806db0:	800f883a 	mov	r7,r16
 2806db4:	84000204 	addi	r16,r16,8
 2806db8:	10c00215 	stw	r3,8(r2)
 2806dbc:	18800315 	stw	r2,12(r3)
 2806dc0:	003f2306 	br	2806a50 <_realloc_r+0x84>
 2806dc4:	8809883a 	mov	r4,r17
 2806dc8:	900b883a 	mov	r5,r18
 2806dcc:	28057c80 	call	28057c8 <memmove>
 2806dd0:	003fd006 	br	2806d14 <_realloc_r+0x348>
 2806dd4:	30800117 	ldw	r2,4(r6)
 2806dd8:	e0c00404 	addi	r3,fp,16
 2806ddc:	1108703a 	and	r4,r2,r4
 2806de0:	9905883a 	add	r2,r19,r4
 2806de4:	10ff4d16 	blt	r2,r3,2806b1c <_realloc_r+0x150>
 2806de8:	1705c83a 	sub	r2,r2,fp
 2806dec:	870b883a 	add	r5,r16,fp
 2806df0:	10800054 	ori	r2,r2,1
 2806df4:	28800115 	stw	r2,4(r5)
 2806df8:	80c00117 	ldw	r3,4(r16)
 2806dfc:	0080a074 	movhi	r2,641
 2806e00:	10b77f04 	addi	r2,r2,-8708
 2806e04:	b009883a 	mov	r4,r22
 2806e08:	18c0004c 	andi	r3,r3,1
 2806e0c:	e0c6b03a 	or	r3,fp,r3
 2806e10:	11400215 	stw	r5,8(r2)
 2806e14:	80c00115 	stw	r3,4(r16)
 2806e18:	280a4380 	call	280a438 <__malloc_unlock>
 2806e1c:	84400204 	addi	r17,r16,8
 2806e20:	003f2006 	br	2806aa4 <_realloc_r+0xd8>
 2806e24:	98a9883a 	add	r20,r19,r2
 2806e28:	2509883a 	add	r4,r4,r20
 2806e2c:	e0800404 	addi	r2,fp,16
 2806e30:	d9000115 	stw	r4,4(sp)
 2806e34:	20bf7016 	blt	r4,r2,2806bf8 <_realloc_r+0x22c>
 2806e38:	b8c00317 	ldw	r3,12(r23)
 2806e3c:	b8800217 	ldw	r2,8(r23)
 2806e40:	99bfff04 	addi	r6,r19,-4
 2806e44:	01400904 	movi	r5,36
 2806e48:	18800215 	stw	r2,8(r3)
 2806e4c:	10c00315 	stw	r3,12(r2)
 2806e50:	bc400204 	addi	r17,r23,8
 2806e54:	29804136 	bltu	r5,r6,2806f5c <_realloc_r+0x590>
 2806e58:	008004c4 	movi	r2,19
 2806e5c:	9009883a 	mov	r4,r18
 2806e60:	880f883a 	mov	r7,r17
 2806e64:	11800f2e 	bgeu	r2,r6,2806ea4 <_realloc_r+0x4d8>
 2806e68:	90800017 	ldw	r2,0(r18)
 2806e6c:	b9c00404 	addi	r7,r23,16
 2806e70:	91000204 	addi	r4,r18,8
 2806e74:	b8800215 	stw	r2,8(r23)
 2806e78:	90c00117 	ldw	r3,4(r18)
 2806e7c:	008006c4 	movi	r2,27
 2806e80:	b8c00315 	stw	r3,12(r23)
 2806e84:	1180072e 	bgeu	r2,r6,2806ea4 <_realloc_r+0x4d8>
 2806e88:	90c00217 	ldw	r3,8(r18)
 2806e8c:	b9c00604 	addi	r7,r23,24
 2806e90:	91000404 	addi	r4,r18,16
 2806e94:	b8c00415 	stw	r3,16(r23)
 2806e98:	90800317 	ldw	r2,12(r18)
 2806e9c:	b8800515 	stw	r2,20(r23)
 2806ea0:	31404026 	beq	r6,r5,2806fa4 <_realloc_r+0x5d8>
 2806ea4:	20800017 	ldw	r2,0(r4)
 2806ea8:	38800015 	stw	r2,0(r7)
 2806eac:	20c00117 	ldw	r3,4(r4)
 2806eb0:	38c00115 	stw	r3,4(r7)
 2806eb4:	20800217 	ldw	r2,8(r4)
 2806eb8:	38800215 	stw	r2,8(r7)
 2806ebc:	d8c00117 	ldw	r3,4(sp)
 2806ec0:	bf0b883a 	add	r5,r23,fp
 2806ec4:	b009883a 	mov	r4,r22
 2806ec8:	1f05c83a 	sub	r2,r3,fp
 2806ecc:	10800054 	ori	r2,r2,1
 2806ed0:	28800115 	stw	r2,4(r5)
 2806ed4:	b8c00117 	ldw	r3,4(r23)
 2806ed8:	0080a074 	movhi	r2,641
 2806edc:	10b77f04 	addi	r2,r2,-8708
 2806ee0:	11400215 	stw	r5,8(r2)
 2806ee4:	18c0004c 	andi	r3,r3,1
 2806ee8:	e0c6b03a 	or	r3,fp,r3
 2806eec:	b8c00115 	stw	r3,4(r23)
 2806ef0:	280a4380 	call	280a438 <__malloc_unlock>
 2806ef4:	003eeb06 	br	2806aa4 <_realloc_r+0xd8>
 2806ef8:	20800117 	ldw	r2,4(r4)
 2806efc:	00ffff04 	movi	r3,-4
 2806f00:	800f883a 	mov	r7,r16
 2806f04:	10c4703a 	and	r2,r2,r3
 2806f08:	98a9883a 	add	r20,r19,r2
 2806f0c:	84000204 	addi	r16,r16,8
 2806f10:	003ecf06 	br	2806a50 <_realloc_r+0x84>
 2806f14:	900b883a 	mov	r5,r18
 2806f18:	8009883a 	mov	r4,r16
 2806f1c:	28057c80 	call	28057c8 <memmove>
 2806f20:	dd000017 	ldw	r20,0(sp)
 2806f24:	b80f883a 	mov	r7,r23
 2806f28:	003ec906 	br	2806a50 <_realloc_r+0x84>
 2806f2c:	900b883a 	mov	r5,r18
 2806f30:	8009883a 	mov	r4,r16
 2806f34:	28057c80 	call	28057c8 <memmove>
 2806f38:	b80f883a 	mov	r7,r23
 2806f3c:	003ec406 	br	2806a50 <_realloc_r+0x84>
 2806f40:	90c00417 	ldw	r3,16(r18)
 2806f44:	89400604 	addi	r5,r17,24
 2806f48:	91000604 	addi	r4,r18,24
 2806f4c:	88c00415 	stw	r3,16(r17)
 2806f50:	90800517 	ldw	r2,20(r18)
 2806f54:	88800515 	stw	r2,20(r17)
 2806f58:	003f6806 	br	2806cfc <_realloc_r+0x330>
 2806f5c:	900b883a 	mov	r5,r18
 2806f60:	8809883a 	mov	r4,r17
 2806f64:	28057c80 	call	28057c8 <memmove>
 2806f68:	003fd406 	br	2806ebc <_realloc_r+0x4f0>
 2806f6c:	90c00417 	ldw	r3,16(r18)
 2806f70:	91000604 	addi	r4,r18,24
 2806f74:	ba000804 	addi	r8,r23,32
 2806f78:	b8c00615 	stw	r3,24(r23)
 2806f7c:	90800517 	ldw	r2,20(r18)
 2806f80:	b8800715 	stw	r2,28(r23)
 2806f84:	003f1206 	br	2806bd0 <_realloc_r+0x204>
 2806f88:	90c00417 	ldw	r3,16(r18)
 2806f8c:	91000604 	addi	r4,r18,24
 2806f90:	ba000804 	addi	r8,r23,32
 2806f94:	b8c00615 	stw	r3,24(r23)
 2806f98:	90800517 	ldw	r2,20(r18)
 2806f9c:	b8800715 	stw	r2,28(r23)
 2806fa0:	003f3206 	br	2806c6c <_realloc_r+0x2a0>
 2806fa4:	90c00417 	ldw	r3,16(r18)
 2806fa8:	91000604 	addi	r4,r18,24
 2806fac:	b9c00804 	addi	r7,r23,32
 2806fb0:	b8c00615 	stw	r3,24(r23)
 2806fb4:	90800517 	ldw	r2,20(r18)
 2806fb8:	b8800715 	stw	r2,28(r23)
 2806fbc:	003fb906 	br	2806ea4 <_realloc_r+0x4d8>

02806fc0 <__isinfd>:
 2806fc0:	200d883a 	mov	r6,r4
 2806fc4:	0109c83a 	sub	r4,zero,r4
 2806fc8:	2188b03a 	or	r4,r4,r6
 2806fcc:	2008d7fa 	srli	r4,r4,31
 2806fd0:	00a00034 	movhi	r2,32768
 2806fd4:	10bfffc4 	addi	r2,r2,-1
 2806fd8:	1144703a 	and	r2,r2,r5
 2806fdc:	2088b03a 	or	r4,r4,r2
 2806fe0:	009ffc34 	movhi	r2,32752
 2806fe4:	1105c83a 	sub	r2,r2,r4
 2806fe8:	0087c83a 	sub	r3,zero,r2
 2806fec:	10c4b03a 	or	r2,r2,r3
 2806ff0:	1004d7fa 	srli	r2,r2,31
 2806ff4:	00c00044 	movi	r3,1
 2806ff8:	1885c83a 	sub	r2,r3,r2
 2806ffc:	f800283a 	ret

02807000 <__isnand>:
 2807000:	200d883a 	mov	r6,r4
 2807004:	0109c83a 	sub	r4,zero,r4
 2807008:	2188b03a 	or	r4,r4,r6
 280700c:	2008d7fa 	srli	r4,r4,31
 2807010:	00a00034 	movhi	r2,32768
 2807014:	10bfffc4 	addi	r2,r2,-1
 2807018:	1144703a 	and	r2,r2,r5
 280701c:	2088b03a 	or	r4,r4,r2
 2807020:	009ffc34 	movhi	r2,32752
 2807024:	1105c83a 	sub	r2,r2,r4
 2807028:	1004d7fa 	srli	r2,r2,31
 280702c:	f800283a 	ret

02807030 <_sbrk_r>:
 2807030:	defffd04 	addi	sp,sp,-12
 2807034:	dc000015 	stw	r16,0(sp)
 2807038:	0400a074 	movhi	r16,641
 280703c:	84042604 	addi	r16,r16,4248
 2807040:	dc400115 	stw	r17,4(sp)
 2807044:	80000015 	stw	zero,0(r16)
 2807048:	2023883a 	mov	r17,r4
 280704c:	2809883a 	mov	r4,r5
 2807050:	dfc00215 	stw	ra,8(sp)
 2807054:	280a6540 	call	280a654 <sbrk>
 2807058:	1007883a 	mov	r3,r2
 280705c:	00bfffc4 	movi	r2,-1
 2807060:	18800626 	beq	r3,r2,280707c <_sbrk_r+0x4c>
 2807064:	1805883a 	mov	r2,r3
 2807068:	dfc00217 	ldw	ra,8(sp)
 280706c:	dc400117 	ldw	r17,4(sp)
 2807070:	dc000017 	ldw	r16,0(sp)
 2807074:	dec00304 	addi	sp,sp,12
 2807078:	f800283a 	ret
 280707c:	80800017 	ldw	r2,0(r16)
 2807080:	103ff826 	beq	r2,zero,2807064 <_sbrk_r+0x34>
 2807084:	88800015 	stw	r2,0(r17)
 2807088:	1805883a 	mov	r2,r3
 280708c:	dfc00217 	ldw	ra,8(sp)
 2807090:	dc400117 	ldw	r17,4(sp)
 2807094:	dc000017 	ldw	r16,0(sp)
 2807098:	dec00304 	addi	sp,sp,12
 280709c:	f800283a 	ret

028070a0 <__sclose>:
 28070a0:	2940038f 	ldh	r5,14(r5)
 28070a4:	28073e81 	jmpi	28073e8 <_close_r>

028070a8 <__sseek>:
 28070a8:	defffe04 	addi	sp,sp,-8
 28070ac:	dc000015 	stw	r16,0(sp)
 28070b0:	2821883a 	mov	r16,r5
 28070b4:	2940038f 	ldh	r5,14(r5)
 28070b8:	dfc00115 	stw	ra,4(sp)
 28070bc:	28076600 	call	2807660 <_lseek_r>
 28070c0:	1007883a 	mov	r3,r2
 28070c4:	00bfffc4 	movi	r2,-1
 28070c8:	18800926 	beq	r3,r2,28070f0 <__sseek+0x48>
 28070cc:	8080030b 	ldhu	r2,12(r16)
 28070d0:	80c01415 	stw	r3,80(r16)
 28070d4:	10840014 	ori	r2,r2,4096
 28070d8:	8080030d 	sth	r2,12(r16)
 28070dc:	1805883a 	mov	r2,r3
 28070e0:	dfc00117 	ldw	ra,4(sp)
 28070e4:	dc000017 	ldw	r16,0(sp)
 28070e8:	dec00204 	addi	sp,sp,8
 28070ec:	f800283a 	ret
 28070f0:	8080030b 	ldhu	r2,12(r16)
 28070f4:	10bbffcc 	andi	r2,r2,61439
 28070f8:	8080030d 	sth	r2,12(r16)
 28070fc:	1805883a 	mov	r2,r3
 2807100:	dfc00117 	ldw	ra,4(sp)
 2807104:	dc000017 	ldw	r16,0(sp)
 2807108:	dec00204 	addi	sp,sp,8
 280710c:	f800283a 	ret

02807110 <__swrite>:
 2807110:	2880030b 	ldhu	r2,12(r5)
 2807114:	defffb04 	addi	sp,sp,-20
 2807118:	dcc00315 	stw	r19,12(sp)
 280711c:	1080400c 	andi	r2,r2,256
 2807120:	dc800215 	stw	r18,8(sp)
 2807124:	dc400115 	stw	r17,4(sp)
 2807128:	dc000015 	stw	r16,0(sp)
 280712c:	3027883a 	mov	r19,r6
 2807130:	3825883a 	mov	r18,r7
 2807134:	dfc00415 	stw	ra,16(sp)
 2807138:	2821883a 	mov	r16,r5
 280713c:	000d883a 	mov	r6,zero
 2807140:	01c00084 	movi	r7,2
 2807144:	2023883a 	mov	r17,r4
 2807148:	10000226 	beq	r2,zero,2807154 <__swrite+0x44>
 280714c:	2940038f 	ldh	r5,14(r5)
 2807150:	28076600 	call	2807660 <_lseek_r>
 2807154:	8080030b 	ldhu	r2,12(r16)
 2807158:	8140038f 	ldh	r5,14(r16)
 280715c:	8809883a 	mov	r4,r17
 2807160:	10bbffcc 	andi	r2,r2,61439
 2807164:	980d883a 	mov	r6,r19
 2807168:	900f883a 	mov	r7,r18
 280716c:	8080030d 	sth	r2,12(r16)
 2807170:	dfc00417 	ldw	ra,16(sp)
 2807174:	dcc00317 	ldw	r19,12(sp)
 2807178:	dc800217 	ldw	r18,8(sp)
 280717c:	dc400117 	ldw	r17,4(sp)
 2807180:	dc000017 	ldw	r16,0(sp)
 2807184:	dec00504 	addi	sp,sp,20
 2807188:	28072a81 	jmpi	28072a8 <_write_r>

0280718c <__sread>:
 280718c:	defffe04 	addi	sp,sp,-8
 2807190:	dc000015 	stw	r16,0(sp)
 2807194:	2821883a 	mov	r16,r5
 2807198:	2940038f 	ldh	r5,14(r5)
 280719c:	dfc00115 	stw	ra,4(sp)
 28071a0:	28076d80 	call	28076d8 <_read_r>
 28071a4:	1007883a 	mov	r3,r2
 28071a8:	10000816 	blt	r2,zero,28071cc <__sread+0x40>
 28071ac:	80801417 	ldw	r2,80(r16)
 28071b0:	10c5883a 	add	r2,r2,r3
 28071b4:	80801415 	stw	r2,80(r16)
 28071b8:	1805883a 	mov	r2,r3
 28071bc:	dfc00117 	ldw	ra,4(sp)
 28071c0:	dc000017 	ldw	r16,0(sp)
 28071c4:	dec00204 	addi	sp,sp,8
 28071c8:	f800283a 	ret
 28071cc:	8080030b 	ldhu	r2,12(r16)
 28071d0:	10bbffcc 	andi	r2,r2,61439
 28071d4:	8080030d 	sth	r2,12(r16)
 28071d8:	1805883a 	mov	r2,r3
 28071dc:	dfc00117 	ldw	ra,4(sp)
 28071e0:	dc000017 	ldw	r16,0(sp)
 28071e4:	dec00204 	addi	sp,sp,8
 28071e8:	f800283a 	ret

028071ec <strcmp>:
 28071ec:	2144b03a 	or	r2,r4,r5
 28071f0:	108000cc 	andi	r2,r2,3
 28071f4:	10001d1e 	bne	r2,zero,280726c <strcmp+0x80>
 28071f8:	200f883a 	mov	r7,r4
 28071fc:	28800017 	ldw	r2,0(r5)
 2807200:	21000017 	ldw	r4,0(r4)
 2807204:	280d883a 	mov	r6,r5
 2807208:	2080161e 	bne	r4,r2,2807264 <strcmp+0x78>
 280720c:	023fbff4 	movhi	r8,65279
 2807210:	423fbfc4 	addi	r8,r8,-257
 2807214:	2207883a 	add	r3,r4,r8
 2807218:	01602074 	movhi	r5,32897
 280721c:	29602004 	addi	r5,r5,-32640
 2807220:	1946703a 	and	r3,r3,r5
 2807224:	0104303a 	nor	r2,zero,r4
 2807228:	10c4703a 	and	r2,r2,r3
 280722c:	10001c1e 	bne	r2,zero,28072a0 <strcmp+0xb4>
 2807230:	4013883a 	mov	r9,r8
 2807234:	2811883a 	mov	r8,r5
 2807238:	00000106 	br	2807240 <strcmp+0x54>
 280723c:	1800181e 	bne	r3,zero,28072a0 <strcmp+0xb4>
 2807240:	39c00104 	addi	r7,r7,4
 2807244:	39000017 	ldw	r4,0(r7)
 2807248:	31800104 	addi	r6,r6,4
 280724c:	31400017 	ldw	r5,0(r6)
 2807250:	2245883a 	add	r2,r4,r9
 2807254:	1204703a 	and	r2,r2,r8
 2807258:	0106303a 	nor	r3,zero,r4
 280725c:	1886703a 	and	r3,r3,r2
 2807260:	217ff626 	beq	r4,r5,280723c <strcmp+0x50>
 2807264:	3809883a 	mov	r4,r7
 2807268:	300b883a 	mov	r5,r6
 280726c:	20c00007 	ldb	r3,0(r4)
 2807270:	1800051e 	bne	r3,zero,2807288 <strcmp+0x9c>
 2807274:	00000606 	br	2807290 <strcmp+0xa4>
 2807278:	21000044 	addi	r4,r4,1
 280727c:	20c00007 	ldb	r3,0(r4)
 2807280:	29400044 	addi	r5,r5,1
 2807284:	18000226 	beq	r3,zero,2807290 <strcmp+0xa4>
 2807288:	28800007 	ldb	r2,0(r5)
 280728c:	18bffa26 	beq	r3,r2,2807278 <strcmp+0x8c>
 2807290:	20c00003 	ldbu	r3,0(r4)
 2807294:	28800003 	ldbu	r2,0(r5)
 2807298:	1885c83a 	sub	r2,r3,r2
 280729c:	f800283a 	ret
 28072a0:	0005883a 	mov	r2,zero
 28072a4:	f800283a 	ret

028072a8 <_write_r>:
 28072a8:	defffd04 	addi	sp,sp,-12
 28072ac:	dc000015 	stw	r16,0(sp)
 28072b0:	0400a074 	movhi	r16,641
 28072b4:	84042604 	addi	r16,r16,4248
 28072b8:	dc400115 	stw	r17,4(sp)
 28072bc:	80000015 	stw	zero,0(r16)
 28072c0:	2023883a 	mov	r17,r4
 28072c4:	2809883a 	mov	r4,r5
 28072c8:	300b883a 	mov	r5,r6
 28072cc:	380d883a 	mov	r6,r7
 28072d0:	dfc00215 	stw	ra,8(sp)
 28072d4:	280a7400 	call	280a740 <write>
 28072d8:	1007883a 	mov	r3,r2
 28072dc:	00bfffc4 	movi	r2,-1
 28072e0:	18800626 	beq	r3,r2,28072fc <_write_r+0x54>
 28072e4:	1805883a 	mov	r2,r3
 28072e8:	dfc00217 	ldw	ra,8(sp)
 28072ec:	dc400117 	ldw	r17,4(sp)
 28072f0:	dc000017 	ldw	r16,0(sp)
 28072f4:	dec00304 	addi	sp,sp,12
 28072f8:	f800283a 	ret
 28072fc:	80800017 	ldw	r2,0(r16)
 2807300:	103ff826 	beq	r2,zero,28072e4 <_write_r+0x3c>
 2807304:	88800015 	stw	r2,0(r17)
 2807308:	1805883a 	mov	r2,r3
 280730c:	dfc00217 	ldw	ra,8(sp)
 2807310:	dc400117 	ldw	r17,4(sp)
 2807314:	dc000017 	ldw	r16,0(sp)
 2807318:	dec00304 	addi	sp,sp,12
 280731c:	f800283a 	ret

02807320 <_calloc_r>:
 2807320:	defffe04 	addi	sp,sp,-8
 2807324:	dc400015 	stw	r17,0(sp)
 2807328:	2023883a 	mov	r17,r4
 280732c:	2809883a 	mov	r4,r5
 2807330:	300b883a 	mov	r5,r6
 2807334:	dfc00115 	stw	ra,4(sp)
 2807338:	28096940 	call	2809694 <__mulsi3>
 280733c:	100b883a 	mov	r5,r2
 2807340:	8809883a 	mov	r4,r17
 2807344:	2804f040 	call	2804f04 <_malloc_r>
 2807348:	1023883a 	mov	r17,r2
 280734c:	01c00904 	movi	r7,36
 2807350:	10000d26 	beq	r2,zero,2807388 <_calloc_r+0x68>
 2807354:	10ffff17 	ldw	r3,-4(r2)
 2807358:	1009883a 	mov	r4,r2
 280735c:	00bfff04 	movi	r2,-4
 2807360:	1886703a 	and	r3,r3,r2
 2807364:	1887883a 	add	r3,r3,r2
 2807368:	180d883a 	mov	r6,r3
 280736c:	000b883a 	mov	r5,zero
 2807370:	38c01736 	bltu	r7,r3,28073d0 <_calloc_r+0xb0>
 2807374:	008004c4 	movi	r2,19
 2807378:	10c00836 	bltu	r2,r3,280739c <_calloc_r+0x7c>
 280737c:	20000215 	stw	zero,8(r4)
 2807380:	20000015 	stw	zero,0(r4)
 2807384:	20000115 	stw	zero,4(r4)
 2807388:	8805883a 	mov	r2,r17
 280738c:	dfc00117 	ldw	ra,4(sp)
 2807390:	dc400017 	ldw	r17,0(sp)
 2807394:	dec00204 	addi	sp,sp,8
 2807398:	f800283a 	ret
 280739c:	008006c4 	movi	r2,27
 28073a0:	88000015 	stw	zero,0(r17)
 28073a4:	88000115 	stw	zero,4(r17)
 28073a8:	89000204 	addi	r4,r17,8
 28073ac:	10fff32e 	bgeu	r2,r3,280737c <_calloc_r+0x5c>
 28073b0:	88000215 	stw	zero,8(r17)
 28073b4:	88000315 	stw	zero,12(r17)
 28073b8:	89000404 	addi	r4,r17,16
 28073bc:	19ffef1e 	bne	r3,r7,280737c <_calloc_r+0x5c>
 28073c0:	89000604 	addi	r4,r17,24
 28073c4:	88000415 	stw	zero,16(r17)
 28073c8:	88000515 	stw	zero,20(r17)
 28073cc:	003feb06 	br	280737c <_calloc_r+0x5c>
 28073d0:	28058a80 	call	28058a8 <memset>
 28073d4:	8805883a 	mov	r2,r17
 28073d8:	dfc00117 	ldw	ra,4(sp)
 28073dc:	dc400017 	ldw	r17,0(sp)
 28073e0:	dec00204 	addi	sp,sp,8
 28073e4:	f800283a 	ret

028073e8 <_close_r>:
 28073e8:	defffd04 	addi	sp,sp,-12
 28073ec:	dc000015 	stw	r16,0(sp)
 28073f0:	0400a074 	movhi	r16,641
 28073f4:	84042604 	addi	r16,r16,4248
 28073f8:	dc400115 	stw	r17,4(sp)
 28073fc:	80000015 	stw	zero,0(r16)
 2807400:	2023883a 	mov	r17,r4
 2807404:	2809883a 	mov	r4,r5
 2807408:	dfc00215 	stw	ra,8(sp)
 280740c:	2809d840 	call	2809d84 <close>
 2807410:	1007883a 	mov	r3,r2
 2807414:	00bfffc4 	movi	r2,-1
 2807418:	18800626 	beq	r3,r2,2807434 <_close_r+0x4c>
 280741c:	1805883a 	mov	r2,r3
 2807420:	dfc00217 	ldw	ra,8(sp)
 2807424:	dc400117 	ldw	r17,4(sp)
 2807428:	dc000017 	ldw	r16,0(sp)
 280742c:	dec00304 	addi	sp,sp,12
 2807430:	f800283a 	ret
 2807434:	80800017 	ldw	r2,0(r16)
 2807438:	103ff826 	beq	r2,zero,280741c <_close_r+0x34>
 280743c:	88800015 	stw	r2,0(r17)
 2807440:	1805883a 	mov	r2,r3
 2807444:	dfc00217 	ldw	ra,8(sp)
 2807448:	dc400117 	ldw	r17,4(sp)
 280744c:	dc000017 	ldw	r16,0(sp)
 2807450:	dec00304 	addi	sp,sp,12
 2807454:	f800283a 	ret

02807458 <_fclose_r>:
 2807458:	defffc04 	addi	sp,sp,-16
 280745c:	dc400115 	stw	r17,4(sp)
 2807460:	dc000015 	stw	r16,0(sp)
 2807464:	dfc00315 	stw	ra,12(sp)
 2807468:	dc800215 	stw	r18,8(sp)
 280746c:	2821883a 	mov	r16,r5
 2807470:	2023883a 	mov	r17,r4
 2807474:	28002926 	beq	r5,zero,280751c <_fclose_r+0xc4>
 2807478:	2803fb40 	call	2803fb4 <__sfp_lock_acquire>
 280747c:	88000226 	beq	r17,zero,2807488 <_fclose_r+0x30>
 2807480:	88800e17 	ldw	r2,56(r17)
 2807484:	10002d26 	beq	r2,zero,280753c <_fclose_r+0xe4>
 2807488:	8080030f 	ldh	r2,12(r16)
 280748c:	10002226 	beq	r2,zero,2807518 <_fclose_r+0xc0>
 2807490:	8809883a 	mov	r4,r17
 2807494:	800b883a 	mov	r5,r16
 2807498:	2803d2c0 	call	2803d2c <_fflush_r>
 280749c:	1025883a 	mov	r18,r2
 28074a0:	80800b17 	ldw	r2,44(r16)
 28074a4:	10000426 	beq	r2,zero,28074b8 <_fclose_r+0x60>
 28074a8:	81400717 	ldw	r5,28(r16)
 28074ac:	8809883a 	mov	r4,r17
 28074b0:	103ee83a 	callr	r2
 28074b4:	10002a16 	blt	r2,zero,2807560 <_fclose_r+0x108>
 28074b8:	8080030b 	ldhu	r2,12(r16)
 28074bc:	1080200c 	andi	r2,r2,128
 28074c0:	1000231e 	bne	r2,zero,2807550 <_fclose_r+0xf8>
 28074c4:	81400c17 	ldw	r5,48(r16)
 28074c8:	28000526 	beq	r5,zero,28074e0 <_fclose_r+0x88>
 28074cc:	80801004 	addi	r2,r16,64
 28074d0:	28800226 	beq	r5,r2,28074dc <_fclose_r+0x84>
 28074d4:	8809883a 	mov	r4,r17
 28074d8:	280437c0 	call	280437c <_free_r>
 28074dc:	80000c15 	stw	zero,48(r16)
 28074e0:	81401117 	ldw	r5,68(r16)
 28074e4:	28000326 	beq	r5,zero,28074f4 <_fclose_r+0x9c>
 28074e8:	8809883a 	mov	r4,r17
 28074ec:	280437c0 	call	280437c <_free_r>
 28074f0:	80001115 	stw	zero,68(r16)
 28074f4:	8000030d 	sth	zero,12(r16)
 28074f8:	2803fb80 	call	2803fb8 <__sfp_lock_release>
 28074fc:	9005883a 	mov	r2,r18
 2807500:	dfc00317 	ldw	ra,12(sp)
 2807504:	dc800217 	ldw	r18,8(sp)
 2807508:	dc400117 	ldw	r17,4(sp)
 280750c:	dc000017 	ldw	r16,0(sp)
 2807510:	dec00404 	addi	sp,sp,16
 2807514:	f800283a 	ret
 2807518:	2803fb80 	call	2803fb8 <__sfp_lock_release>
 280751c:	0025883a 	mov	r18,zero
 2807520:	9005883a 	mov	r2,r18
 2807524:	dfc00317 	ldw	ra,12(sp)
 2807528:	dc800217 	ldw	r18,8(sp)
 280752c:	dc400117 	ldw	r17,4(sp)
 2807530:	dc000017 	ldw	r16,0(sp)
 2807534:	dec00404 	addi	sp,sp,16
 2807538:	f800283a 	ret
 280753c:	8809883a 	mov	r4,r17
 2807540:	2803fc40 	call	2803fc4 <__sinit>
 2807544:	8080030f 	ldh	r2,12(r16)
 2807548:	103fd11e 	bne	r2,zero,2807490 <_fclose_r+0x38>
 280754c:	003ff206 	br	2807518 <_fclose_r+0xc0>
 2807550:	81400417 	ldw	r5,16(r16)
 2807554:	8809883a 	mov	r4,r17
 2807558:	280437c0 	call	280437c <_free_r>
 280755c:	003fd906 	br	28074c4 <_fclose_r+0x6c>
 2807560:	04bfffc4 	movi	r18,-1
 2807564:	003fd406 	br	28074b8 <_fclose_r+0x60>

02807568 <fclose>:
 2807568:	0080a074 	movhi	r2,641
 280756c:	10bd3a04 	addi	r2,r2,-2840
 2807570:	200b883a 	mov	r5,r4
 2807574:	11000017 	ldw	r4,0(r2)
 2807578:	28074581 	jmpi	2807458 <_fclose_r>

0280757c <_fstat_r>:
 280757c:	defffd04 	addi	sp,sp,-12
 2807580:	dc000015 	stw	r16,0(sp)
 2807584:	0400a074 	movhi	r16,641
 2807588:	84042604 	addi	r16,r16,4248
 280758c:	dc400115 	stw	r17,4(sp)
 2807590:	80000015 	stw	zero,0(r16)
 2807594:	2023883a 	mov	r17,r4
 2807598:	2809883a 	mov	r4,r5
 280759c:	300b883a 	mov	r5,r6
 28075a0:	dfc00215 	stw	ra,8(sp)
 28075a4:	2809f100 	call	2809f10 <fstat>
 28075a8:	1007883a 	mov	r3,r2
 28075ac:	00bfffc4 	movi	r2,-1
 28075b0:	18800626 	beq	r3,r2,28075cc <_fstat_r+0x50>
 28075b4:	1805883a 	mov	r2,r3
 28075b8:	dfc00217 	ldw	ra,8(sp)
 28075bc:	dc400117 	ldw	r17,4(sp)
 28075c0:	dc000017 	ldw	r16,0(sp)
 28075c4:	dec00304 	addi	sp,sp,12
 28075c8:	f800283a 	ret
 28075cc:	80800017 	ldw	r2,0(r16)
 28075d0:	103ff826 	beq	r2,zero,28075b4 <_fstat_r+0x38>
 28075d4:	88800015 	stw	r2,0(r17)
 28075d8:	1805883a 	mov	r2,r3
 28075dc:	dfc00217 	ldw	ra,8(sp)
 28075e0:	dc400117 	ldw	r17,4(sp)
 28075e4:	dc000017 	ldw	r16,0(sp)
 28075e8:	dec00304 	addi	sp,sp,12
 28075ec:	f800283a 	ret

028075f0 <_isatty_r>:
 28075f0:	defffd04 	addi	sp,sp,-12
 28075f4:	dc000015 	stw	r16,0(sp)
 28075f8:	0400a074 	movhi	r16,641
 28075fc:	84042604 	addi	r16,r16,4248
 2807600:	dc400115 	stw	r17,4(sp)
 2807604:	80000015 	stw	zero,0(r16)
 2807608:	2023883a 	mov	r17,r4
 280760c:	2809883a 	mov	r4,r5
 2807610:	dfc00215 	stw	ra,8(sp)
 2807614:	280a0480 	call	280a048 <isatty>
 2807618:	1007883a 	mov	r3,r2
 280761c:	00bfffc4 	movi	r2,-1
 2807620:	18800626 	beq	r3,r2,280763c <_isatty_r+0x4c>
 2807624:	1805883a 	mov	r2,r3
 2807628:	dfc00217 	ldw	ra,8(sp)
 280762c:	dc400117 	ldw	r17,4(sp)
 2807630:	dc000017 	ldw	r16,0(sp)
 2807634:	dec00304 	addi	sp,sp,12
 2807638:	f800283a 	ret
 280763c:	80800017 	ldw	r2,0(r16)
 2807640:	103ff826 	beq	r2,zero,2807624 <_isatty_r+0x34>
 2807644:	88800015 	stw	r2,0(r17)
 2807648:	1805883a 	mov	r2,r3
 280764c:	dfc00217 	ldw	ra,8(sp)
 2807650:	dc400117 	ldw	r17,4(sp)
 2807654:	dc000017 	ldw	r16,0(sp)
 2807658:	dec00304 	addi	sp,sp,12
 280765c:	f800283a 	ret

02807660 <_lseek_r>:
 2807660:	defffd04 	addi	sp,sp,-12
 2807664:	dc000015 	stw	r16,0(sp)
 2807668:	0400a074 	movhi	r16,641
 280766c:	84042604 	addi	r16,r16,4248
 2807670:	dc400115 	stw	r17,4(sp)
 2807674:	80000015 	stw	zero,0(r16)
 2807678:	2023883a 	mov	r17,r4
 280767c:	2809883a 	mov	r4,r5
 2807680:	300b883a 	mov	r5,r6
 2807684:	380d883a 	mov	r6,r7
 2807688:	dfc00215 	stw	ra,8(sp)
 280768c:	280a2580 	call	280a258 <lseek>
 2807690:	1007883a 	mov	r3,r2
 2807694:	00bfffc4 	movi	r2,-1
 2807698:	18800626 	beq	r3,r2,28076b4 <_lseek_r+0x54>
 280769c:	1805883a 	mov	r2,r3
 28076a0:	dfc00217 	ldw	ra,8(sp)
 28076a4:	dc400117 	ldw	r17,4(sp)
 28076a8:	dc000017 	ldw	r16,0(sp)
 28076ac:	dec00304 	addi	sp,sp,12
 28076b0:	f800283a 	ret
 28076b4:	80800017 	ldw	r2,0(r16)
 28076b8:	103ff826 	beq	r2,zero,280769c <_lseek_r+0x3c>
 28076bc:	88800015 	stw	r2,0(r17)
 28076c0:	1805883a 	mov	r2,r3
 28076c4:	dfc00217 	ldw	ra,8(sp)
 28076c8:	dc400117 	ldw	r17,4(sp)
 28076cc:	dc000017 	ldw	r16,0(sp)
 28076d0:	dec00304 	addi	sp,sp,12
 28076d4:	f800283a 	ret

028076d8 <_read_r>:
 28076d8:	defffd04 	addi	sp,sp,-12
 28076dc:	dc000015 	stw	r16,0(sp)
 28076e0:	0400a074 	movhi	r16,641
 28076e4:	84042604 	addi	r16,r16,4248
 28076e8:	dc400115 	stw	r17,4(sp)
 28076ec:	80000015 	stw	zero,0(r16)
 28076f0:	2023883a 	mov	r17,r4
 28076f4:	2809883a 	mov	r4,r5
 28076f8:	300b883a 	mov	r5,r6
 28076fc:	380d883a 	mov	r6,r7
 2807700:	dfc00215 	stw	ra,8(sp)
 2807704:	280a4580 	call	280a458 <read>
 2807708:	1007883a 	mov	r3,r2
 280770c:	00bfffc4 	movi	r2,-1
 2807710:	18800626 	beq	r3,r2,280772c <_read_r+0x54>
 2807714:	1805883a 	mov	r2,r3
 2807718:	dfc00217 	ldw	ra,8(sp)
 280771c:	dc400117 	ldw	r17,4(sp)
 2807720:	dc000017 	ldw	r16,0(sp)
 2807724:	dec00304 	addi	sp,sp,12
 2807728:	f800283a 	ret
 280772c:	80800017 	ldw	r2,0(r16)
 2807730:	103ff826 	beq	r2,zero,2807714 <_read_r+0x3c>
 2807734:	88800015 	stw	r2,0(r17)
 2807738:	1805883a 	mov	r2,r3
 280773c:	dfc00217 	ldw	ra,8(sp)
 2807740:	dc400117 	ldw	r17,4(sp)
 2807744:	dc000017 	ldw	r16,0(sp)
 2807748:	dec00304 	addi	sp,sp,12
 280774c:	f800283a 	ret

02807750 <__udivdi3>:
 2807750:	defff104 	addi	sp,sp,-60
 2807754:	0015883a 	mov	r10,zero
 2807758:	2005883a 	mov	r2,r4
 280775c:	3011883a 	mov	r8,r6
 2807760:	df000d15 	stw	fp,52(sp)
 2807764:	dd400a15 	stw	r21,40(sp)
 2807768:	dcc00815 	stw	r19,32(sp)
 280776c:	dfc00e15 	stw	ra,56(sp)
 2807770:	ddc00c15 	stw	r23,48(sp)
 2807774:	dd800b15 	stw	r22,44(sp)
 2807778:	dd000915 	stw	r20,36(sp)
 280777c:	dc800715 	stw	r18,28(sp)
 2807780:	dc400615 	stw	r17,24(sp)
 2807784:	dc000515 	stw	r16,20(sp)
 2807788:	da800315 	stw	r10,12(sp)
 280778c:	4027883a 	mov	r19,r8
 2807790:	1039883a 	mov	fp,r2
 2807794:	282b883a 	mov	r21,r5
 2807798:	da800415 	stw	r10,16(sp)
 280779c:	3800401e 	bne	r7,zero,28078a0 <__udivdi3+0x150>
 28077a0:	2a006536 	bltu	r5,r8,2807938 <__udivdi3+0x1e8>
 28077a4:	4000b526 	beq	r8,zero,2807a7c <__udivdi3+0x32c>
 28077a8:	00bfffd4 	movui	r2,65535
 28077ac:	14c0ad36 	bltu	r2,r19,2807a64 <__udivdi3+0x314>
 28077b0:	00803fc4 	movi	r2,255
 28077b4:	14c15e36 	bltu	r2,r19,2807d30 <__udivdi3+0x5e0>
 28077b8:	000b883a 	mov	r5,zero
 28077bc:	0005883a 	mov	r2,zero
 28077c0:	9884d83a 	srl	r2,r19,r2
 28077c4:	0100a074 	movhi	r4,641
 28077c8:	21362e04 	addi	r4,r4,-10056
 28077cc:	01800804 	movi	r6,32
 28077d0:	1105883a 	add	r2,r2,r4
 28077d4:	10c00003 	ldbu	r3,0(r2)
 28077d8:	28c7883a 	add	r3,r5,r3
 28077dc:	30e9c83a 	sub	r20,r6,r3
 28077e0:	a0010a1e 	bne	r20,zero,2807c0c <__udivdi3+0x4bc>
 28077e4:	982ed43a 	srli	r23,r19,16
 28077e8:	acebc83a 	sub	r21,r21,r19
 28077ec:	9dbfffcc 	andi	r22,r19,65535
 28077f0:	05000044 	movi	r20,1
 28077f4:	a809883a 	mov	r4,r21
 28077f8:	b80b883a 	mov	r5,r23
 28077fc:	28096840 	call	2809684 <__udivsi3>
 2807800:	100b883a 	mov	r5,r2
 2807804:	b009883a 	mov	r4,r22
 2807808:	1021883a 	mov	r16,r2
 280780c:	28096940 	call	2809694 <__mulsi3>
 2807810:	a809883a 	mov	r4,r21
 2807814:	b80b883a 	mov	r5,r23
 2807818:	1023883a 	mov	r17,r2
 280781c:	280968c0 	call	280968c <__umodsi3>
 2807820:	1004943a 	slli	r2,r2,16
 2807824:	e006d43a 	srli	r3,fp,16
 2807828:	10c4b03a 	or	r2,r2,r3
 280782c:	1440042e 	bgeu	r2,r17,2807840 <__udivdi3+0xf0>
 2807830:	14c5883a 	add	r2,r2,r19
 2807834:	843fffc4 	addi	r16,r16,-1
 2807838:	14c00136 	bltu	r2,r19,2807840 <__udivdi3+0xf0>
 280783c:	14415c36 	bltu	r2,r17,2807db0 <__udivdi3+0x660>
 2807840:	1463c83a 	sub	r17,r2,r17
 2807844:	8809883a 	mov	r4,r17
 2807848:	b80b883a 	mov	r5,r23
 280784c:	28096840 	call	2809684 <__udivsi3>
 2807850:	100b883a 	mov	r5,r2
 2807854:	b009883a 	mov	r4,r22
 2807858:	102b883a 	mov	r21,r2
 280785c:	28096940 	call	2809694 <__mulsi3>
 2807860:	8809883a 	mov	r4,r17
 2807864:	b80b883a 	mov	r5,r23
 2807868:	1025883a 	mov	r18,r2
 280786c:	280968c0 	call	280968c <__umodsi3>
 2807870:	1004943a 	slli	r2,r2,16
 2807874:	e0ffffcc 	andi	r3,fp,65535
 2807878:	10c4b03a 	or	r2,r2,r3
 280787c:	1480042e 	bgeu	r2,r18,2807890 <__udivdi3+0x140>
 2807880:	9885883a 	add	r2,r19,r2
 2807884:	ad7fffc4 	addi	r21,r21,-1
 2807888:	14c00136 	bltu	r2,r19,2807890 <__udivdi3+0x140>
 280788c:	14813c36 	bltu	r2,r18,2807d80 <__udivdi3+0x630>
 2807890:	8004943a 	slli	r2,r16,16
 2807894:	a009883a 	mov	r4,r20
 2807898:	a884b03a 	or	r2,r21,r2
 280789c:	00001506 	br	28078f4 <__udivdi3+0x1a4>
 28078a0:	380d883a 	mov	r6,r7
 28078a4:	29c06c36 	bltu	r5,r7,2807a58 <__udivdi3+0x308>
 28078a8:	00bfffd4 	movui	r2,65535
 28078ac:	11c06436 	bltu	r2,r7,2807a40 <__udivdi3+0x2f0>
 28078b0:	00803fc4 	movi	r2,255
 28078b4:	11c11836 	bltu	r2,r7,2807d18 <__udivdi3+0x5c8>
 28078b8:	000b883a 	mov	r5,zero
 28078bc:	0005883a 	mov	r2,zero
 28078c0:	3084d83a 	srl	r2,r6,r2
 28078c4:	0100a074 	movhi	r4,641
 28078c8:	21362e04 	addi	r4,r4,-10056
 28078cc:	01c00804 	movi	r7,32
 28078d0:	1105883a 	add	r2,r2,r4
 28078d4:	10c00003 	ldbu	r3,0(r2)
 28078d8:	28c7883a 	add	r3,r5,r3
 28078dc:	38edc83a 	sub	r22,r7,r3
 28078e0:	b000731e 	bne	r22,zero,2807ab0 <__udivdi3+0x360>
 28078e4:	35400136 	bltu	r6,r21,28078ec <__udivdi3+0x19c>
 28078e8:	e4c05b36 	bltu	fp,r19,2807a58 <__udivdi3+0x308>
 28078ec:	00800044 	movi	r2,1
 28078f0:	0009883a 	mov	r4,zero
 28078f4:	d8800315 	stw	r2,12(sp)
 28078f8:	d9400317 	ldw	r5,12(sp)
 28078fc:	2007883a 	mov	r3,r4
 2807900:	d9000415 	stw	r4,16(sp)
 2807904:	2805883a 	mov	r2,r5
 2807908:	dfc00e17 	ldw	ra,56(sp)
 280790c:	df000d17 	ldw	fp,52(sp)
 2807910:	ddc00c17 	ldw	r23,48(sp)
 2807914:	dd800b17 	ldw	r22,44(sp)
 2807918:	dd400a17 	ldw	r21,40(sp)
 280791c:	dd000917 	ldw	r20,36(sp)
 2807920:	dcc00817 	ldw	r19,32(sp)
 2807924:	dc800717 	ldw	r18,28(sp)
 2807928:	dc400617 	ldw	r17,24(sp)
 280792c:	dc000517 	ldw	r16,20(sp)
 2807930:	dec00f04 	addi	sp,sp,60
 2807934:	f800283a 	ret
 2807938:	00bfffd4 	movui	r2,65535
 280793c:	12005636 	bltu	r2,r8,2807a98 <__udivdi3+0x348>
 2807940:	00803fc4 	movi	r2,255
 2807944:	12010036 	bltu	r2,r8,2807d48 <__udivdi3+0x5f8>
 2807948:	000b883a 	mov	r5,zero
 280794c:	0005883a 	mov	r2,zero
 2807950:	9884d83a 	srl	r2,r19,r2
 2807954:	0100a074 	movhi	r4,641
 2807958:	21362e04 	addi	r4,r4,-10056
 280795c:	01800804 	movi	r6,32
 2807960:	1105883a 	add	r2,r2,r4
 2807964:	10c00003 	ldbu	r3,0(r2)
 2807968:	28c7883a 	add	r3,r5,r3
 280796c:	30cbc83a 	sub	r5,r6,r3
 2807970:	28000626 	beq	r5,zero,280798c <__udivdi3+0x23c>
 2807974:	3145c83a 	sub	r2,r6,r5
 2807978:	e084d83a 	srl	r2,fp,r2
 280797c:	a946983a 	sll	r3,r21,r5
 2807980:	e178983a 	sll	fp,fp,r5
 2807984:	9966983a 	sll	r19,r19,r5
 2807988:	18aab03a 	or	r21,r3,r2
 280798c:	982ed43a 	srli	r23,r19,16
 2807990:	a809883a 	mov	r4,r21
 2807994:	9cbfffcc 	andi	r18,r19,65535
 2807998:	b80b883a 	mov	r5,r23
 280799c:	28096840 	call	2809684 <__udivsi3>
 28079a0:	100b883a 	mov	r5,r2
 28079a4:	9009883a 	mov	r4,r18
 28079a8:	1021883a 	mov	r16,r2
 28079ac:	28096940 	call	2809694 <__mulsi3>
 28079b0:	a809883a 	mov	r4,r21
 28079b4:	b80b883a 	mov	r5,r23
 28079b8:	1023883a 	mov	r17,r2
 28079bc:	280968c0 	call	280968c <__umodsi3>
 28079c0:	1004943a 	slli	r2,r2,16
 28079c4:	e006d43a 	srli	r3,fp,16
 28079c8:	10c4b03a 	or	r2,r2,r3
 28079cc:	1440042e 	bgeu	r2,r17,28079e0 <__udivdi3+0x290>
 28079d0:	14c5883a 	add	r2,r2,r19
 28079d4:	843fffc4 	addi	r16,r16,-1
 28079d8:	14c00136 	bltu	r2,r19,28079e0 <__udivdi3+0x290>
 28079dc:	1440ea36 	bltu	r2,r17,2807d88 <__udivdi3+0x638>
 28079e0:	1463c83a 	sub	r17,r2,r17
 28079e4:	8809883a 	mov	r4,r17
 28079e8:	b80b883a 	mov	r5,r23
 28079ec:	28096840 	call	2809684 <__udivsi3>
 28079f0:	100b883a 	mov	r5,r2
 28079f4:	9009883a 	mov	r4,r18
 28079f8:	102b883a 	mov	r21,r2
 28079fc:	28096940 	call	2809694 <__mulsi3>
 2807a00:	8809883a 	mov	r4,r17
 2807a04:	b80b883a 	mov	r5,r23
 2807a08:	1025883a 	mov	r18,r2
 2807a0c:	280968c0 	call	280968c <__umodsi3>
 2807a10:	1004943a 	slli	r2,r2,16
 2807a14:	e0ffffcc 	andi	r3,fp,65535
 2807a18:	10c4b03a 	or	r2,r2,r3
 2807a1c:	1480042e 	bgeu	r2,r18,2807a30 <__udivdi3+0x2e0>
 2807a20:	9885883a 	add	r2,r19,r2
 2807a24:	ad7fffc4 	addi	r21,r21,-1
 2807a28:	14c00136 	bltu	r2,r19,2807a30 <__udivdi3+0x2e0>
 2807a2c:	1480d936 	bltu	r2,r18,2807d94 <__udivdi3+0x644>
 2807a30:	8004943a 	slli	r2,r16,16
 2807a34:	0009883a 	mov	r4,zero
 2807a38:	a884b03a 	or	r2,r21,r2
 2807a3c:	003fad06 	br	28078f4 <__udivdi3+0x1a4>
 2807a40:	00804034 	movhi	r2,256
 2807a44:	10bfffc4 	addi	r2,r2,-1
 2807a48:	11c0b636 	bltu	r2,r7,2807d24 <__udivdi3+0x5d4>
 2807a4c:	01400404 	movi	r5,16
 2807a50:	2805883a 	mov	r2,r5
 2807a54:	003f9a06 	br	28078c0 <__udivdi3+0x170>
 2807a58:	0005883a 	mov	r2,zero
 2807a5c:	0009883a 	mov	r4,zero
 2807a60:	003fa406 	br	28078f4 <__udivdi3+0x1a4>
 2807a64:	00804034 	movhi	r2,256
 2807a68:	10bfffc4 	addi	r2,r2,-1
 2807a6c:	14c0b336 	bltu	r2,r19,2807d3c <__udivdi3+0x5ec>
 2807a70:	01400404 	movi	r5,16
 2807a74:	2805883a 	mov	r2,r5
 2807a78:	003f5106 	br	28077c0 <__udivdi3+0x70>
 2807a7c:	01000044 	movi	r4,1
 2807a80:	000b883a 	mov	r5,zero
 2807a84:	28096840 	call	2809684 <__udivsi3>
 2807a88:	1027883a 	mov	r19,r2
 2807a8c:	00bfffd4 	movui	r2,65535
 2807a90:	14fff436 	bltu	r2,r19,2807a64 <__udivdi3+0x314>
 2807a94:	003f4606 	br	28077b0 <__udivdi3+0x60>
 2807a98:	00804034 	movhi	r2,256
 2807a9c:	10bfffc4 	addi	r2,r2,-1
 2807aa0:	1200ac36 	bltu	r2,r8,2807d54 <__udivdi3+0x604>
 2807aa4:	01400404 	movi	r5,16
 2807aa8:	2805883a 	mov	r2,r5
 2807aac:	003fa806 	br	2807950 <__udivdi3+0x200>
 2807ab0:	3d85c83a 	sub	r2,r7,r22
 2807ab4:	3588983a 	sll	r4,r6,r22
 2807ab8:	9886d83a 	srl	r3,r19,r2
 2807abc:	a8a2d83a 	srl	r17,r21,r2
 2807ac0:	e084d83a 	srl	r2,fp,r2
 2807ac4:	20eeb03a 	or	r23,r4,r3
 2807ac8:	b824d43a 	srli	r18,r23,16
 2807acc:	ad86983a 	sll	r3,r21,r22
 2807ad0:	8809883a 	mov	r4,r17
 2807ad4:	900b883a 	mov	r5,r18
 2807ad8:	1886b03a 	or	r3,r3,r2
 2807adc:	d8c00115 	stw	r3,4(sp)
 2807ae0:	bc3fffcc 	andi	r16,r23,65535
 2807ae4:	28096840 	call	2809684 <__udivsi3>
 2807ae8:	100b883a 	mov	r5,r2
 2807aec:	8009883a 	mov	r4,r16
 2807af0:	1029883a 	mov	r20,r2
 2807af4:	28096940 	call	2809694 <__mulsi3>
 2807af8:	900b883a 	mov	r5,r18
 2807afc:	8809883a 	mov	r4,r17
 2807b00:	102b883a 	mov	r21,r2
 2807b04:	280968c0 	call	280968c <__umodsi3>
 2807b08:	d9400117 	ldw	r5,4(sp)
 2807b0c:	1004943a 	slli	r2,r2,16
 2807b10:	9da6983a 	sll	r19,r19,r22
 2807b14:	2806d43a 	srli	r3,r5,16
 2807b18:	10c4b03a 	or	r2,r2,r3
 2807b1c:	1540032e 	bgeu	r2,r21,2807b2c <__udivdi3+0x3dc>
 2807b20:	15c5883a 	add	r2,r2,r23
 2807b24:	a53fffc4 	addi	r20,r20,-1
 2807b28:	15c0912e 	bgeu	r2,r23,2807d70 <__udivdi3+0x620>
 2807b2c:	1563c83a 	sub	r17,r2,r21
 2807b30:	8809883a 	mov	r4,r17
 2807b34:	900b883a 	mov	r5,r18
 2807b38:	28096840 	call	2809684 <__udivsi3>
 2807b3c:	100b883a 	mov	r5,r2
 2807b40:	8009883a 	mov	r4,r16
 2807b44:	102b883a 	mov	r21,r2
 2807b48:	28096940 	call	2809694 <__mulsi3>
 2807b4c:	8809883a 	mov	r4,r17
 2807b50:	900b883a 	mov	r5,r18
 2807b54:	1021883a 	mov	r16,r2
 2807b58:	280968c0 	call	280968c <__umodsi3>
 2807b5c:	da800117 	ldw	r10,4(sp)
 2807b60:	1004943a 	slli	r2,r2,16
 2807b64:	50ffffcc 	andi	r3,r10,65535
 2807b68:	10c6b03a 	or	r3,r2,r3
 2807b6c:	1c00032e 	bgeu	r3,r16,2807b7c <__udivdi3+0x42c>
 2807b70:	1dc7883a 	add	r3,r3,r23
 2807b74:	ad7fffc4 	addi	r21,r21,-1
 2807b78:	1dc0792e 	bgeu	r3,r23,2807d60 <__udivdi3+0x610>
 2807b7c:	a004943a 	slli	r2,r20,16
 2807b80:	982ed43a 	srli	r23,r19,16
 2807b84:	9cffffcc 	andi	r19,r19,65535
 2807b88:	a8a4b03a 	or	r18,r21,r2
 2807b8c:	947fffcc 	andi	r17,r18,65535
 2807b90:	902ad43a 	srli	r21,r18,16
 2807b94:	8809883a 	mov	r4,r17
 2807b98:	980b883a 	mov	r5,r19
 2807b9c:	1c21c83a 	sub	r16,r3,r16
 2807ba0:	28096940 	call	2809694 <__mulsi3>
 2807ba4:	8809883a 	mov	r4,r17
 2807ba8:	b80b883a 	mov	r5,r23
 2807bac:	1029883a 	mov	r20,r2
 2807bb0:	28096940 	call	2809694 <__mulsi3>
 2807bb4:	980b883a 	mov	r5,r19
 2807bb8:	a809883a 	mov	r4,r21
 2807bbc:	1023883a 	mov	r17,r2
 2807bc0:	28096940 	call	2809694 <__mulsi3>
 2807bc4:	a809883a 	mov	r4,r21
 2807bc8:	b80b883a 	mov	r5,r23
 2807bcc:	1027883a 	mov	r19,r2
 2807bd0:	28096940 	call	2809694 <__mulsi3>
 2807bd4:	1009883a 	mov	r4,r2
 2807bd8:	a004d43a 	srli	r2,r20,16
 2807bdc:	8ce3883a 	add	r17,r17,r19
 2807be0:	1447883a 	add	r3,r2,r17
 2807be4:	1cc0022e 	bgeu	r3,r19,2807bf0 <__udivdi3+0x4a0>
 2807be8:	00800074 	movhi	r2,1
 2807bec:	2089883a 	add	r4,r4,r2
 2807bf0:	1804d43a 	srli	r2,r3,16
 2807bf4:	2085883a 	add	r2,r4,r2
 2807bf8:	80804436 	bltu	r16,r2,2807d0c <__udivdi3+0x5bc>
 2807bfc:	80803e26 	beq	r16,r2,2807cf8 <__udivdi3+0x5a8>
 2807c00:	9005883a 	mov	r2,r18
 2807c04:	0009883a 	mov	r4,zero
 2807c08:	003f3a06 	br	28078f4 <__udivdi3+0x1a4>
 2807c0c:	9d26983a 	sll	r19,r19,r20
 2807c10:	3505c83a 	sub	r2,r6,r20
 2807c14:	a8a2d83a 	srl	r17,r21,r2
 2807c18:	982ed43a 	srli	r23,r19,16
 2807c1c:	e084d83a 	srl	r2,fp,r2
 2807c20:	ad06983a 	sll	r3,r21,r20
 2807c24:	8809883a 	mov	r4,r17
 2807c28:	b80b883a 	mov	r5,r23
 2807c2c:	1886b03a 	or	r3,r3,r2
 2807c30:	d8c00015 	stw	r3,0(sp)
 2807c34:	9dbfffcc 	andi	r22,r19,65535
 2807c38:	28096840 	call	2809684 <__udivsi3>
 2807c3c:	100b883a 	mov	r5,r2
 2807c40:	b009883a 	mov	r4,r22
 2807c44:	d8800215 	stw	r2,8(sp)
 2807c48:	28096940 	call	2809694 <__mulsi3>
 2807c4c:	8809883a 	mov	r4,r17
 2807c50:	b80b883a 	mov	r5,r23
 2807c54:	102b883a 	mov	r21,r2
 2807c58:	280968c0 	call	280968c <__umodsi3>
 2807c5c:	d9000017 	ldw	r4,0(sp)
 2807c60:	1004943a 	slli	r2,r2,16
 2807c64:	2006d43a 	srli	r3,r4,16
 2807c68:	10c4b03a 	or	r2,r2,r3
 2807c6c:	1540052e 	bgeu	r2,r21,2807c84 <__udivdi3+0x534>
 2807c70:	d9400217 	ldw	r5,8(sp)
 2807c74:	14c5883a 	add	r2,r2,r19
 2807c78:	297fffc4 	addi	r5,r5,-1
 2807c7c:	d9400215 	stw	r5,8(sp)
 2807c80:	14c0462e 	bgeu	r2,r19,2807d9c <__udivdi3+0x64c>
 2807c84:	1563c83a 	sub	r17,r2,r21
 2807c88:	8809883a 	mov	r4,r17
 2807c8c:	b80b883a 	mov	r5,r23
 2807c90:	28096840 	call	2809684 <__udivsi3>
 2807c94:	100b883a 	mov	r5,r2
 2807c98:	b009883a 	mov	r4,r22
 2807c9c:	1025883a 	mov	r18,r2
 2807ca0:	28096940 	call	2809694 <__mulsi3>
 2807ca4:	8809883a 	mov	r4,r17
 2807ca8:	b80b883a 	mov	r5,r23
 2807cac:	1021883a 	mov	r16,r2
 2807cb0:	280968c0 	call	280968c <__umodsi3>
 2807cb4:	da800017 	ldw	r10,0(sp)
 2807cb8:	1004943a 	slli	r2,r2,16
 2807cbc:	50ffffcc 	andi	r3,r10,65535
 2807cc0:	10c6b03a 	or	r3,r2,r3
 2807cc4:	1c00062e 	bgeu	r3,r16,2807ce0 <__udivdi3+0x590>
 2807cc8:	1cc7883a 	add	r3,r3,r19
 2807ccc:	94bfffc4 	addi	r18,r18,-1
 2807cd0:	1cc00336 	bltu	r3,r19,2807ce0 <__udivdi3+0x590>
 2807cd4:	1c00022e 	bgeu	r3,r16,2807ce0 <__udivdi3+0x590>
 2807cd8:	94bfffc4 	addi	r18,r18,-1
 2807cdc:	1cc7883a 	add	r3,r3,r19
 2807ce0:	d9000217 	ldw	r4,8(sp)
 2807ce4:	e538983a 	sll	fp,fp,r20
 2807ce8:	1c2bc83a 	sub	r21,r3,r16
 2807cec:	2004943a 	slli	r2,r4,16
 2807cf0:	90a8b03a 	or	r20,r18,r2
 2807cf4:	003ebf06 	br	28077f4 <__udivdi3+0xa4>
 2807cf8:	1804943a 	slli	r2,r3,16
 2807cfc:	e588983a 	sll	r4,fp,r22
 2807d00:	a0ffffcc 	andi	r3,r20,65535
 2807d04:	10c5883a 	add	r2,r2,r3
 2807d08:	20bfbd2e 	bgeu	r4,r2,2807c00 <__udivdi3+0x4b0>
 2807d0c:	90bfffc4 	addi	r2,r18,-1
 2807d10:	0009883a 	mov	r4,zero
 2807d14:	003ef706 	br	28078f4 <__udivdi3+0x1a4>
 2807d18:	01400204 	movi	r5,8
 2807d1c:	2805883a 	mov	r2,r5
 2807d20:	003ee706 	br	28078c0 <__udivdi3+0x170>
 2807d24:	01400604 	movi	r5,24
 2807d28:	2805883a 	mov	r2,r5
 2807d2c:	003ee406 	br	28078c0 <__udivdi3+0x170>
 2807d30:	01400204 	movi	r5,8
 2807d34:	2805883a 	mov	r2,r5
 2807d38:	003ea106 	br	28077c0 <__udivdi3+0x70>
 2807d3c:	01400604 	movi	r5,24
 2807d40:	2805883a 	mov	r2,r5
 2807d44:	003e9e06 	br	28077c0 <__udivdi3+0x70>
 2807d48:	01400204 	movi	r5,8
 2807d4c:	2805883a 	mov	r2,r5
 2807d50:	003eff06 	br	2807950 <__udivdi3+0x200>
 2807d54:	01400604 	movi	r5,24
 2807d58:	2805883a 	mov	r2,r5
 2807d5c:	003efc06 	br	2807950 <__udivdi3+0x200>
 2807d60:	1c3f862e 	bgeu	r3,r16,2807b7c <__udivdi3+0x42c>
 2807d64:	1dc7883a 	add	r3,r3,r23
 2807d68:	ad7fffc4 	addi	r21,r21,-1
 2807d6c:	003f8306 	br	2807b7c <__udivdi3+0x42c>
 2807d70:	157f6e2e 	bgeu	r2,r21,2807b2c <__udivdi3+0x3dc>
 2807d74:	a53fffc4 	addi	r20,r20,-1
 2807d78:	15c5883a 	add	r2,r2,r23
 2807d7c:	003f6b06 	br	2807b2c <__udivdi3+0x3dc>
 2807d80:	ad7fffc4 	addi	r21,r21,-1
 2807d84:	003ec206 	br	2807890 <__udivdi3+0x140>
 2807d88:	843fffc4 	addi	r16,r16,-1
 2807d8c:	14c5883a 	add	r2,r2,r19
 2807d90:	003f1306 	br	28079e0 <__udivdi3+0x290>
 2807d94:	ad7fffc4 	addi	r21,r21,-1
 2807d98:	003f2506 	br	2807a30 <__udivdi3+0x2e0>
 2807d9c:	157fb92e 	bgeu	r2,r21,2807c84 <__udivdi3+0x534>
 2807da0:	297fffc4 	addi	r5,r5,-1
 2807da4:	14c5883a 	add	r2,r2,r19
 2807da8:	d9400215 	stw	r5,8(sp)
 2807dac:	003fb506 	br	2807c84 <__udivdi3+0x534>
 2807db0:	843fffc4 	addi	r16,r16,-1
 2807db4:	14c5883a 	add	r2,r2,r19
 2807db8:	003ea106 	br	2807840 <__udivdi3+0xf0>

02807dbc <__umoddi3>:
 2807dbc:	defff004 	addi	sp,sp,-64
 2807dc0:	3011883a 	mov	r8,r6
 2807dc4:	000d883a 	mov	r6,zero
 2807dc8:	dd400b15 	stw	r21,44(sp)
 2807dcc:	dcc00915 	stw	r19,36(sp)
 2807dd0:	dc000615 	stw	r16,24(sp)
 2807dd4:	dfc00f15 	stw	ra,60(sp)
 2807dd8:	df000e15 	stw	fp,56(sp)
 2807ddc:	ddc00d15 	stw	r23,52(sp)
 2807de0:	dd800c15 	stw	r22,48(sp)
 2807de4:	dd000a15 	stw	r20,40(sp)
 2807de8:	dc800815 	stw	r18,32(sp)
 2807dec:	dc400715 	stw	r17,28(sp)
 2807df0:	2817883a 	mov	r11,r5
 2807df4:	d9800415 	stw	r6,16(sp)
 2807df8:	4027883a 	mov	r19,r8
 2807dfc:	d9800515 	stw	r6,20(sp)
 2807e00:	2021883a 	mov	r16,r4
 2807e04:	282b883a 	mov	r21,r5
 2807e08:	38002c1e 	bne	r7,zero,2807ebc <__umoddi3+0x100>
 2807e0c:	2a005636 	bltu	r5,r8,2807f68 <__umoddi3+0x1ac>
 2807e10:	40009a26 	beq	r8,zero,280807c <__umoddi3+0x2c0>
 2807e14:	00bfffd4 	movui	r2,65535
 2807e18:	14c09236 	bltu	r2,r19,2808064 <__umoddi3+0x2a8>
 2807e1c:	00803fc4 	movi	r2,255
 2807e20:	14c15c36 	bltu	r2,r19,2808394 <__umoddi3+0x5d8>
 2807e24:	000b883a 	mov	r5,zero
 2807e28:	0005883a 	mov	r2,zero
 2807e2c:	9884d83a 	srl	r2,r19,r2
 2807e30:	0100a074 	movhi	r4,641
 2807e34:	21362e04 	addi	r4,r4,-10056
 2807e38:	01800804 	movi	r6,32
 2807e3c:	1105883a 	add	r2,r2,r4
 2807e40:	10c00003 	ldbu	r3,0(r2)
 2807e44:	28c7883a 	add	r3,r5,r3
 2807e48:	30e5c83a 	sub	r18,r6,r3
 2807e4c:	9000a41e 	bne	r18,zero,28080e0 <__umoddi3+0x324>
 2807e50:	982ed43a 	srli	r23,r19,16
 2807e54:	acebc83a 	sub	r21,r21,r19
 2807e58:	9d3fffcc 	andi	r20,r19,65535
 2807e5c:	002d883a 	mov	r22,zero
 2807e60:	a809883a 	mov	r4,r21
 2807e64:	b80b883a 	mov	r5,r23
 2807e68:	28096840 	call	2809684 <__udivsi3>
 2807e6c:	100b883a 	mov	r5,r2
 2807e70:	a009883a 	mov	r4,r20
 2807e74:	28096940 	call	2809694 <__mulsi3>
 2807e78:	a809883a 	mov	r4,r21
 2807e7c:	b80b883a 	mov	r5,r23
 2807e80:	1023883a 	mov	r17,r2
 2807e84:	280968c0 	call	280968c <__umodsi3>
 2807e88:	1004943a 	slli	r2,r2,16
 2807e8c:	8006d43a 	srli	r3,r16,16
 2807e90:	10c4b03a 	or	r2,r2,r3
 2807e94:	1440032e 	bgeu	r2,r17,2807ea4 <__umoddi3+0xe8>
 2807e98:	14c5883a 	add	r2,r2,r19
 2807e9c:	14c00136 	bltu	r2,r19,2807ea4 <__umoddi3+0xe8>
 2807ea0:	14415836 	bltu	r2,r17,2808404 <__umoddi3+0x648>
 2807ea4:	1463c83a 	sub	r17,r2,r17
 2807ea8:	8809883a 	mov	r4,r17
 2807eac:	b80b883a 	mov	r5,r23
 2807eb0:	28096840 	call	2809684 <__udivsi3>
 2807eb4:	a009883a 	mov	r4,r20
 2807eb8:	00005306 	br	2808008 <__umoddi3+0x24c>
 2807ebc:	380d883a 	mov	r6,r7
 2807ec0:	29c0132e 	bgeu	r5,r7,2807f10 <__umoddi3+0x154>
 2807ec4:	d9000415 	stw	r4,16(sp)
 2807ec8:	d9400515 	stw	r5,20(sp)
 2807ecc:	d9400417 	ldw	r5,16(sp)
 2807ed0:	5813883a 	mov	r9,r11
 2807ed4:	2811883a 	mov	r8,r5
 2807ed8:	4005883a 	mov	r2,r8
 2807edc:	4807883a 	mov	r3,r9
 2807ee0:	dfc00f17 	ldw	ra,60(sp)
 2807ee4:	df000e17 	ldw	fp,56(sp)
 2807ee8:	ddc00d17 	ldw	r23,52(sp)
 2807eec:	dd800c17 	ldw	r22,48(sp)
 2807ef0:	dd400b17 	ldw	r21,44(sp)
 2807ef4:	dd000a17 	ldw	r20,40(sp)
 2807ef8:	dcc00917 	ldw	r19,36(sp)
 2807efc:	dc800817 	ldw	r18,32(sp)
 2807f00:	dc400717 	ldw	r17,28(sp)
 2807f04:	dc000617 	ldw	r16,24(sp)
 2807f08:	dec01004 	addi	sp,sp,64
 2807f0c:	f800283a 	ret
 2807f10:	00bfffd4 	movui	r2,65535
 2807f14:	11c06636 	bltu	r2,r7,28080b0 <__umoddi3+0x2f4>
 2807f18:	00803fc4 	movi	r2,255
 2807f1c:	11c12036 	bltu	r2,r7,28083a0 <__umoddi3+0x5e4>
 2807f20:	000b883a 	mov	r5,zero
 2807f24:	0005883a 	mov	r2,zero
 2807f28:	3084d83a 	srl	r2,r6,r2
 2807f2c:	0100a074 	movhi	r4,641
 2807f30:	21362e04 	addi	r4,r4,-10056
 2807f34:	01c00804 	movi	r7,32
 2807f38:	1105883a 	add	r2,r2,r4
 2807f3c:	10c00003 	ldbu	r3,0(r2)
 2807f40:	28c7883a 	add	r3,r5,r3
 2807f44:	38e5c83a 	sub	r18,r7,r3
 2807f48:	9000941e 	bne	r18,zero,280819c <__umoddi3+0x3e0>
 2807f4c:	35405e36 	bltu	r6,r21,28080c8 <__umoddi3+0x30c>
 2807f50:	84c05d2e 	bgeu	r16,r19,28080c8 <__umoddi3+0x30c>
 2807f54:	8011883a 	mov	r8,r16
 2807f58:	a813883a 	mov	r9,r21
 2807f5c:	dc000415 	stw	r16,16(sp)
 2807f60:	dd400515 	stw	r21,20(sp)
 2807f64:	003fdc06 	br	2807ed8 <__umoddi3+0x11c>
 2807f68:	00bfffd4 	movui	r2,65535
 2807f6c:	12004a36 	bltu	r2,r8,2808098 <__umoddi3+0x2dc>
 2807f70:	00803fc4 	movi	r2,255
 2807f74:	12010d36 	bltu	r2,r8,28083ac <__umoddi3+0x5f0>
 2807f78:	000b883a 	mov	r5,zero
 2807f7c:	0005883a 	mov	r2,zero
 2807f80:	9884d83a 	srl	r2,r19,r2
 2807f84:	0100a074 	movhi	r4,641
 2807f88:	21362e04 	addi	r4,r4,-10056
 2807f8c:	01800804 	movi	r6,32
 2807f90:	1105883a 	add	r2,r2,r4
 2807f94:	10c00003 	ldbu	r3,0(r2)
 2807f98:	28c7883a 	add	r3,r5,r3
 2807f9c:	30c7c83a 	sub	r3,r6,r3
 2807fa0:	1800dc1e 	bne	r3,zero,2808314 <__umoddi3+0x558>
 2807fa4:	002d883a 	mov	r22,zero
 2807fa8:	982ed43a 	srli	r23,r19,16
 2807fac:	a809883a 	mov	r4,r21
 2807fb0:	9cbfffcc 	andi	r18,r19,65535
 2807fb4:	b80b883a 	mov	r5,r23
 2807fb8:	28096840 	call	2809684 <__udivsi3>
 2807fbc:	100b883a 	mov	r5,r2
 2807fc0:	9009883a 	mov	r4,r18
 2807fc4:	28096940 	call	2809694 <__mulsi3>
 2807fc8:	a809883a 	mov	r4,r21
 2807fcc:	b80b883a 	mov	r5,r23
 2807fd0:	1023883a 	mov	r17,r2
 2807fd4:	280968c0 	call	280968c <__umodsi3>
 2807fd8:	1004943a 	slli	r2,r2,16
 2807fdc:	8006d43a 	srli	r3,r16,16
 2807fe0:	10c4b03a 	or	r2,r2,r3
 2807fe4:	1440032e 	bgeu	r2,r17,2807ff4 <__umoddi3+0x238>
 2807fe8:	14c5883a 	add	r2,r2,r19
 2807fec:	14c00136 	bltu	r2,r19,2807ff4 <__umoddi3+0x238>
 2807ff0:	14410236 	bltu	r2,r17,28083fc <__umoddi3+0x640>
 2807ff4:	1463c83a 	sub	r17,r2,r17
 2807ff8:	8809883a 	mov	r4,r17
 2807ffc:	b80b883a 	mov	r5,r23
 2808000:	28096840 	call	2809684 <__udivsi3>
 2808004:	9009883a 	mov	r4,r18
 2808008:	100b883a 	mov	r5,r2
 280800c:	28096940 	call	2809694 <__mulsi3>
 2808010:	8809883a 	mov	r4,r17
 2808014:	b80b883a 	mov	r5,r23
 2808018:	102b883a 	mov	r21,r2
 280801c:	280968c0 	call	280968c <__umodsi3>
 2808020:	1004943a 	slli	r2,r2,16
 2808024:	80ffffcc 	andi	r3,r16,65535
 2808028:	10c4b03a 	or	r2,r2,r3
 280802c:	1540042e 	bgeu	r2,r21,2808040 <__umoddi3+0x284>
 2808030:	14c5883a 	add	r2,r2,r19
 2808034:	14c00236 	bltu	r2,r19,2808040 <__umoddi3+0x284>
 2808038:	1540012e 	bgeu	r2,r21,2808040 <__umoddi3+0x284>
 280803c:	14c5883a 	add	r2,r2,r19
 2808040:	1545c83a 	sub	r2,r2,r21
 2808044:	1584d83a 	srl	r2,r2,r22
 2808048:	0013883a 	mov	r9,zero
 280804c:	d8800415 	stw	r2,16(sp)
 2808050:	d8c00417 	ldw	r3,16(sp)
 2808054:	0005883a 	mov	r2,zero
 2808058:	d8800515 	stw	r2,20(sp)
 280805c:	1811883a 	mov	r8,r3
 2808060:	003f9d06 	br	2807ed8 <__umoddi3+0x11c>
 2808064:	00804034 	movhi	r2,256
 2808068:	10bfffc4 	addi	r2,r2,-1
 280806c:	14c0c636 	bltu	r2,r19,2808388 <__umoddi3+0x5cc>
 2808070:	01400404 	movi	r5,16
 2808074:	2805883a 	mov	r2,r5
 2808078:	003f6c06 	br	2807e2c <__umoddi3+0x70>
 280807c:	01000044 	movi	r4,1
 2808080:	000b883a 	mov	r5,zero
 2808084:	28096840 	call	2809684 <__udivsi3>
 2808088:	1027883a 	mov	r19,r2
 280808c:	00bfffd4 	movui	r2,65535
 2808090:	14fff436 	bltu	r2,r19,2808064 <__umoddi3+0x2a8>
 2808094:	003f6106 	br	2807e1c <__umoddi3+0x60>
 2808098:	00804034 	movhi	r2,256
 280809c:	10bfffc4 	addi	r2,r2,-1
 28080a0:	1200c536 	bltu	r2,r8,28083b8 <__umoddi3+0x5fc>
 28080a4:	01400404 	movi	r5,16
 28080a8:	2805883a 	mov	r2,r5
 28080ac:	003fb406 	br	2807f80 <__umoddi3+0x1c4>
 28080b0:	00804034 	movhi	r2,256
 28080b4:	10bfffc4 	addi	r2,r2,-1
 28080b8:	11c0c236 	bltu	r2,r7,28083c4 <__umoddi3+0x608>
 28080bc:	01400404 	movi	r5,16
 28080c0:	2805883a 	mov	r2,r5
 28080c4:	003f9806 	br	2807f28 <__umoddi3+0x16c>
 28080c8:	84c9c83a 	sub	r4,r16,r19
 28080cc:	8105803a 	cmpltu	r2,r16,r4
 28080d0:	a987c83a 	sub	r3,r21,r6
 28080d4:	18abc83a 	sub	r21,r3,r2
 28080d8:	2021883a 	mov	r16,r4
 28080dc:	003f9d06 	br	2807f54 <__umoddi3+0x198>
 28080e0:	9ca6983a 	sll	r19,r19,r18
 28080e4:	3485c83a 	sub	r2,r6,r18
 28080e8:	a8a2d83a 	srl	r17,r21,r2
 28080ec:	982ed43a 	srli	r23,r19,16
 28080f0:	ac86983a 	sll	r3,r21,r18
 28080f4:	8084d83a 	srl	r2,r16,r2
 28080f8:	8809883a 	mov	r4,r17
 28080fc:	b80b883a 	mov	r5,r23
 2808100:	18b8b03a 	or	fp,r3,r2
 2808104:	9d3fffcc 	andi	r20,r19,65535
 2808108:	28096840 	call	2809684 <__udivsi3>
 280810c:	100b883a 	mov	r5,r2
 2808110:	a009883a 	mov	r4,r20
 2808114:	28096940 	call	2809694 <__mulsi3>
 2808118:	8809883a 	mov	r4,r17
 280811c:	b80b883a 	mov	r5,r23
 2808120:	102b883a 	mov	r21,r2
 2808124:	280968c0 	call	280968c <__umodsi3>
 2808128:	1004943a 	slli	r2,r2,16
 280812c:	e006d43a 	srli	r3,fp,16
 2808130:	902d883a 	mov	r22,r18
 2808134:	10c4b03a 	or	r2,r2,r3
 2808138:	1540022e 	bgeu	r2,r21,2808144 <__umoddi3+0x388>
 280813c:	14c5883a 	add	r2,r2,r19
 2808140:	14c0ab2e 	bgeu	r2,r19,28083f0 <__umoddi3+0x634>
 2808144:	1563c83a 	sub	r17,r2,r21
 2808148:	8809883a 	mov	r4,r17
 280814c:	b80b883a 	mov	r5,r23
 2808150:	28096840 	call	2809684 <__udivsi3>
 2808154:	100b883a 	mov	r5,r2
 2808158:	a009883a 	mov	r4,r20
 280815c:	28096940 	call	2809694 <__mulsi3>
 2808160:	8809883a 	mov	r4,r17
 2808164:	b80b883a 	mov	r5,r23
 2808168:	102b883a 	mov	r21,r2
 280816c:	280968c0 	call	280968c <__umodsi3>
 2808170:	1004943a 	slli	r2,r2,16
 2808174:	e0ffffcc 	andi	r3,fp,65535
 2808178:	10c4b03a 	or	r2,r2,r3
 280817c:	1540042e 	bgeu	r2,r21,2808190 <__umoddi3+0x3d4>
 2808180:	14c5883a 	add	r2,r2,r19
 2808184:	14c00236 	bltu	r2,r19,2808190 <__umoddi3+0x3d4>
 2808188:	1540012e 	bgeu	r2,r21,2808190 <__umoddi3+0x3d4>
 280818c:	14c5883a 	add	r2,r2,r19
 2808190:	84a0983a 	sll	r16,r16,r18
 2808194:	156bc83a 	sub	r21,r2,r21
 2808198:	003f3106 	br	2807e60 <__umoddi3+0xa4>
 280819c:	3c8fc83a 	sub	r7,r7,r18
 28081a0:	3486983a 	sll	r3,r6,r18
 28081a4:	99c4d83a 	srl	r2,r19,r7
 28081a8:	a9e2d83a 	srl	r17,r21,r7
 28081ac:	ac8c983a 	sll	r6,r21,r18
 28081b0:	18acb03a 	or	r22,r3,r2
 28081b4:	b02ed43a 	srli	r23,r22,16
 28081b8:	81c4d83a 	srl	r2,r16,r7
 28081bc:	8809883a 	mov	r4,r17
 28081c0:	b80b883a 	mov	r5,r23
 28081c4:	308cb03a 	or	r6,r6,r2
 28081c8:	d9c00315 	stw	r7,12(sp)
 28081cc:	d9800215 	stw	r6,8(sp)
 28081d0:	b53fffcc 	andi	r20,r22,65535
 28081d4:	28096840 	call	2809684 <__udivsi3>
 28081d8:	100b883a 	mov	r5,r2
 28081dc:	a009883a 	mov	r4,r20
 28081e0:	1039883a 	mov	fp,r2
 28081e4:	28096940 	call	2809694 <__mulsi3>
 28081e8:	8809883a 	mov	r4,r17
 28081ec:	b80b883a 	mov	r5,r23
 28081f0:	102b883a 	mov	r21,r2
 28081f4:	280968c0 	call	280968c <__umodsi3>
 28081f8:	d9000217 	ldw	r4,8(sp)
 28081fc:	1004943a 	slli	r2,r2,16
 2808200:	9ca6983a 	sll	r19,r19,r18
 2808204:	2006d43a 	srli	r3,r4,16
 2808208:	84a0983a 	sll	r16,r16,r18
 280820c:	dcc00015 	stw	r19,0(sp)
 2808210:	10c4b03a 	or	r2,r2,r3
 2808214:	dc000115 	stw	r16,4(sp)
 2808218:	1540032e 	bgeu	r2,r21,2808228 <__umoddi3+0x46c>
 280821c:	1585883a 	add	r2,r2,r22
 2808220:	e73fffc4 	addi	fp,fp,-1
 2808224:	15806e2e 	bgeu	r2,r22,28083e0 <__umoddi3+0x624>
 2808228:	1563c83a 	sub	r17,r2,r21
 280822c:	8809883a 	mov	r4,r17
 2808230:	b80b883a 	mov	r5,r23
 2808234:	28096840 	call	2809684 <__udivsi3>
 2808238:	100b883a 	mov	r5,r2
 280823c:	a009883a 	mov	r4,r20
 2808240:	1021883a 	mov	r16,r2
 2808244:	28096940 	call	2809694 <__mulsi3>
 2808248:	b80b883a 	mov	r5,r23
 280824c:	8809883a 	mov	r4,r17
 2808250:	1029883a 	mov	r20,r2
 2808254:	280968c0 	call	280968c <__umodsi3>
 2808258:	d9400217 	ldw	r5,8(sp)
 280825c:	1004943a 	slli	r2,r2,16
 2808260:	28ffffcc 	andi	r3,r5,65535
 2808264:	10c4b03a 	or	r2,r2,r3
 2808268:	1500032e 	bgeu	r2,r20,2808278 <__umoddi3+0x4bc>
 280826c:	1585883a 	add	r2,r2,r22
 2808270:	843fffc4 	addi	r16,r16,-1
 2808274:	1580562e 	bgeu	r2,r22,28083d0 <__umoddi3+0x614>
 2808278:	d9800017 	ldw	r6,0(sp)
 280827c:	e022943a 	slli	r17,fp,16
 2808280:	302ed43a 	srli	r23,r6,16
 2808284:	8462b03a 	or	r17,r16,r17
 2808288:	34ffffcc 	andi	r19,r6,65535
 280828c:	882ad43a 	srli	r21,r17,16
 2808290:	8c7fffcc 	andi	r17,r17,65535
 2808294:	8809883a 	mov	r4,r17
 2808298:	980b883a 	mov	r5,r19
 280829c:	1521c83a 	sub	r16,r2,r20
 28082a0:	28096940 	call	2809694 <__mulsi3>
 28082a4:	8809883a 	mov	r4,r17
 28082a8:	b80b883a 	mov	r5,r23
 28082ac:	1029883a 	mov	r20,r2
 28082b0:	28096940 	call	2809694 <__mulsi3>
 28082b4:	980b883a 	mov	r5,r19
 28082b8:	a809883a 	mov	r4,r21
 28082bc:	1023883a 	mov	r17,r2
 28082c0:	28096940 	call	2809694 <__mulsi3>
 28082c4:	a809883a 	mov	r4,r21
 28082c8:	b80b883a 	mov	r5,r23
 28082cc:	1027883a 	mov	r19,r2
 28082d0:	28096940 	call	2809694 <__mulsi3>
 28082d4:	100b883a 	mov	r5,r2
 28082d8:	a004d43a 	srli	r2,r20,16
 28082dc:	8ce3883a 	add	r17,r17,r19
 28082e0:	1449883a 	add	r4,r2,r17
 28082e4:	24c0022e 	bgeu	r4,r19,28082f0 <__umoddi3+0x534>
 28082e8:	00800074 	movhi	r2,1
 28082ec:	288b883a 	add	r5,r5,r2
 28082f0:	2004d43a 	srli	r2,r4,16
 28082f4:	2008943a 	slli	r4,r4,16
 28082f8:	a0ffffcc 	andi	r3,r20,65535
 28082fc:	288d883a 	add	r6,r5,r2
 2808300:	20c9883a 	add	r4,r4,r3
 2808304:	81800b36 	bltu	r16,r6,2808334 <__umoddi3+0x578>
 2808308:	81804026 	beq	r16,r6,280840c <__umoddi3+0x650>
 280830c:	818dc83a 	sub	r6,r16,r6
 2808310:	00000f06 	br	2808350 <__umoddi3+0x594>
 2808314:	30c5c83a 	sub	r2,r6,r3
 2808318:	182d883a 	mov	r22,r3
 280831c:	8084d83a 	srl	r2,r16,r2
 2808320:	a8c6983a 	sll	r3,r21,r3
 2808324:	9da6983a 	sll	r19,r19,r22
 2808328:	85a0983a 	sll	r16,r16,r22
 280832c:	18aab03a 	or	r21,r3,r2
 2808330:	003f1d06 	br	2807fa8 <__umoddi3+0x1ec>
 2808334:	d8c00017 	ldw	r3,0(sp)
 2808338:	20c5c83a 	sub	r2,r4,r3
 280833c:	2089803a 	cmpltu	r4,r4,r2
 2808340:	3587c83a 	sub	r3,r6,r22
 2808344:	1907c83a 	sub	r3,r3,r4
 2808348:	80cdc83a 	sub	r6,r16,r3
 280834c:	1009883a 	mov	r4,r2
 2808350:	d9400117 	ldw	r5,4(sp)
 2808354:	2905c83a 	sub	r2,r5,r4
 2808358:	2887803a 	cmpltu	r3,r5,r2
 280835c:	30c7c83a 	sub	r3,r6,r3
 2808360:	d9800317 	ldw	r6,12(sp)
 2808364:	1484d83a 	srl	r2,r2,r18
 2808368:	1988983a 	sll	r4,r3,r6
 280836c:	1c86d83a 	srl	r3,r3,r18
 2808370:	2088b03a 	or	r4,r4,r2
 2808374:	2011883a 	mov	r8,r4
 2808378:	1813883a 	mov	r9,r3
 280837c:	d9000415 	stw	r4,16(sp)
 2808380:	d8c00515 	stw	r3,20(sp)
 2808384:	003ed406 	br	2807ed8 <__umoddi3+0x11c>
 2808388:	01400604 	movi	r5,24
 280838c:	2805883a 	mov	r2,r5
 2808390:	003ea606 	br	2807e2c <__umoddi3+0x70>
 2808394:	01400204 	movi	r5,8
 2808398:	2805883a 	mov	r2,r5
 280839c:	003ea306 	br	2807e2c <__umoddi3+0x70>
 28083a0:	01400204 	movi	r5,8
 28083a4:	2805883a 	mov	r2,r5
 28083a8:	003edf06 	br	2807f28 <__umoddi3+0x16c>
 28083ac:	01400204 	movi	r5,8
 28083b0:	2805883a 	mov	r2,r5
 28083b4:	003ef206 	br	2807f80 <__umoddi3+0x1c4>
 28083b8:	01400604 	movi	r5,24
 28083bc:	2805883a 	mov	r2,r5
 28083c0:	003eef06 	br	2807f80 <__umoddi3+0x1c4>
 28083c4:	01400604 	movi	r5,24
 28083c8:	2805883a 	mov	r2,r5
 28083cc:	003ed606 	br	2807f28 <__umoddi3+0x16c>
 28083d0:	153fa92e 	bgeu	r2,r20,2808278 <__umoddi3+0x4bc>
 28083d4:	843fffc4 	addi	r16,r16,-1
 28083d8:	1585883a 	add	r2,r2,r22
 28083dc:	003fa606 	br	2808278 <__umoddi3+0x4bc>
 28083e0:	157f912e 	bgeu	r2,r21,2808228 <__umoddi3+0x46c>
 28083e4:	e73fffc4 	addi	fp,fp,-1
 28083e8:	1585883a 	add	r2,r2,r22
 28083ec:	003f8e06 	br	2808228 <__umoddi3+0x46c>
 28083f0:	157f542e 	bgeu	r2,r21,2808144 <__umoddi3+0x388>
 28083f4:	14c5883a 	add	r2,r2,r19
 28083f8:	003f5206 	br	2808144 <__umoddi3+0x388>
 28083fc:	14c5883a 	add	r2,r2,r19
 2808400:	003efc06 	br	2807ff4 <__umoddi3+0x238>
 2808404:	14c5883a 	add	r2,r2,r19
 2808408:	003ea606 	br	2807ea4 <__umoddi3+0xe8>
 280840c:	d8800117 	ldw	r2,4(sp)
 2808410:	113fc836 	bltu	r2,r4,2808334 <__umoddi3+0x578>
 2808414:	000d883a 	mov	r6,zero
 2808418:	003fcd06 	br	2808350 <__umoddi3+0x594>

0280841c <_fpadd_parts>:
 280841c:	defff804 	addi	sp,sp,-32
 2808420:	dcc00315 	stw	r19,12(sp)
 2808424:	2027883a 	mov	r19,r4
 2808428:	21000017 	ldw	r4,0(r4)
 280842c:	00c00044 	movi	r3,1
 2808430:	dd400515 	stw	r21,20(sp)
 2808434:	dd000415 	stw	r20,16(sp)
 2808438:	ddc00715 	stw	r23,28(sp)
 280843c:	dd800615 	stw	r22,24(sp)
 2808440:	dc800215 	stw	r18,8(sp)
 2808444:	dc400115 	stw	r17,4(sp)
 2808448:	dc000015 	stw	r16,0(sp)
 280844c:	282b883a 	mov	r21,r5
 2808450:	3029883a 	mov	r20,r6
 2808454:	1900632e 	bgeu	r3,r4,28085e4 <_fpadd_parts+0x1c8>
 2808458:	28800017 	ldw	r2,0(r5)
 280845c:	1880812e 	bgeu	r3,r2,2808664 <_fpadd_parts+0x248>
 2808460:	00c00104 	movi	r3,4
 2808464:	20c0dc26 	beq	r4,r3,28087d8 <_fpadd_parts+0x3bc>
 2808468:	10c07e26 	beq	r2,r3,2808664 <_fpadd_parts+0x248>
 280846c:	00c00084 	movi	r3,2
 2808470:	10c06726 	beq	r2,r3,2808610 <_fpadd_parts+0x1f4>
 2808474:	20c07b26 	beq	r4,r3,2808664 <_fpadd_parts+0x248>
 2808478:	9dc00217 	ldw	r23,8(r19)
 280847c:	28c00217 	ldw	r3,8(r5)
 2808480:	9c400317 	ldw	r17,12(r19)
 2808484:	2bc00317 	ldw	r15,12(r5)
 2808488:	b8cdc83a 	sub	r6,r23,r3
 280848c:	9c800417 	ldw	r18,16(r19)
 2808490:	2c000417 	ldw	r16,16(r5)
 2808494:	3009883a 	mov	r4,r6
 2808498:	30009716 	blt	r6,zero,28086f8 <_fpadd_parts+0x2dc>
 280849c:	00800fc4 	movi	r2,63
 28084a0:	11806b16 	blt	r2,r6,2808650 <_fpadd_parts+0x234>
 28084a4:	0100a40e 	bge	zero,r4,2808738 <_fpadd_parts+0x31c>
 28084a8:	35bff804 	addi	r22,r6,-32
 28084ac:	b000bc16 	blt	r22,zero,28087a0 <_fpadd_parts+0x384>
 28084b0:	8596d83a 	srl	r11,r16,r22
 28084b4:	0019883a 	mov	r12,zero
 28084b8:	0013883a 	mov	r9,zero
 28084bc:	01000044 	movi	r4,1
 28084c0:	0015883a 	mov	r10,zero
 28084c4:	b000be16 	blt	r22,zero,28087c0 <_fpadd_parts+0x3a4>
 28084c8:	2590983a 	sll	r8,r4,r22
 28084cc:	000f883a 	mov	r7,zero
 28084d0:	00bfffc4 	movi	r2,-1
 28084d4:	3889883a 	add	r4,r7,r2
 28084d8:	408b883a 	add	r5,r8,r2
 28084dc:	21cd803a 	cmpltu	r6,r4,r7
 28084e0:	314b883a 	add	r5,r6,r5
 28084e4:	7904703a 	and	r2,r15,r4
 28084e8:	8146703a 	and	r3,r16,r5
 28084ec:	10c4b03a 	or	r2,r2,r3
 28084f0:	10000226 	beq	r2,zero,28084fc <_fpadd_parts+0xe0>
 28084f4:	02400044 	movi	r9,1
 28084f8:	0015883a 	mov	r10,zero
 28084fc:	5a5eb03a 	or	r15,r11,r9
 2808500:	62a0b03a 	or	r16,r12,r10
 2808504:	99400117 	ldw	r5,4(r19)
 2808508:	a8800117 	ldw	r2,4(r21)
 280850c:	28806e26 	beq	r5,r2,28086c8 <_fpadd_parts+0x2ac>
 2808510:	28006626 	beq	r5,zero,28086ac <_fpadd_parts+0x290>
 2808514:	7c45c83a 	sub	r2,r15,r17
 2808518:	7889803a 	cmpltu	r4,r15,r2
 280851c:	8487c83a 	sub	r3,r16,r18
 2808520:	1909c83a 	sub	r4,r3,r4
 2808524:	100d883a 	mov	r6,r2
 2808528:	200f883a 	mov	r7,r4
 280852c:	38007716 	blt	r7,zero,280870c <_fpadd_parts+0x2f0>
 2808530:	a5c00215 	stw	r23,8(r20)
 2808534:	a1c00415 	stw	r7,16(r20)
 2808538:	a0000115 	stw	zero,4(r20)
 280853c:	a1800315 	stw	r6,12(r20)
 2808540:	a2000317 	ldw	r8,12(r20)
 2808544:	a2400417 	ldw	r9,16(r20)
 2808548:	00bfffc4 	movi	r2,-1
 280854c:	408b883a 	add	r5,r8,r2
 2808550:	2a09803a 	cmpltu	r4,r5,r8
 2808554:	488d883a 	add	r6,r9,r2
 2808558:	01c40034 	movhi	r7,4096
 280855c:	39ffffc4 	addi	r7,r7,-1
 2808560:	218d883a 	add	r6,r4,r6
 2808564:	39801736 	bltu	r7,r6,28085c4 <_fpadd_parts+0x1a8>
 2808568:	31c06526 	beq	r6,r7,2808700 <_fpadd_parts+0x2e4>
 280856c:	a3000217 	ldw	r12,8(r20)
 2808570:	4209883a 	add	r4,r8,r8
 2808574:	00bfffc4 	movi	r2,-1
 2808578:	220f803a 	cmpltu	r7,r4,r8
 280857c:	4a4b883a 	add	r5,r9,r9
 2808580:	394f883a 	add	r7,r7,r5
 2808584:	2095883a 	add	r10,r4,r2
 2808588:	3897883a 	add	r11,r7,r2
 280858c:	510d803a 	cmpltu	r6,r10,r4
 2808590:	6099883a 	add	r12,r12,r2
 2808594:	32d7883a 	add	r11,r6,r11
 2808598:	00840034 	movhi	r2,4096
 280859c:	10bfffc4 	addi	r2,r2,-1
 28085a0:	2011883a 	mov	r8,r4
 28085a4:	3813883a 	mov	r9,r7
 28085a8:	a1000315 	stw	r4,12(r20)
 28085ac:	a1c00415 	stw	r7,16(r20)
 28085b0:	a3000215 	stw	r12,8(r20)
 28085b4:	12c00336 	bltu	r2,r11,28085c4 <_fpadd_parts+0x1a8>
 28085b8:	58bfed1e 	bne	r11,r2,2808570 <_fpadd_parts+0x154>
 28085bc:	00bfff84 	movi	r2,-2
 28085c0:	12bfeb2e 	bgeu	r2,r10,2808570 <_fpadd_parts+0x154>
 28085c4:	a2800417 	ldw	r10,16(r20)
 28085c8:	008000c4 	movi	r2,3
 28085cc:	00c80034 	movhi	r3,8192
 28085d0:	18ffffc4 	addi	r3,r3,-1
 28085d4:	a2400317 	ldw	r9,12(r20)
 28085d8:	a0800015 	stw	r2,0(r20)
 28085dc:	1a802336 	bltu	r3,r10,280866c <_fpadd_parts+0x250>
 28085e0:	a027883a 	mov	r19,r20
 28085e4:	9805883a 	mov	r2,r19
 28085e8:	ddc00717 	ldw	r23,28(sp)
 28085ec:	dd800617 	ldw	r22,24(sp)
 28085f0:	dd400517 	ldw	r21,20(sp)
 28085f4:	dd000417 	ldw	r20,16(sp)
 28085f8:	dcc00317 	ldw	r19,12(sp)
 28085fc:	dc800217 	ldw	r18,8(sp)
 2808600:	dc400117 	ldw	r17,4(sp)
 2808604:	dc000017 	ldw	r16,0(sp)
 2808608:	dec00804 	addi	sp,sp,32
 280860c:	f800283a 	ret
 2808610:	20fff41e 	bne	r4,r3,28085e4 <_fpadd_parts+0x1c8>
 2808614:	31000015 	stw	r4,0(r6)
 2808618:	98800117 	ldw	r2,4(r19)
 280861c:	30800115 	stw	r2,4(r6)
 2808620:	98c00217 	ldw	r3,8(r19)
 2808624:	30c00215 	stw	r3,8(r6)
 2808628:	98800317 	ldw	r2,12(r19)
 280862c:	30800315 	stw	r2,12(r6)
 2808630:	98c00417 	ldw	r3,16(r19)
 2808634:	30c00415 	stw	r3,16(r6)
 2808638:	98800117 	ldw	r2,4(r19)
 280863c:	28c00117 	ldw	r3,4(r5)
 2808640:	3027883a 	mov	r19,r6
 2808644:	10c4703a 	and	r2,r2,r3
 2808648:	30800115 	stw	r2,4(r6)
 280864c:	003fe506 	br	28085e4 <_fpadd_parts+0x1c8>
 2808650:	1dc02616 	blt	r3,r23,28086ec <_fpadd_parts+0x2d0>
 2808654:	0023883a 	mov	r17,zero
 2808658:	182f883a 	mov	r23,r3
 280865c:	0025883a 	mov	r18,zero
 2808660:	003fa806 	br	2808504 <_fpadd_parts+0xe8>
 2808664:	a827883a 	mov	r19,r21
 2808668:	003fde06 	br	28085e4 <_fpadd_parts+0x1c8>
 280866c:	01800044 	movi	r6,1
 2808670:	500497fa 	slli	r2,r10,31
 2808674:	4808d07a 	srli	r4,r9,1
 2808678:	518ad83a 	srl	r5,r10,r6
 280867c:	a2000217 	ldw	r8,8(r20)
 2808680:	1108b03a 	or	r4,r2,r4
 2808684:	0007883a 	mov	r3,zero
 2808688:	4984703a 	and	r2,r9,r6
 280868c:	208cb03a 	or	r6,r4,r2
 2808690:	28ceb03a 	or	r7,r5,r3
 2808694:	42000044 	addi	r8,r8,1
 2808698:	a027883a 	mov	r19,r20
 280869c:	a1c00415 	stw	r7,16(r20)
 28086a0:	a2000215 	stw	r8,8(r20)
 28086a4:	a1800315 	stw	r6,12(r20)
 28086a8:	003fce06 	br	28085e4 <_fpadd_parts+0x1c8>
 28086ac:	8bc5c83a 	sub	r2,r17,r15
 28086b0:	8889803a 	cmpltu	r4,r17,r2
 28086b4:	9407c83a 	sub	r3,r18,r16
 28086b8:	1909c83a 	sub	r4,r3,r4
 28086bc:	100d883a 	mov	r6,r2
 28086c0:	200f883a 	mov	r7,r4
 28086c4:	003f9906 	br	280852c <_fpadd_parts+0x110>
 28086c8:	7c45883a 	add	r2,r15,r17
 28086cc:	13c9803a 	cmpltu	r4,r2,r15
 28086d0:	8487883a 	add	r3,r16,r18
 28086d4:	20c9883a 	add	r4,r4,r3
 28086d8:	a1400115 	stw	r5,4(r20)
 28086dc:	a5c00215 	stw	r23,8(r20)
 28086e0:	a0800315 	stw	r2,12(r20)
 28086e4:	a1000415 	stw	r4,16(r20)
 28086e8:	003fb606 	br	28085c4 <_fpadd_parts+0x1a8>
 28086ec:	001f883a 	mov	r15,zero
 28086f0:	0021883a 	mov	r16,zero
 28086f4:	003f8306 	br	2808504 <_fpadd_parts+0xe8>
 28086f8:	018dc83a 	sub	r6,zero,r6
 28086fc:	003f6706 	br	280849c <_fpadd_parts+0x80>
 2808700:	00bfff84 	movi	r2,-2
 2808704:	117faf36 	bltu	r2,r5,28085c4 <_fpadd_parts+0x1a8>
 2808708:	003f9806 	br	280856c <_fpadd_parts+0x150>
 280870c:	0005883a 	mov	r2,zero
 2808710:	1189c83a 	sub	r4,r2,r6
 2808714:	1105803a 	cmpltu	r2,r2,r4
 2808718:	01cbc83a 	sub	r5,zero,r7
 280871c:	2885c83a 	sub	r2,r5,r2
 2808720:	01800044 	movi	r6,1
 2808724:	a1800115 	stw	r6,4(r20)
 2808728:	a5c00215 	stw	r23,8(r20)
 280872c:	a1000315 	stw	r4,12(r20)
 2808730:	a0800415 	stw	r2,16(r20)
 2808734:	003f8206 	br	2808540 <_fpadd_parts+0x124>
 2808738:	203f7226 	beq	r4,zero,2808504 <_fpadd_parts+0xe8>
 280873c:	35bff804 	addi	r22,r6,-32
 2808740:	b9af883a 	add	r23,r23,r6
 2808744:	b0003116 	blt	r22,zero,280880c <_fpadd_parts+0x3f0>
 2808748:	959ad83a 	srl	r13,r18,r22
 280874c:	001d883a 	mov	r14,zero
 2808750:	000f883a 	mov	r7,zero
 2808754:	01000044 	movi	r4,1
 2808758:	0011883a 	mov	r8,zero
 280875c:	b0002516 	blt	r22,zero,28087f4 <_fpadd_parts+0x3d8>
 2808760:	2594983a 	sll	r10,r4,r22
 2808764:	0013883a 	mov	r9,zero
 2808768:	00bfffc4 	movi	r2,-1
 280876c:	4889883a 	add	r4,r9,r2
 2808770:	508b883a 	add	r5,r10,r2
 2808774:	224d803a 	cmpltu	r6,r4,r9
 2808778:	314b883a 	add	r5,r6,r5
 280877c:	8904703a 	and	r2,r17,r4
 2808780:	9146703a 	and	r3,r18,r5
 2808784:	10c4b03a 	or	r2,r2,r3
 2808788:	10000226 	beq	r2,zero,2808794 <_fpadd_parts+0x378>
 280878c:	01c00044 	movi	r7,1
 2808790:	0011883a 	mov	r8,zero
 2808794:	69e2b03a 	or	r17,r13,r7
 2808798:	7224b03a 	or	r18,r14,r8
 280879c:	003f5906 	br	2808504 <_fpadd_parts+0xe8>
 28087a0:	8407883a 	add	r3,r16,r16
 28087a4:	008007c4 	movi	r2,31
 28087a8:	1185c83a 	sub	r2,r2,r6
 28087ac:	1886983a 	sll	r3,r3,r2
 28087b0:	7996d83a 	srl	r11,r15,r6
 28087b4:	8198d83a 	srl	r12,r16,r6
 28087b8:	1ad6b03a 	or	r11,r3,r11
 28087bc:	003f3e06 	br	28084b8 <_fpadd_parts+0x9c>
 28087c0:	2006d07a 	srli	r3,r4,1
 28087c4:	008007c4 	movi	r2,31
 28087c8:	1185c83a 	sub	r2,r2,r6
 28087cc:	1890d83a 	srl	r8,r3,r2
 28087d0:	218e983a 	sll	r7,r4,r6
 28087d4:	003f3e06 	br	28084d0 <_fpadd_parts+0xb4>
 28087d8:	113f821e 	bne	r2,r4,28085e4 <_fpadd_parts+0x1c8>
 28087dc:	28c00117 	ldw	r3,4(r5)
 28087e0:	98800117 	ldw	r2,4(r19)
 28087e4:	10ff7f26 	beq	r2,r3,28085e4 <_fpadd_parts+0x1c8>
 28087e8:	04c0a074 	movhi	r19,641
 28087ec:	9cf62904 	addi	r19,r19,-10076
 28087f0:	003f7c06 	br	28085e4 <_fpadd_parts+0x1c8>
 28087f4:	2006d07a 	srli	r3,r4,1
 28087f8:	008007c4 	movi	r2,31
 28087fc:	1185c83a 	sub	r2,r2,r6
 2808800:	1894d83a 	srl	r10,r3,r2
 2808804:	2192983a 	sll	r9,r4,r6
 2808808:	003fd706 	br	2808768 <_fpadd_parts+0x34c>
 280880c:	9487883a 	add	r3,r18,r18
 2808810:	008007c4 	movi	r2,31
 2808814:	1185c83a 	sub	r2,r2,r6
 2808818:	1886983a 	sll	r3,r3,r2
 280881c:	899ad83a 	srl	r13,r17,r6
 2808820:	919cd83a 	srl	r14,r18,r6
 2808824:	1b5ab03a 	or	r13,r3,r13
 2808828:	003fc906 	br	2808750 <_fpadd_parts+0x334>

0280882c <__subdf3>:
 280882c:	deffea04 	addi	sp,sp,-88
 2808830:	dcc01415 	stw	r19,80(sp)
 2808834:	dcc00404 	addi	r19,sp,16
 2808838:	2011883a 	mov	r8,r4
 280883c:	2813883a 	mov	r9,r5
 2808840:	dc401315 	stw	r17,76(sp)
 2808844:	d809883a 	mov	r4,sp
 2808848:	980b883a 	mov	r5,r19
 280884c:	dc400904 	addi	r17,sp,36
 2808850:	dfc01515 	stw	ra,84(sp)
 2808854:	da400115 	stw	r9,4(sp)
 2808858:	d9c00315 	stw	r7,12(sp)
 280885c:	da000015 	stw	r8,0(sp)
 2808860:	d9800215 	stw	r6,8(sp)
 2808864:	2809b840 	call	2809b84 <__unpack_d>
 2808868:	d9000204 	addi	r4,sp,8
 280886c:	880b883a 	mov	r5,r17
 2808870:	2809b840 	call	2809b84 <__unpack_d>
 2808874:	d8800a17 	ldw	r2,40(sp)
 2808878:	880b883a 	mov	r5,r17
 280887c:	9809883a 	mov	r4,r19
 2808880:	d9800e04 	addi	r6,sp,56
 2808884:	1080005c 	xori	r2,r2,1
 2808888:	d8800a15 	stw	r2,40(sp)
 280888c:	280841c0 	call	280841c <_fpadd_parts>
 2808890:	1009883a 	mov	r4,r2
 2808894:	28098700 	call	2809870 <__pack_d>
 2808898:	dfc01517 	ldw	ra,84(sp)
 280889c:	dcc01417 	ldw	r19,80(sp)
 28088a0:	dc401317 	ldw	r17,76(sp)
 28088a4:	dec01604 	addi	sp,sp,88
 28088a8:	f800283a 	ret

028088ac <__adddf3>:
 28088ac:	deffea04 	addi	sp,sp,-88
 28088b0:	dcc01415 	stw	r19,80(sp)
 28088b4:	dcc00404 	addi	r19,sp,16
 28088b8:	2011883a 	mov	r8,r4
 28088bc:	2813883a 	mov	r9,r5
 28088c0:	dc401315 	stw	r17,76(sp)
 28088c4:	d809883a 	mov	r4,sp
 28088c8:	980b883a 	mov	r5,r19
 28088cc:	dc400904 	addi	r17,sp,36
 28088d0:	dfc01515 	stw	ra,84(sp)
 28088d4:	da400115 	stw	r9,4(sp)
 28088d8:	d9c00315 	stw	r7,12(sp)
 28088dc:	da000015 	stw	r8,0(sp)
 28088e0:	d9800215 	stw	r6,8(sp)
 28088e4:	2809b840 	call	2809b84 <__unpack_d>
 28088e8:	d9000204 	addi	r4,sp,8
 28088ec:	880b883a 	mov	r5,r17
 28088f0:	2809b840 	call	2809b84 <__unpack_d>
 28088f4:	d9800e04 	addi	r6,sp,56
 28088f8:	9809883a 	mov	r4,r19
 28088fc:	880b883a 	mov	r5,r17
 2808900:	280841c0 	call	280841c <_fpadd_parts>
 2808904:	1009883a 	mov	r4,r2
 2808908:	28098700 	call	2809870 <__pack_d>
 280890c:	dfc01517 	ldw	ra,84(sp)
 2808910:	dcc01417 	ldw	r19,80(sp)
 2808914:	dc401317 	ldw	r17,76(sp)
 2808918:	dec01604 	addi	sp,sp,88
 280891c:	f800283a 	ret

02808920 <__muldf3>:
 2808920:	deffe004 	addi	sp,sp,-128
 2808924:	dc401815 	stw	r17,96(sp)
 2808928:	dc400404 	addi	r17,sp,16
 280892c:	2011883a 	mov	r8,r4
 2808930:	2813883a 	mov	r9,r5
 2808934:	dc001715 	stw	r16,92(sp)
 2808938:	d809883a 	mov	r4,sp
 280893c:	880b883a 	mov	r5,r17
 2808940:	dc000904 	addi	r16,sp,36
 2808944:	dfc01f15 	stw	ra,124(sp)
 2808948:	da400115 	stw	r9,4(sp)
 280894c:	d9c00315 	stw	r7,12(sp)
 2808950:	da000015 	stw	r8,0(sp)
 2808954:	d9800215 	stw	r6,8(sp)
 2808958:	ddc01e15 	stw	r23,120(sp)
 280895c:	dd801d15 	stw	r22,116(sp)
 2808960:	dd401c15 	stw	r21,112(sp)
 2808964:	dd001b15 	stw	r20,108(sp)
 2808968:	dcc01a15 	stw	r19,104(sp)
 280896c:	dc801915 	stw	r18,100(sp)
 2808970:	2809b840 	call	2809b84 <__unpack_d>
 2808974:	d9000204 	addi	r4,sp,8
 2808978:	800b883a 	mov	r5,r16
 280897c:	2809b840 	call	2809b84 <__unpack_d>
 2808980:	d9000417 	ldw	r4,16(sp)
 2808984:	00800044 	movi	r2,1
 2808988:	1100102e 	bgeu	r2,r4,28089cc <__muldf3+0xac>
 280898c:	d8c00917 	ldw	r3,36(sp)
 2808990:	10c0062e 	bgeu	r2,r3,28089ac <__muldf3+0x8c>
 2808994:	00800104 	movi	r2,4
 2808998:	20800a26 	beq	r4,r2,28089c4 <__muldf3+0xa4>
 280899c:	1880cc26 	beq	r3,r2,2808cd0 <__muldf3+0x3b0>
 28089a0:	00800084 	movi	r2,2
 28089a4:	20800926 	beq	r4,r2,28089cc <__muldf3+0xac>
 28089a8:	1880191e 	bne	r3,r2,2808a10 <__muldf3+0xf0>
 28089ac:	d8c00a17 	ldw	r3,40(sp)
 28089b0:	d8800517 	ldw	r2,20(sp)
 28089b4:	8009883a 	mov	r4,r16
 28089b8:	10c4c03a 	cmpne	r2,r2,r3
 28089bc:	d8800a15 	stw	r2,40(sp)
 28089c0:	00000706 	br	28089e0 <__muldf3+0xc0>
 28089c4:	00800084 	movi	r2,2
 28089c8:	1880c326 	beq	r3,r2,2808cd8 <__muldf3+0x3b8>
 28089cc:	d8800517 	ldw	r2,20(sp)
 28089d0:	d8c00a17 	ldw	r3,40(sp)
 28089d4:	8809883a 	mov	r4,r17
 28089d8:	10c4c03a 	cmpne	r2,r2,r3
 28089dc:	d8800515 	stw	r2,20(sp)
 28089e0:	28098700 	call	2809870 <__pack_d>
 28089e4:	dfc01f17 	ldw	ra,124(sp)
 28089e8:	ddc01e17 	ldw	r23,120(sp)
 28089ec:	dd801d17 	ldw	r22,116(sp)
 28089f0:	dd401c17 	ldw	r21,112(sp)
 28089f4:	dd001b17 	ldw	r20,108(sp)
 28089f8:	dcc01a17 	ldw	r19,104(sp)
 28089fc:	dc801917 	ldw	r18,100(sp)
 2808a00:	dc401817 	ldw	r17,96(sp)
 2808a04:	dc001717 	ldw	r16,92(sp)
 2808a08:	dec02004 	addi	sp,sp,128
 2808a0c:	f800283a 	ret
 2808a10:	dd800717 	ldw	r22,28(sp)
 2808a14:	dc800c17 	ldw	r18,48(sp)
 2808a18:	002b883a 	mov	r21,zero
 2808a1c:	0023883a 	mov	r17,zero
 2808a20:	a80b883a 	mov	r5,r21
 2808a24:	b00d883a 	mov	r6,r22
 2808a28:	880f883a 	mov	r7,r17
 2808a2c:	ddc00817 	ldw	r23,32(sp)
 2808a30:	dcc00d17 	ldw	r19,52(sp)
 2808a34:	9009883a 	mov	r4,r18
 2808a38:	28096cc0 	call	28096cc <__muldi3>
 2808a3c:	001b883a 	mov	r13,zero
 2808a40:	680f883a 	mov	r7,r13
 2808a44:	b009883a 	mov	r4,r22
 2808a48:	000b883a 	mov	r5,zero
 2808a4c:	980d883a 	mov	r6,r19
 2808a50:	b82d883a 	mov	r22,r23
 2808a54:	002f883a 	mov	r23,zero
 2808a58:	db401615 	stw	r13,88(sp)
 2808a5c:	d8801315 	stw	r2,76(sp)
 2808a60:	d8c01415 	stw	r3,80(sp)
 2808a64:	dcc01515 	stw	r19,84(sp)
 2808a68:	28096cc0 	call	28096cc <__muldi3>
 2808a6c:	b00d883a 	mov	r6,r22
 2808a70:	000b883a 	mov	r5,zero
 2808a74:	9009883a 	mov	r4,r18
 2808a78:	b80f883a 	mov	r7,r23
 2808a7c:	1021883a 	mov	r16,r2
 2808a80:	1823883a 	mov	r17,r3
 2808a84:	28096cc0 	call	28096cc <__muldi3>
 2808a88:	8085883a 	add	r2,r16,r2
 2808a8c:	140d803a 	cmpltu	r6,r2,r16
 2808a90:	88c7883a 	add	r3,r17,r3
 2808a94:	30cd883a 	add	r6,r6,r3
 2808a98:	1029883a 	mov	r20,r2
 2808a9c:	302b883a 	mov	r21,r6
 2808aa0:	da801317 	ldw	r10,76(sp)
 2808aa4:	dac01417 	ldw	r11,80(sp)
 2808aa8:	db001517 	ldw	r12,84(sp)
 2808aac:	db401617 	ldw	r13,88(sp)
 2808ab0:	3440612e 	bgeu	r6,r17,2808c38 <__muldf3+0x318>
 2808ab4:	0009883a 	mov	r4,zero
 2808ab8:	5105883a 	add	r2,r10,r4
 2808abc:	128d803a 	cmpltu	r6,r2,r10
 2808ac0:	5d07883a 	add	r3,r11,r20
 2808ac4:	30cd883a 	add	r6,r6,r3
 2808ac8:	0021883a 	mov	r16,zero
 2808acc:	04400044 	movi	r17,1
 2808ad0:	1025883a 	mov	r18,r2
 2808ad4:	3027883a 	mov	r19,r6
 2808ad8:	32c06236 	bltu	r6,r11,2808c64 <__muldf3+0x344>
 2808adc:	59807a26 	beq	r11,r6,2808cc8 <__muldf3+0x3a8>
 2808ae0:	680b883a 	mov	r5,r13
 2808ae4:	b80f883a 	mov	r7,r23
 2808ae8:	6009883a 	mov	r4,r12
 2808aec:	b00d883a 	mov	r6,r22
 2808af0:	28096cc0 	call	28096cc <__muldi3>
 2808af4:	1009883a 	mov	r4,r2
 2808af8:	000f883a 	mov	r7,zero
 2808afc:	1545883a 	add	r2,r2,r21
 2808b00:	1111803a 	cmpltu	r8,r2,r4
 2808b04:	19c7883a 	add	r3,r3,r7
 2808b08:	40c7883a 	add	r3,r8,r3
 2808b0c:	88cb883a 	add	r5,r17,r3
 2808b10:	d8c00617 	ldw	r3,24(sp)
 2808b14:	8089883a 	add	r4,r16,r2
 2808b18:	d8800b17 	ldw	r2,44(sp)
 2808b1c:	18c00104 	addi	r3,r3,4
 2808b20:	240d803a 	cmpltu	r6,r4,r16
 2808b24:	10c7883a 	add	r3,r2,r3
 2808b28:	2013883a 	mov	r9,r4
 2808b2c:	d8800a17 	ldw	r2,40(sp)
 2808b30:	d9000517 	ldw	r4,20(sp)
 2808b34:	314d883a 	add	r6,r6,r5
 2808b38:	3015883a 	mov	r10,r6
 2808b3c:	2088c03a 	cmpne	r4,r4,r2
 2808b40:	00880034 	movhi	r2,8192
 2808b44:	10bfffc4 	addi	r2,r2,-1
 2808b48:	d9000f15 	stw	r4,60(sp)
 2808b4c:	d8c01015 	stw	r3,64(sp)
 2808b50:	1180162e 	bgeu	r2,r6,2808bac <__muldf3+0x28c>
 2808b54:	1811883a 	mov	r8,r3
 2808b58:	101f883a 	mov	r15,r2
 2808b5c:	980497fa 	slli	r2,r19,31
 2808b60:	9016d07a 	srli	r11,r18,1
 2808b64:	500697fa 	slli	r3,r10,31
 2808b68:	480cd07a 	srli	r6,r9,1
 2808b6c:	500ed07a 	srli	r7,r10,1
 2808b70:	12d6b03a 	or	r11,r2,r11
 2808b74:	00800044 	movi	r2,1
 2808b78:	198cb03a 	or	r6,r3,r6
 2808b7c:	4888703a 	and	r4,r9,r2
 2808b80:	9818d07a 	srli	r12,r19,1
 2808b84:	001b883a 	mov	r13,zero
 2808b88:	03a00034 	movhi	r14,32768
 2808b8c:	3013883a 	mov	r9,r6
 2808b90:	3815883a 	mov	r10,r7
 2808b94:	4091883a 	add	r8,r8,r2
 2808b98:	20000226 	beq	r4,zero,2808ba4 <__muldf3+0x284>
 2808b9c:	5b64b03a 	or	r18,r11,r13
 2808ba0:	63a6b03a 	or	r19,r12,r14
 2808ba4:	7abfed36 	bltu	r15,r10,2808b5c <__muldf3+0x23c>
 2808ba8:	da001015 	stw	r8,64(sp)
 2808bac:	00840034 	movhi	r2,4096
 2808bb0:	10bfffc4 	addi	r2,r2,-1
 2808bb4:	12801436 	bltu	r2,r10,2808c08 <__muldf3+0x2e8>
 2808bb8:	da001017 	ldw	r8,64(sp)
 2808bbc:	101f883a 	mov	r15,r2
 2808bc0:	4a45883a 	add	r2,r9,r9
 2808bc4:	124d803a 	cmpltu	r6,r2,r9
 2808bc8:	5287883a 	add	r3,r10,r10
 2808bcc:	9497883a 	add	r11,r18,r18
 2808bd0:	5c8f803a 	cmpltu	r7,r11,r18
 2808bd4:	9cd9883a 	add	r12,r19,r19
 2808bd8:	01000044 	movi	r4,1
 2808bdc:	30cd883a 	add	r6,r6,r3
 2808be0:	3b0f883a 	add	r7,r7,r12
 2808be4:	423fffc4 	addi	r8,r8,-1
 2808be8:	1013883a 	mov	r9,r2
 2808bec:	3015883a 	mov	r10,r6
 2808bf0:	111ab03a 	or	r13,r2,r4
 2808bf4:	98003016 	blt	r19,zero,2808cb8 <__muldf3+0x398>
 2808bf8:	5825883a 	mov	r18,r11
 2808bfc:	3827883a 	mov	r19,r7
 2808c00:	7abfef2e 	bgeu	r15,r10,2808bc0 <__muldf3+0x2a0>
 2808c04:	da001015 	stw	r8,64(sp)
 2808c08:	00803fc4 	movi	r2,255
 2808c0c:	488e703a 	and	r7,r9,r2
 2808c10:	00802004 	movi	r2,128
 2808c14:	0007883a 	mov	r3,zero
 2808c18:	0011883a 	mov	r8,zero
 2808c1c:	38801826 	beq	r7,r2,2808c80 <__muldf3+0x360>
 2808c20:	008000c4 	movi	r2,3
 2808c24:	d9000e04 	addi	r4,sp,56
 2808c28:	da801215 	stw	r10,72(sp)
 2808c2c:	d8800e15 	stw	r2,56(sp)
 2808c30:	da401115 	stw	r9,68(sp)
 2808c34:	003f6a06 	br	28089e0 <__muldf3+0xc0>
 2808c38:	89802126 	beq	r17,r6,2808cc0 <__muldf3+0x3a0>
 2808c3c:	0009883a 	mov	r4,zero
 2808c40:	5105883a 	add	r2,r10,r4
 2808c44:	128d803a 	cmpltu	r6,r2,r10
 2808c48:	5d07883a 	add	r3,r11,r20
 2808c4c:	30cd883a 	add	r6,r6,r3
 2808c50:	0021883a 	mov	r16,zero
 2808c54:	0023883a 	mov	r17,zero
 2808c58:	1025883a 	mov	r18,r2
 2808c5c:	3027883a 	mov	r19,r6
 2808c60:	32ff9e2e 	bgeu	r6,r11,2808adc <__muldf3+0x1bc>
 2808c64:	00800044 	movi	r2,1
 2808c68:	8089883a 	add	r4,r16,r2
 2808c6c:	240d803a 	cmpltu	r6,r4,r16
 2808c70:	344d883a 	add	r6,r6,r17
 2808c74:	2021883a 	mov	r16,r4
 2808c78:	3023883a 	mov	r17,r6
 2808c7c:	003f9806 	br	2808ae0 <__muldf3+0x1c0>
 2808c80:	403fe71e 	bne	r8,zero,2808c20 <__muldf3+0x300>
 2808c84:	01004004 	movi	r4,256
 2808c88:	4904703a 	and	r2,r9,r4
 2808c8c:	10c4b03a 	or	r2,r2,r3
 2808c90:	103fe31e 	bne	r2,zero,2808c20 <__muldf3+0x300>
 2808c94:	94c4b03a 	or	r2,r18,r19
 2808c98:	103fe126 	beq	r2,zero,2808c20 <__muldf3+0x300>
 2808c9c:	49c5883a 	add	r2,r9,r7
 2808ca0:	1251803a 	cmpltu	r8,r2,r9
 2808ca4:	4291883a 	add	r8,r8,r10
 2808ca8:	013fc004 	movi	r4,-256
 2808cac:	1112703a 	and	r9,r2,r4
 2808cb0:	4015883a 	mov	r10,r8
 2808cb4:	003fda06 	br	2808c20 <__muldf3+0x300>
 2808cb8:	6813883a 	mov	r9,r13
 2808cbc:	003fce06 	br	2808bf8 <__muldf3+0x2d8>
 2808cc0:	143f7c36 	bltu	r2,r16,2808ab4 <__muldf3+0x194>
 2808cc4:	003fdd06 	br	2808c3c <__muldf3+0x31c>
 2808cc8:	12bf852e 	bgeu	r2,r10,2808ae0 <__muldf3+0x1c0>
 2808ccc:	003fe506 	br	2808c64 <__muldf3+0x344>
 2808cd0:	00800084 	movi	r2,2
 2808cd4:	20bf351e 	bne	r4,r2,28089ac <__muldf3+0x8c>
 2808cd8:	0100a074 	movhi	r4,641
 2808cdc:	21362904 	addi	r4,r4,-10076
 2808ce0:	003f3f06 	br	28089e0 <__muldf3+0xc0>

02808ce4 <__divdf3>:
 2808ce4:	deffed04 	addi	sp,sp,-76
 2808ce8:	dcc01115 	stw	r19,68(sp)
 2808cec:	dcc00404 	addi	r19,sp,16
 2808cf0:	2011883a 	mov	r8,r4
 2808cf4:	2813883a 	mov	r9,r5
 2808cf8:	dc000e15 	stw	r16,56(sp)
 2808cfc:	d809883a 	mov	r4,sp
 2808d00:	980b883a 	mov	r5,r19
 2808d04:	dc000904 	addi	r16,sp,36
 2808d08:	dfc01215 	stw	ra,72(sp)
 2808d0c:	da400115 	stw	r9,4(sp)
 2808d10:	d9c00315 	stw	r7,12(sp)
 2808d14:	da000015 	stw	r8,0(sp)
 2808d18:	d9800215 	stw	r6,8(sp)
 2808d1c:	dc801015 	stw	r18,64(sp)
 2808d20:	dc400f15 	stw	r17,60(sp)
 2808d24:	2809b840 	call	2809b84 <__unpack_d>
 2808d28:	d9000204 	addi	r4,sp,8
 2808d2c:	800b883a 	mov	r5,r16
 2808d30:	2809b840 	call	2809b84 <__unpack_d>
 2808d34:	d9000417 	ldw	r4,16(sp)
 2808d38:	00800044 	movi	r2,1
 2808d3c:	11000b2e 	bgeu	r2,r4,2808d6c <__divdf3+0x88>
 2808d40:	d9400917 	ldw	r5,36(sp)
 2808d44:	1140762e 	bgeu	r2,r5,2808f20 <__divdf3+0x23c>
 2808d48:	d8800517 	ldw	r2,20(sp)
 2808d4c:	d8c00a17 	ldw	r3,40(sp)
 2808d50:	01800104 	movi	r6,4
 2808d54:	10c4f03a 	xor	r2,r2,r3
 2808d58:	d8800515 	stw	r2,20(sp)
 2808d5c:	21800226 	beq	r4,r6,2808d68 <__divdf3+0x84>
 2808d60:	00800084 	movi	r2,2
 2808d64:	2080141e 	bne	r4,r2,2808db8 <__divdf3+0xd4>
 2808d68:	29000926 	beq	r5,r4,2808d90 <__divdf3+0xac>
 2808d6c:	9809883a 	mov	r4,r19
 2808d70:	28098700 	call	2809870 <__pack_d>
 2808d74:	dfc01217 	ldw	ra,72(sp)
 2808d78:	dcc01117 	ldw	r19,68(sp)
 2808d7c:	dc801017 	ldw	r18,64(sp)
 2808d80:	dc400f17 	ldw	r17,60(sp)
 2808d84:	dc000e17 	ldw	r16,56(sp)
 2808d88:	dec01304 	addi	sp,sp,76
 2808d8c:	f800283a 	ret
 2808d90:	0100a074 	movhi	r4,641
 2808d94:	21362904 	addi	r4,r4,-10076
 2808d98:	28098700 	call	2809870 <__pack_d>
 2808d9c:	dfc01217 	ldw	ra,72(sp)
 2808da0:	dcc01117 	ldw	r19,68(sp)
 2808da4:	dc801017 	ldw	r18,64(sp)
 2808da8:	dc400f17 	ldw	r17,60(sp)
 2808dac:	dc000e17 	ldw	r16,56(sp)
 2808db0:	dec01304 	addi	sp,sp,76
 2808db4:	f800283a 	ret
 2808db8:	29805b26 	beq	r5,r6,2808f28 <__divdf3+0x244>
 2808dbc:	28802d26 	beq	r5,r2,2808e74 <__divdf3+0x190>
 2808dc0:	d8c00617 	ldw	r3,24(sp)
 2808dc4:	d8800b17 	ldw	r2,44(sp)
 2808dc8:	d9c00817 	ldw	r7,32(sp)
 2808dcc:	dc400d17 	ldw	r17,52(sp)
 2808dd0:	188bc83a 	sub	r5,r3,r2
 2808dd4:	d9800717 	ldw	r6,28(sp)
 2808dd8:	dc000c17 	ldw	r16,48(sp)
 2808ddc:	d9400615 	stw	r5,24(sp)
 2808de0:	3c403836 	bltu	r7,r17,2808ec4 <__divdf3+0x1e0>
 2808de4:	89c03626 	beq	r17,r7,2808ec0 <__divdf3+0x1dc>
 2808de8:	0015883a 	mov	r10,zero
 2808dec:	001d883a 	mov	r14,zero
 2808df0:	02c40034 	movhi	r11,4096
 2808df4:	001f883a 	mov	r15,zero
 2808df8:	003f883a 	mov	ra,zero
 2808dfc:	04800f44 	movi	r18,61
 2808e00:	00000f06 	br	2808e40 <__divdf3+0x15c>
 2808e04:	601d883a 	mov	r14,r12
 2808e08:	681f883a 	mov	r15,r13
 2808e0c:	400d883a 	mov	r6,r8
 2808e10:	100f883a 	mov	r7,r2
 2808e14:	3191883a 	add	r8,r6,r6
 2808e18:	5808d07a 	srli	r4,r11,1
 2808e1c:	4185803a 	cmpltu	r2,r8,r6
 2808e20:	39d3883a 	add	r9,r7,r7
 2808e24:	28c6b03a 	or	r3,r5,r3
 2808e28:	1245883a 	add	r2,r2,r9
 2808e2c:	1815883a 	mov	r10,r3
 2808e30:	2017883a 	mov	r11,r4
 2808e34:	400d883a 	mov	r6,r8
 2808e38:	100f883a 	mov	r7,r2
 2808e3c:	fc801726 	beq	ra,r18,2808e9c <__divdf3+0x1b8>
 2808e40:	580a97fa 	slli	r5,r11,31
 2808e44:	5006d07a 	srli	r3,r10,1
 2808e48:	ffc00044 	addi	ra,ra,1
 2808e4c:	3c7ff136 	bltu	r7,r17,2808e14 <__divdf3+0x130>
 2808e50:	3411c83a 	sub	r8,r6,r16
 2808e54:	3205803a 	cmpltu	r2,r6,r8
 2808e58:	3c53c83a 	sub	r9,r7,r17
 2808e5c:	7298b03a 	or	r12,r14,r10
 2808e60:	7adab03a 	or	r13,r15,r11
 2808e64:	4885c83a 	sub	r2,r9,r2
 2808e68:	89ffe61e 	bne	r17,r7,2808e04 <__divdf3+0x120>
 2808e6c:	343fe936 	bltu	r6,r16,2808e14 <__divdf3+0x130>
 2808e70:	003fe406 	br	2808e04 <__divdf3+0x120>
 2808e74:	9809883a 	mov	r4,r19
 2808e78:	d9800415 	stw	r6,16(sp)
 2808e7c:	28098700 	call	2809870 <__pack_d>
 2808e80:	dfc01217 	ldw	ra,72(sp)
 2808e84:	dcc01117 	ldw	r19,68(sp)
 2808e88:	dc801017 	ldw	r18,64(sp)
 2808e8c:	dc400f17 	ldw	r17,60(sp)
 2808e90:	dc000e17 	ldw	r16,56(sp)
 2808e94:	dec01304 	addi	sp,sp,76
 2808e98:	f800283a 	ret
 2808e9c:	00803fc4 	movi	r2,255
 2808ea0:	7090703a 	and	r8,r14,r2
 2808ea4:	00802004 	movi	r2,128
 2808ea8:	0007883a 	mov	r3,zero
 2808eac:	0013883a 	mov	r9,zero
 2808eb0:	40800d26 	beq	r8,r2,2808ee8 <__divdf3+0x204>
 2808eb4:	dbc00815 	stw	r15,32(sp)
 2808eb8:	db800715 	stw	r14,28(sp)
 2808ebc:	003fab06 	br	2808d6c <__divdf3+0x88>
 2808ec0:	343fc92e 	bgeu	r6,r16,2808de8 <__divdf3+0x104>
 2808ec4:	3185883a 	add	r2,r6,r6
 2808ec8:	1189803a 	cmpltu	r4,r2,r6
 2808ecc:	39c7883a 	add	r3,r7,r7
 2808ed0:	20c9883a 	add	r4,r4,r3
 2808ed4:	297fffc4 	addi	r5,r5,-1
 2808ed8:	100d883a 	mov	r6,r2
 2808edc:	200f883a 	mov	r7,r4
 2808ee0:	d9400615 	stw	r5,24(sp)
 2808ee4:	003fc006 	br	2808de8 <__divdf3+0x104>
 2808ee8:	483ff21e 	bne	r9,zero,2808eb4 <__divdf3+0x1d0>
 2808eec:	01004004 	movi	r4,256
 2808ef0:	7104703a 	and	r2,r14,r4
 2808ef4:	10c4b03a 	or	r2,r2,r3
 2808ef8:	103fee1e 	bne	r2,zero,2808eb4 <__divdf3+0x1d0>
 2808efc:	31c4b03a 	or	r2,r6,r7
 2808f00:	103fec26 	beq	r2,zero,2808eb4 <__divdf3+0x1d0>
 2808f04:	7205883a 	add	r2,r14,r8
 2808f08:	1391803a 	cmpltu	r8,r2,r14
 2808f0c:	43d1883a 	add	r8,r8,r15
 2808f10:	013fc004 	movi	r4,-256
 2808f14:	111c703a 	and	r14,r2,r4
 2808f18:	401f883a 	mov	r15,r8
 2808f1c:	003fe506 	br	2808eb4 <__divdf3+0x1d0>
 2808f20:	8009883a 	mov	r4,r16
 2808f24:	003f9206 	br	2808d70 <__divdf3+0x8c>
 2808f28:	9809883a 	mov	r4,r19
 2808f2c:	d8000715 	stw	zero,28(sp)
 2808f30:	d8000815 	stw	zero,32(sp)
 2808f34:	d8000615 	stw	zero,24(sp)
 2808f38:	003f8d06 	br	2808d70 <__divdf3+0x8c>

02808f3c <__eqdf2>:
 2808f3c:	deffef04 	addi	sp,sp,-68
 2808f40:	dc400f15 	stw	r17,60(sp)
 2808f44:	dc400404 	addi	r17,sp,16
 2808f48:	2005883a 	mov	r2,r4
 2808f4c:	2807883a 	mov	r3,r5
 2808f50:	dc000e15 	stw	r16,56(sp)
 2808f54:	d809883a 	mov	r4,sp
 2808f58:	880b883a 	mov	r5,r17
 2808f5c:	dc000904 	addi	r16,sp,36
 2808f60:	d8c00115 	stw	r3,4(sp)
 2808f64:	d8800015 	stw	r2,0(sp)
 2808f68:	d9800215 	stw	r6,8(sp)
 2808f6c:	dfc01015 	stw	ra,64(sp)
 2808f70:	d9c00315 	stw	r7,12(sp)
 2808f74:	2809b840 	call	2809b84 <__unpack_d>
 2808f78:	d9000204 	addi	r4,sp,8
 2808f7c:	800b883a 	mov	r5,r16
 2808f80:	2809b840 	call	2809b84 <__unpack_d>
 2808f84:	d8800417 	ldw	r2,16(sp)
 2808f88:	00c00044 	movi	r3,1
 2808f8c:	180d883a 	mov	r6,r3
 2808f90:	1880062e 	bgeu	r3,r2,2808fac <__eqdf2+0x70>
 2808f94:	d8800917 	ldw	r2,36(sp)
 2808f98:	8809883a 	mov	r4,r17
 2808f9c:	800b883a 	mov	r5,r16
 2808fa0:	1880022e 	bgeu	r3,r2,2808fac <__eqdf2+0x70>
 2808fa4:	2809cbc0 	call	2809cbc <__fpcmp_parts_d>
 2808fa8:	100d883a 	mov	r6,r2
 2808fac:	3005883a 	mov	r2,r6
 2808fb0:	dfc01017 	ldw	ra,64(sp)
 2808fb4:	dc400f17 	ldw	r17,60(sp)
 2808fb8:	dc000e17 	ldw	r16,56(sp)
 2808fbc:	dec01104 	addi	sp,sp,68
 2808fc0:	f800283a 	ret

02808fc4 <__nedf2>:
 2808fc4:	deffef04 	addi	sp,sp,-68
 2808fc8:	dc400f15 	stw	r17,60(sp)
 2808fcc:	dc400404 	addi	r17,sp,16
 2808fd0:	2005883a 	mov	r2,r4
 2808fd4:	2807883a 	mov	r3,r5
 2808fd8:	dc000e15 	stw	r16,56(sp)
 2808fdc:	d809883a 	mov	r4,sp
 2808fe0:	880b883a 	mov	r5,r17
 2808fe4:	dc000904 	addi	r16,sp,36
 2808fe8:	d8c00115 	stw	r3,4(sp)
 2808fec:	d8800015 	stw	r2,0(sp)
 2808ff0:	d9800215 	stw	r6,8(sp)
 2808ff4:	dfc01015 	stw	ra,64(sp)
 2808ff8:	d9c00315 	stw	r7,12(sp)
 2808ffc:	2809b840 	call	2809b84 <__unpack_d>
 2809000:	d9000204 	addi	r4,sp,8
 2809004:	800b883a 	mov	r5,r16
 2809008:	2809b840 	call	2809b84 <__unpack_d>
 280900c:	d8800417 	ldw	r2,16(sp)
 2809010:	00c00044 	movi	r3,1
 2809014:	180d883a 	mov	r6,r3
 2809018:	1880062e 	bgeu	r3,r2,2809034 <__nedf2+0x70>
 280901c:	d8800917 	ldw	r2,36(sp)
 2809020:	8809883a 	mov	r4,r17
 2809024:	800b883a 	mov	r5,r16
 2809028:	1880022e 	bgeu	r3,r2,2809034 <__nedf2+0x70>
 280902c:	2809cbc0 	call	2809cbc <__fpcmp_parts_d>
 2809030:	100d883a 	mov	r6,r2
 2809034:	3005883a 	mov	r2,r6
 2809038:	dfc01017 	ldw	ra,64(sp)
 280903c:	dc400f17 	ldw	r17,60(sp)
 2809040:	dc000e17 	ldw	r16,56(sp)
 2809044:	dec01104 	addi	sp,sp,68
 2809048:	f800283a 	ret

0280904c <__gtdf2>:
 280904c:	deffef04 	addi	sp,sp,-68
 2809050:	dc400f15 	stw	r17,60(sp)
 2809054:	dc400404 	addi	r17,sp,16
 2809058:	2005883a 	mov	r2,r4
 280905c:	2807883a 	mov	r3,r5
 2809060:	dc000e15 	stw	r16,56(sp)
 2809064:	d809883a 	mov	r4,sp
 2809068:	880b883a 	mov	r5,r17
 280906c:	dc000904 	addi	r16,sp,36
 2809070:	d8c00115 	stw	r3,4(sp)
 2809074:	d8800015 	stw	r2,0(sp)
 2809078:	d9800215 	stw	r6,8(sp)
 280907c:	dfc01015 	stw	ra,64(sp)
 2809080:	d9c00315 	stw	r7,12(sp)
 2809084:	2809b840 	call	2809b84 <__unpack_d>
 2809088:	d9000204 	addi	r4,sp,8
 280908c:	800b883a 	mov	r5,r16
 2809090:	2809b840 	call	2809b84 <__unpack_d>
 2809094:	d8800417 	ldw	r2,16(sp)
 2809098:	00c00044 	movi	r3,1
 280909c:	01bfffc4 	movi	r6,-1
 28090a0:	1880062e 	bgeu	r3,r2,28090bc <__gtdf2+0x70>
 28090a4:	d8800917 	ldw	r2,36(sp)
 28090a8:	8809883a 	mov	r4,r17
 28090ac:	800b883a 	mov	r5,r16
 28090b0:	1880022e 	bgeu	r3,r2,28090bc <__gtdf2+0x70>
 28090b4:	2809cbc0 	call	2809cbc <__fpcmp_parts_d>
 28090b8:	100d883a 	mov	r6,r2
 28090bc:	3005883a 	mov	r2,r6
 28090c0:	dfc01017 	ldw	ra,64(sp)
 28090c4:	dc400f17 	ldw	r17,60(sp)
 28090c8:	dc000e17 	ldw	r16,56(sp)
 28090cc:	dec01104 	addi	sp,sp,68
 28090d0:	f800283a 	ret

028090d4 <__gedf2>:
 28090d4:	deffef04 	addi	sp,sp,-68
 28090d8:	dc400f15 	stw	r17,60(sp)
 28090dc:	dc400404 	addi	r17,sp,16
 28090e0:	2005883a 	mov	r2,r4
 28090e4:	2807883a 	mov	r3,r5
 28090e8:	dc000e15 	stw	r16,56(sp)
 28090ec:	d809883a 	mov	r4,sp
 28090f0:	880b883a 	mov	r5,r17
 28090f4:	dc000904 	addi	r16,sp,36
 28090f8:	d8c00115 	stw	r3,4(sp)
 28090fc:	d8800015 	stw	r2,0(sp)
 2809100:	d9800215 	stw	r6,8(sp)
 2809104:	dfc01015 	stw	ra,64(sp)
 2809108:	d9c00315 	stw	r7,12(sp)
 280910c:	2809b840 	call	2809b84 <__unpack_d>
 2809110:	d9000204 	addi	r4,sp,8
 2809114:	800b883a 	mov	r5,r16
 2809118:	2809b840 	call	2809b84 <__unpack_d>
 280911c:	d8800417 	ldw	r2,16(sp)
 2809120:	00c00044 	movi	r3,1
 2809124:	01bfffc4 	movi	r6,-1
 2809128:	1880062e 	bgeu	r3,r2,2809144 <__gedf2+0x70>
 280912c:	d8800917 	ldw	r2,36(sp)
 2809130:	8809883a 	mov	r4,r17
 2809134:	800b883a 	mov	r5,r16
 2809138:	1880022e 	bgeu	r3,r2,2809144 <__gedf2+0x70>
 280913c:	2809cbc0 	call	2809cbc <__fpcmp_parts_d>
 2809140:	100d883a 	mov	r6,r2
 2809144:	3005883a 	mov	r2,r6
 2809148:	dfc01017 	ldw	ra,64(sp)
 280914c:	dc400f17 	ldw	r17,60(sp)
 2809150:	dc000e17 	ldw	r16,56(sp)
 2809154:	dec01104 	addi	sp,sp,68
 2809158:	f800283a 	ret

0280915c <__ltdf2>:
 280915c:	deffef04 	addi	sp,sp,-68
 2809160:	dc400f15 	stw	r17,60(sp)
 2809164:	dc400404 	addi	r17,sp,16
 2809168:	2005883a 	mov	r2,r4
 280916c:	2807883a 	mov	r3,r5
 2809170:	dc000e15 	stw	r16,56(sp)
 2809174:	d809883a 	mov	r4,sp
 2809178:	880b883a 	mov	r5,r17
 280917c:	dc000904 	addi	r16,sp,36
 2809180:	d8c00115 	stw	r3,4(sp)
 2809184:	d8800015 	stw	r2,0(sp)
 2809188:	d9800215 	stw	r6,8(sp)
 280918c:	dfc01015 	stw	ra,64(sp)
 2809190:	d9c00315 	stw	r7,12(sp)
 2809194:	2809b840 	call	2809b84 <__unpack_d>
 2809198:	d9000204 	addi	r4,sp,8
 280919c:	800b883a 	mov	r5,r16
 28091a0:	2809b840 	call	2809b84 <__unpack_d>
 28091a4:	d8800417 	ldw	r2,16(sp)
 28091a8:	00c00044 	movi	r3,1
 28091ac:	180d883a 	mov	r6,r3
 28091b0:	1880062e 	bgeu	r3,r2,28091cc <__ltdf2+0x70>
 28091b4:	d8800917 	ldw	r2,36(sp)
 28091b8:	8809883a 	mov	r4,r17
 28091bc:	800b883a 	mov	r5,r16
 28091c0:	1880022e 	bgeu	r3,r2,28091cc <__ltdf2+0x70>
 28091c4:	2809cbc0 	call	2809cbc <__fpcmp_parts_d>
 28091c8:	100d883a 	mov	r6,r2
 28091cc:	3005883a 	mov	r2,r6
 28091d0:	dfc01017 	ldw	ra,64(sp)
 28091d4:	dc400f17 	ldw	r17,60(sp)
 28091d8:	dc000e17 	ldw	r16,56(sp)
 28091dc:	dec01104 	addi	sp,sp,68
 28091e0:	f800283a 	ret

028091e4 <__floatsidf>:
 28091e4:	2006d7fa 	srli	r3,r4,31
 28091e8:	defff604 	addi	sp,sp,-40
 28091ec:	008000c4 	movi	r2,3
 28091f0:	dfc00915 	stw	ra,36(sp)
 28091f4:	dcc00815 	stw	r19,32(sp)
 28091f8:	dc800715 	stw	r18,28(sp)
 28091fc:	dc400615 	stw	r17,24(sp)
 2809200:	dc000515 	stw	r16,20(sp)
 2809204:	d8800015 	stw	r2,0(sp)
 2809208:	d8c00115 	stw	r3,4(sp)
 280920c:	20000f1e 	bne	r4,zero,280924c <__floatsidf+0x68>
 2809210:	00800084 	movi	r2,2
 2809214:	d8800015 	stw	r2,0(sp)
 2809218:	d809883a 	mov	r4,sp
 280921c:	28098700 	call	2809870 <__pack_d>
 2809220:	1009883a 	mov	r4,r2
 2809224:	180b883a 	mov	r5,r3
 2809228:	2005883a 	mov	r2,r4
 280922c:	2807883a 	mov	r3,r5
 2809230:	dfc00917 	ldw	ra,36(sp)
 2809234:	dcc00817 	ldw	r19,32(sp)
 2809238:	dc800717 	ldw	r18,28(sp)
 280923c:	dc400617 	ldw	r17,24(sp)
 2809240:	dc000517 	ldw	r16,20(sp)
 2809244:	dec00a04 	addi	sp,sp,40
 2809248:	f800283a 	ret
 280924c:	00800f04 	movi	r2,60
 2809250:	1807003a 	cmpeq	r3,r3,zero
 2809254:	d8800215 	stw	r2,8(sp)
 2809258:	18001126 	beq	r3,zero,28092a0 <__floatsidf+0xbc>
 280925c:	0027883a 	mov	r19,zero
 2809260:	2025883a 	mov	r18,r4
 2809264:	d9000315 	stw	r4,12(sp)
 2809268:	dcc00415 	stw	r19,16(sp)
 280926c:	28097f00 	call	28097f0 <__clzsi2>
 2809270:	11000744 	addi	r4,r2,29
 2809274:	013fe80e 	bge	zero,r4,2809218 <__floatsidf+0x34>
 2809278:	10bfff44 	addi	r2,r2,-3
 280927c:	10000c16 	blt	r2,zero,28092b0 <__floatsidf+0xcc>
 2809280:	90a2983a 	sll	r17,r18,r2
 2809284:	0021883a 	mov	r16,zero
 2809288:	d8800217 	ldw	r2,8(sp)
 280928c:	dc400415 	stw	r17,16(sp)
 2809290:	dc000315 	stw	r16,12(sp)
 2809294:	1105c83a 	sub	r2,r2,r4
 2809298:	d8800215 	stw	r2,8(sp)
 280929c:	003fde06 	br	2809218 <__floatsidf+0x34>
 28092a0:	00a00034 	movhi	r2,32768
 28092a4:	20800a26 	beq	r4,r2,28092d0 <__floatsidf+0xec>
 28092a8:	0109c83a 	sub	r4,zero,r4
 28092ac:	003feb06 	br	280925c <__floatsidf+0x78>
 28092b0:	9006d07a 	srli	r3,r18,1
 28092b4:	008007c4 	movi	r2,31
 28092b8:	1105c83a 	sub	r2,r2,r4
 28092bc:	1886d83a 	srl	r3,r3,r2
 28092c0:	9922983a 	sll	r17,r19,r4
 28092c4:	9120983a 	sll	r16,r18,r4
 28092c8:	1c62b03a 	or	r17,r3,r17
 28092cc:	003fee06 	br	2809288 <__floatsidf+0xa4>
 28092d0:	0009883a 	mov	r4,zero
 28092d4:	01707834 	movhi	r5,49632
 28092d8:	003fd306 	br	2809228 <__floatsidf+0x44>

028092dc <__fixdfsi>:
 28092dc:	defff804 	addi	sp,sp,-32
 28092e0:	2005883a 	mov	r2,r4
 28092e4:	2807883a 	mov	r3,r5
 28092e8:	d809883a 	mov	r4,sp
 28092ec:	d9400204 	addi	r5,sp,8
 28092f0:	d8c00115 	stw	r3,4(sp)
 28092f4:	d8800015 	stw	r2,0(sp)
 28092f8:	dfc00715 	stw	ra,28(sp)
 28092fc:	2809b840 	call	2809b84 <__unpack_d>
 2809300:	d8c00217 	ldw	r3,8(sp)
 2809304:	00800084 	movi	r2,2
 2809308:	1880051e 	bne	r3,r2,2809320 <__fixdfsi+0x44>
 280930c:	0007883a 	mov	r3,zero
 2809310:	1805883a 	mov	r2,r3
 2809314:	dfc00717 	ldw	ra,28(sp)
 2809318:	dec00804 	addi	sp,sp,32
 280931c:	f800283a 	ret
 2809320:	00800044 	movi	r2,1
 2809324:	10fff92e 	bgeu	r2,r3,280930c <__fixdfsi+0x30>
 2809328:	00800104 	movi	r2,4
 280932c:	18800426 	beq	r3,r2,2809340 <__fixdfsi+0x64>
 2809330:	d8c00417 	ldw	r3,16(sp)
 2809334:	183ff516 	blt	r3,zero,280930c <__fixdfsi+0x30>
 2809338:	00800784 	movi	r2,30
 280933c:	10c0080e 	bge	r2,r3,2809360 <__fixdfsi+0x84>
 2809340:	d8800317 	ldw	r2,12(sp)
 2809344:	1000121e 	bne	r2,zero,2809390 <__fixdfsi+0xb4>
 2809348:	00e00034 	movhi	r3,32768
 280934c:	18ffffc4 	addi	r3,r3,-1
 2809350:	1805883a 	mov	r2,r3
 2809354:	dfc00717 	ldw	ra,28(sp)
 2809358:	dec00804 	addi	sp,sp,32
 280935c:	f800283a 	ret
 2809360:	00800f04 	movi	r2,60
 2809364:	10d1c83a 	sub	r8,r2,r3
 2809368:	40bff804 	addi	r2,r8,-32
 280936c:	d9800517 	ldw	r6,20(sp)
 2809370:	d9c00617 	ldw	r7,24(sp)
 2809374:	10000816 	blt	r2,zero,2809398 <__fixdfsi+0xbc>
 2809378:	3888d83a 	srl	r4,r7,r2
 280937c:	d8800317 	ldw	r2,12(sp)
 2809380:	2007883a 	mov	r3,r4
 2809384:	103fe226 	beq	r2,zero,2809310 <__fixdfsi+0x34>
 2809388:	0107c83a 	sub	r3,zero,r4
 280938c:	003fe006 	br	2809310 <__fixdfsi+0x34>
 2809390:	00e00034 	movhi	r3,32768
 2809394:	003fde06 	br	2809310 <__fixdfsi+0x34>
 2809398:	39c7883a 	add	r3,r7,r7
 280939c:	008007c4 	movi	r2,31
 28093a0:	1205c83a 	sub	r2,r2,r8
 28093a4:	1886983a 	sll	r3,r3,r2
 28093a8:	3208d83a 	srl	r4,r6,r8
 28093ac:	1908b03a 	or	r4,r3,r4
 28093b0:	003ff206 	br	280937c <__fixdfsi+0xa0>

028093b4 <__floatunsidf>:
 28093b4:	defff204 	addi	sp,sp,-56
 28093b8:	dfc00d15 	stw	ra,52(sp)
 28093bc:	ddc00c15 	stw	r23,48(sp)
 28093c0:	dd800b15 	stw	r22,44(sp)
 28093c4:	dd400a15 	stw	r21,40(sp)
 28093c8:	dd000915 	stw	r20,36(sp)
 28093cc:	dcc00815 	stw	r19,32(sp)
 28093d0:	dc800715 	stw	r18,28(sp)
 28093d4:	dc400615 	stw	r17,24(sp)
 28093d8:	dc000515 	stw	r16,20(sp)
 28093dc:	d8000115 	stw	zero,4(sp)
 28093e0:	20000f1e 	bne	r4,zero,2809420 <__floatunsidf+0x6c>
 28093e4:	00800084 	movi	r2,2
 28093e8:	d8800015 	stw	r2,0(sp)
 28093ec:	d809883a 	mov	r4,sp
 28093f0:	28098700 	call	2809870 <__pack_d>
 28093f4:	dfc00d17 	ldw	ra,52(sp)
 28093f8:	ddc00c17 	ldw	r23,48(sp)
 28093fc:	dd800b17 	ldw	r22,44(sp)
 2809400:	dd400a17 	ldw	r21,40(sp)
 2809404:	dd000917 	ldw	r20,36(sp)
 2809408:	dcc00817 	ldw	r19,32(sp)
 280940c:	dc800717 	ldw	r18,28(sp)
 2809410:	dc400617 	ldw	r17,24(sp)
 2809414:	dc000517 	ldw	r16,20(sp)
 2809418:	dec00e04 	addi	sp,sp,56
 280941c:	f800283a 	ret
 2809420:	008000c4 	movi	r2,3
 2809424:	00c00f04 	movi	r3,60
 2809428:	002f883a 	mov	r23,zero
 280942c:	202d883a 	mov	r22,r4
 2809430:	d8800015 	stw	r2,0(sp)
 2809434:	d8c00215 	stw	r3,8(sp)
 2809438:	d9000315 	stw	r4,12(sp)
 280943c:	ddc00415 	stw	r23,16(sp)
 2809440:	28097f00 	call	28097f0 <__clzsi2>
 2809444:	12400744 	addi	r9,r2,29
 2809448:	48000b16 	blt	r9,zero,2809478 <__floatunsidf+0xc4>
 280944c:	483fe726 	beq	r9,zero,28093ec <__floatunsidf+0x38>
 2809450:	10bfff44 	addi	r2,r2,-3
 2809454:	10002e16 	blt	r2,zero,2809510 <__floatunsidf+0x15c>
 2809458:	b0a2983a 	sll	r17,r22,r2
 280945c:	0021883a 	mov	r16,zero
 2809460:	d8800217 	ldw	r2,8(sp)
 2809464:	dc400415 	stw	r17,16(sp)
 2809468:	dc000315 	stw	r16,12(sp)
 280946c:	1245c83a 	sub	r2,r2,r9
 2809470:	d8800215 	stw	r2,8(sp)
 2809474:	003fdd06 	br	28093ec <__floatunsidf+0x38>
 2809478:	0255c83a 	sub	r10,zero,r9
 280947c:	51bff804 	addi	r6,r10,-32
 2809480:	30001b16 	blt	r6,zero,28094f0 <__floatunsidf+0x13c>
 2809484:	b9a8d83a 	srl	r20,r23,r6
 2809488:	002b883a 	mov	r21,zero
 280948c:	000f883a 	mov	r7,zero
 2809490:	01000044 	movi	r4,1
 2809494:	0011883a 	mov	r8,zero
 2809498:	30002516 	blt	r6,zero,2809530 <__floatunsidf+0x17c>
 280949c:	21a6983a 	sll	r19,r4,r6
 28094a0:	0025883a 	mov	r18,zero
 28094a4:	00bfffc4 	movi	r2,-1
 28094a8:	9089883a 	add	r4,r18,r2
 28094ac:	988b883a 	add	r5,r19,r2
 28094b0:	248d803a 	cmpltu	r6,r4,r18
 28094b4:	314b883a 	add	r5,r6,r5
 28094b8:	b104703a 	and	r2,r22,r4
 28094bc:	b946703a 	and	r3,r23,r5
 28094c0:	10c4b03a 	or	r2,r2,r3
 28094c4:	10000226 	beq	r2,zero,28094d0 <__floatunsidf+0x11c>
 28094c8:	01c00044 	movi	r7,1
 28094cc:	0011883a 	mov	r8,zero
 28094d0:	d9000217 	ldw	r4,8(sp)
 28094d4:	a1c4b03a 	or	r2,r20,r7
 28094d8:	aa06b03a 	or	r3,r21,r8
 28094dc:	2249c83a 	sub	r4,r4,r9
 28094e0:	d8c00415 	stw	r3,16(sp)
 28094e4:	d9000215 	stw	r4,8(sp)
 28094e8:	d8800315 	stw	r2,12(sp)
 28094ec:	003fbf06 	br	28093ec <__floatunsidf+0x38>
 28094f0:	bdc7883a 	add	r3,r23,r23
 28094f4:	008007c4 	movi	r2,31
 28094f8:	1285c83a 	sub	r2,r2,r10
 28094fc:	1886983a 	sll	r3,r3,r2
 2809500:	b2a8d83a 	srl	r20,r22,r10
 2809504:	baaad83a 	srl	r21,r23,r10
 2809508:	1d28b03a 	or	r20,r3,r20
 280950c:	003fdf06 	br	280948c <__floatunsidf+0xd8>
 2809510:	b006d07a 	srli	r3,r22,1
 2809514:	008007c4 	movi	r2,31
 2809518:	1245c83a 	sub	r2,r2,r9
 280951c:	1886d83a 	srl	r3,r3,r2
 2809520:	ba62983a 	sll	r17,r23,r9
 2809524:	b260983a 	sll	r16,r22,r9
 2809528:	1c62b03a 	or	r17,r3,r17
 280952c:	003fcc06 	br	2809460 <__floatunsidf+0xac>
 2809530:	2006d07a 	srli	r3,r4,1
 2809534:	008007c4 	movi	r2,31
 2809538:	1285c83a 	sub	r2,r2,r10
 280953c:	18a6d83a 	srl	r19,r3,r2
 2809540:	22a4983a 	sll	r18,r4,r10
 2809544:	003fd706 	br	28094a4 <__floatunsidf+0xf0>

02809548 <udivmodsi4>:
 2809548:	29001b2e 	bgeu	r5,r4,28095b8 <udivmodsi4+0x70>
 280954c:	28001a16 	blt	r5,zero,28095b8 <udivmodsi4+0x70>
 2809550:	00800044 	movi	r2,1
 2809554:	0007883a 	mov	r3,zero
 2809558:	01c007c4 	movi	r7,31
 280955c:	00000306 	br	280956c <udivmodsi4+0x24>
 2809560:	19c01326 	beq	r3,r7,28095b0 <udivmodsi4+0x68>
 2809564:	18c00044 	addi	r3,r3,1
 2809568:	28000416 	blt	r5,zero,280957c <udivmodsi4+0x34>
 280956c:	294b883a 	add	r5,r5,r5
 2809570:	1085883a 	add	r2,r2,r2
 2809574:	293ffa36 	bltu	r5,r4,2809560 <udivmodsi4+0x18>
 2809578:	10000d26 	beq	r2,zero,28095b0 <udivmodsi4+0x68>
 280957c:	0007883a 	mov	r3,zero
 2809580:	21400236 	bltu	r4,r5,280958c <udivmodsi4+0x44>
 2809584:	2149c83a 	sub	r4,r4,r5
 2809588:	1886b03a 	or	r3,r3,r2
 280958c:	1004d07a 	srli	r2,r2,1
 2809590:	280ad07a 	srli	r5,r5,1
 2809594:	103ffa1e 	bne	r2,zero,2809580 <udivmodsi4+0x38>
 2809598:	30000226 	beq	r6,zero,28095a4 <udivmodsi4+0x5c>
 280959c:	2005883a 	mov	r2,r4
 28095a0:	f800283a 	ret
 28095a4:	1809883a 	mov	r4,r3
 28095a8:	2005883a 	mov	r2,r4
 28095ac:	f800283a 	ret
 28095b0:	0007883a 	mov	r3,zero
 28095b4:	003ff806 	br	2809598 <udivmodsi4+0x50>
 28095b8:	00800044 	movi	r2,1
 28095bc:	0007883a 	mov	r3,zero
 28095c0:	003fef06 	br	2809580 <udivmodsi4+0x38>

028095c4 <__divsi3>:
 28095c4:	defffe04 	addi	sp,sp,-8
 28095c8:	dc000015 	stw	r16,0(sp)
 28095cc:	dfc00115 	stw	ra,4(sp)
 28095d0:	0021883a 	mov	r16,zero
 28095d4:	20000c16 	blt	r4,zero,2809608 <__divsi3+0x44>
 28095d8:	000d883a 	mov	r6,zero
 28095dc:	28000e16 	blt	r5,zero,2809618 <__divsi3+0x54>
 28095e0:	28095480 	call	2809548 <udivmodsi4>
 28095e4:	1007883a 	mov	r3,r2
 28095e8:	8005003a 	cmpeq	r2,r16,zero
 28095ec:	1000011e 	bne	r2,zero,28095f4 <__divsi3+0x30>
 28095f0:	00c7c83a 	sub	r3,zero,r3
 28095f4:	1805883a 	mov	r2,r3
 28095f8:	dfc00117 	ldw	ra,4(sp)
 28095fc:	dc000017 	ldw	r16,0(sp)
 2809600:	dec00204 	addi	sp,sp,8
 2809604:	f800283a 	ret
 2809608:	0109c83a 	sub	r4,zero,r4
 280960c:	04000044 	movi	r16,1
 2809610:	000d883a 	mov	r6,zero
 2809614:	283ff20e 	bge	r5,zero,28095e0 <__divsi3+0x1c>
 2809618:	014bc83a 	sub	r5,zero,r5
 280961c:	8021003a 	cmpeq	r16,r16,zero
 2809620:	003fef06 	br	28095e0 <__divsi3+0x1c>

02809624 <__modsi3>:
 2809624:	deffff04 	addi	sp,sp,-4
 2809628:	dfc00015 	stw	ra,0(sp)
 280962c:	01800044 	movi	r6,1
 2809630:	2807883a 	mov	r3,r5
 2809634:	20000416 	blt	r4,zero,2809648 <__modsi3+0x24>
 2809638:	28000c16 	blt	r5,zero,280966c <__modsi3+0x48>
 280963c:	dfc00017 	ldw	ra,0(sp)
 2809640:	dec00104 	addi	sp,sp,4
 2809644:	28095481 	jmpi	2809548 <udivmodsi4>
 2809648:	0109c83a 	sub	r4,zero,r4
 280964c:	28000b16 	blt	r5,zero,280967c <__modsi3+0x58>
 2809650:	180b883a 	mov	r5,r3
 2809654:	01800044 	movi	r6,1
 2809658:	28095480 	call	2809548 <udivmodsi4>
 280965c:	0085c83a 	sub	r2,zero,r2
 2809660:	dfc00017 	ldw	ra,0(sp)
 2809664:	dec00104 	addi	sp,sp,4
 2809668:	f800283a 	ret
 280966c:	014bc83a 	sub	r5,zero,r5
 2809670:	dfc00017 	ldw	ra,0(sp)
 2809674:	dec00104 	addi	sp,sp,4
 2809678:	28095481 	jmpi	2809548 <udivmodsi4>
 280967c:	0147c83a 	sub	r3,zero,r5
 2809680:	003ff306 	br	2809650 <__modsi3+0x2c>

02809684 <__udivsi3>:
 2809684:	000d883a 	mov	r6,zero
 2809688:	28095481 	jmpi	2809548 <udivmodsi4>

0280968c <__umodsi3>:
 280968c:	01800044 	movi	r6,1
 2809690:	28095481 	jmpi	2809548 <udivmodsi4>

02809694 <__mulsi3>:
 2809694:	20000a26 	beq	r4,zero,28096c0 <__mulsi3+0x2c>
 2809698:	0007883a 	mov	r3,zero
 280969c:	2080004c 	andi	r2,r4,1
 28096a0:	1005003a 	cmpeq	r2,r2,zero
 28096a4:	2008d07a 	srli	r4,r4,1
 28096a8:	1000011e 	bne	r2,zero,28096b0 <__mulsi3+0x1c>
 28096ac:	1947883a 	add	r3,r3,r5
 28096b0:	294b883a 	add	r5,r5,r5
 28096b4:	203ff91e 	bne	r4,zero,280969c <__mulsi3+0x8>
 28096b8:	1805883a 	mov	r2,r3
 28096bc:	f800283a 	ret
 28096c0:	0007883a 	mov	r3,zero
 28096c4:	1805883a 	mov	r2,r3
 28096c8:	f800283a 	ret

028096cc <__muldi3>:
 28096cc:	defff204 	addi	sp,sp,-56
 28096d0:	df000c15 	stw	fp,48(sp)
 28096d4:	3038d43a 	srli	fp,r6,16
 28096d8:	dd000815 	stw	r20,32(sp)
 28096dc:	dc400515 	stw	r17,20(sp)
 28096e0:	2028d43a 	srli	r20,r4,16
 28096e4:	247fffcc 	andi	r17,r4,65535
 28096e8:	dc000415 	stw	r16,16(sp)
 28096ec:	343fffcc 	andi	r16,r6,65535
 28096f0:	dcc00715 	stw	r19,28(sp)
 28096f4:	d9000015 	stw	r4,0(sp)
 28096f8:	2827883a 	mov	r19,r5
 28096fc:	8809883a 	mov	r4,r17
 2809700:	d9400115 	stw	r5,4(sp)
 2809704:	800b883a 	mov	r5,r16
 2809708:	d9800215 	stw	r6,8(sp)
 280970c:	dfc00d15 	stw	ra,52(sp)
 2809710:	d9c00315 	stw	r7,12(sp)
 2809714:	dd800a15 	stw	r22,40(sp)
 2809718:	dd400915 	stw	r21,36(sp)
 280971c:	302d883a 	mov	r22,r6
 2809720:	ddc00b15 	stw	r23,44(sp)
 2809724:	dc800615 	stw	r18,24(sp)
 2809728:	28096940 	call	2809694 <__mulsi3>
 280972c:	8809883a 	mov	r4,r17
 2809730:	e00b883a 	mov	r5,fp
 2809734:	102b883a 	mov	r21,r2
 2809738:	28096940 	call	2809694 <__mulsi3>
 280973c:	800b883a 	mov	r5,r16
 2809740:	a009883a 	mov	r4,r20
 2809744:	1023883a 	mov	r17,r2
 2809748:	28096940 	call	2809694 <__mulsi3>
 280974c:	a009883a 	mov	r4,r20
 2809750:	e00b883a 	mov	r5,fp
 2809754:	1021883a 	mov	r16,r2
 2809758:	28096940 	call	2809694 <__mulsi3>
 280975c:	a8ffffcc 	andi	r3,r21,65535
 2809760:	a82ad43a 	srli	r21,r21,16
 2809764:	8c23883a 	add	r17,r17,r16
 2809768:	1011883a 	mov	r8,r2
 280976c:	ac6b883a 	add	r21,r21,r17
 2809770:	a804943a 	slli	r2,r21,16
 2809774:	b009883a 	mov	r4,r22
 2809778:	980b883a 	mov	r5,r19
 280977c:	10c7883a 	add	r3,r2,r3
 2809780:	a812d43a 	srli	r9,r21,16
 2809784:	180d883a 	mov	r6,r3
 2809788:	ac00022e 	bgeu	r21,r16,2809794 <__muldi3+0xc8>
 280978c:	00800074 	movhi	r2,1
 2809790:	4091883a 	add	r8,r8,r2
 2809794:	4267883a 	add	r19,r8,r9
 2809798:	302d883a 	mov	r22,r6
 280979c:	28096940 	call	2809694 <__mulsi3>
 28097a0:	d9400317 	ldw	r5,12(sp)
 28097a4:	d9000017 	ldw	r4,0(sp)
 28097a8:	1023883a 	mov	r17,r2
 28097ac:	28096940 	call	2809694 <__mulsi3>
 28097b0:	14cb883a 	add	r5,r2,r19
 28097b4:	894b883a 	add	r5,r17,r5
 28097b8:	b005883a 	mov	r2,r22
 28097bc:	2807883a 	mov	r3,r5
 28097c0:	dfc00d17 	ldw	ra,52(sp)
 28097c4:	df000c17 	ldw	fp,48(sp)
 28097c8:	ddc00b17 	ldw	r23,44(sp)
 28097cc:	dd800a17 	ldw	r22,40(sp)
 28097d0:	dd400917 	ldw	r21,36(sp)
 28097d4:	dd000817 	ldw	r20,32(sp)
 28097d8:	dcc00717 	ldw	r19,28(sp)
 28097dc:	dc800617 	ldw	r18,24(sp)
 28097e0:	dc400517 	ldw	r17,20(sp)
 28097e4:	dc000417 	ldw	r16,16(sp)
 28097e8:	dec00e04 	addi	sp,sp,56
 28097ec:	f800283a 	ret

028097f0 <__clzsi2>:
 28097f0:	00bfffd4 	movui	r2,65535
 28097f4:	11000e36 	bltu	r2,r4,2809830 <__clzsi2+0x40>
 28097f8:	00803fc4 	movi	r2,255
 28097fc:	01400204 	movi	r5,8
 2809800:	0007883a 	mov	r3,zero
 2809804:	11001036 	bltu	r2,r4,2809848 <__clzsi2+0x58>
 2809808:	000b883a 	mov	r5,zero
 280980c:	20c6d83a 	srl	r3,r4,r3
 2809810:	0080a074 	movhi	r2,641
 2809814:	10b62e04 	addi	r2,r2,-10056
 2809818:	1887883a 	add	r3,r3,r2
 280981c:	18800003 	ldbu	r2,0(r3)
 2809820:	00c00804 	movi	r3,32
 2809824:	2885883a 	add	r2,r5,r2
 2809828:	1885c83a 	sub	r2,r3,r2
 280982c:	f800283a 	ret
 2809830:	01400404 	movi	r5,16
 2809834:	00804034 	movhi	r2,256
 2809838:	10bfffc4 	addi	r2,r2,-1
 280983c:	2807883a 	mov	r3,r5
 2809840:	113ff22e 	bgeu	r2,r4,280980c <__clzsi2+0x1c>
 2809844:	01400604 	movi	r5,24
 2809848:	2807883a 	mov	r3,r5
 280984c:	20c6d83a 	srl	r3,r4,r3
 2809850:	0080a074 	movhi	r2,641
 2809854:	10b62e04 	addi	r2,r2,-10056
 2809858:	1887883a 	add	r3,r3,r2
 280985c:	18800003 	ldbu	r2,0(r3)
 2809860:	00c00804 	movi	r3,32
 2809864:	2885883a 	add	r2,r5,r2
 2809868:	1885c83a 	sub	r2,r3,r2
 280986c:	f800283a 	ret

02809870 <__pack_d>:
 2809870:	20c00017 	ldw	r3,0(r4)
 2809874:	defffd04 	addi	sp,sp,-12
 2809878:	dc000015 	stw	r16,0(sp)
 280987c:	dc800215 	stw	r18,8(sp)
 2809880:	dc400115 	stw	r17,4(sp)
 2809884:	00800044 	movi	r2,1
 2809888:	22000317 	ldw	r8,12(r4)
 280988c:	001f883a 	mov	r15,zero
 2809890:	22400417 	ldw	r9,16(r4)
 2809894:	24000117 	ldw	r16,4(r4)
 2809898:	10c0552e 	bgeu	r2,r3,28099f0 <__pack_d+0x180>
 280989c:	00800104 	movi	r2,4
 28098a0:	18804f26 	beq	r3,r2,28099e0 <__pack_d+0x170>
 28098a4:	00800084 	movi	r2,2
 28098a8:	18800226 	beq	r3,r2,28098b4 <__pack_d+0x44>
 28098ac:	4244b03a 	or	r2,r8,r9
 28098b0:	10001a1e 	bne	r2,zero,280991c <__pack_d+0xac>
 28098b4:	000d883a 	mov	r6,zero
 28098b8:	000f883a 	mov	r7,zero
 28098bc:	0011883a 	mov	r8,zero
 28098c0:	00800434 	movhi	r2,16
 28098c4:	10bfffc4 	addi	r2,r2,-1
 28098c8:	301d883a 	mov	r14,r6
 28098cc:	3884703a 	and	r2,r7,r2
 28098d0:	400a953a 	slli	r5,r8,20
 28098d4:	79bffc2c 	andhi	r6,r15,65520
 28098d8:	308cb03a 	or	r6,r6,r2
 28098dc:	00e00434 	movhi	r3,32784
 28098e0:	18ffffc4 	addi	r3,r3,-1
 28098e4:	800497fa 	slli	r2,r16,31
 28098e8:	30c6703a 	and	r3,r6,r3
 28098ec:	1946b03a 	or	r3,r3,r5
 28098f0:	01600034 	movhi	r5,32768
 28098f4:	297fffc4 	addi	r5,r5,-1
 28098f8:	194a703a 	and	r5,r3,r5
 28098fc:	288ab03a 	or	r5,r5,r2
 2809900:	2807883a 	mov	r3,r5
 2809904:	7005883a 	mov	r2,r14
 2809908:	dc800217 	ldw	r18,8(sp)
 280990c:	dc400117 	ldw	r17,4(sp)
 2809910:	dc000017 	ldw	r16,0(sp)
 2809914:	dec00304 	addi	sp,sp,12
 2809918:	f800283a 	ret
 280991c:	21000217 	ldw	r4,8(r4)
 2809920:	00bf0084 	movi	r2,-1022
 2809924:	20803f16 	blt	r4,r2,2809a24 <__pack_d+0x1b4>
 2809928:	0080ffc4 	movi	r2,1023
 280992c:	11002c16 	blt	r2,r4,28099e0 <__pack_d+0x170>
 2809930:	00803fc4 	movi	r2,255
 2809934:	408c703a 	and	r6,r8,r2
 2809938:	00802004 	movi	r2,128
 280993c:	0007883a 	mov	r3,zero
 2809940:	000f883a 	mov	r7,zero
 2809944:	2280ffc4 	addi	r10,r4,1023
 2809948:	30801e26 	beq	r6,r2,28099c4 <__pack_d+0x154>
 280994c:	00801fc4 	movi	r2,127
 2809950:	4089883a 	add	r4,r8,r2
 2809954:	220d803a 	cmpltu	r6,r4,r8
 2809958:	324d883a 	add	r6,r6,r9
 280995c:	2011883a 	mov	r8,r4
 2809960:	3013883a 	mov	r9,r6
 2809964:	00880034 	movhi	r2,8192
 2809968:	10bfffc4 	addi	r2,r2,-1
 280996c:	12400d36 	bltu	r2,r9,28099a4 <__pack_d+0x134>
 2809970:	4804963a 	slli	r2,r9,24
 2809974:	400cd23a 	srli	r6,r8,8
 2809978:	480ed23a 	srli	r7,r9,8
 280997c:	013fffc4 	movi	r4,-1
 2809980:	118cb03a 	or	r6,r2,r6
 2809984:	01400434 	movhi	r5,16
 2809988:	297fffc4 	addi	r5,r5,-1
 280998c:	3104703a 	and	r2,r6,r4
 2809990:	3946703a 	and	r3,r7,r5
 2809994:	5201ffcc 	andi	r8,r10,2047
 2809998:	100d883a 	mov	r6,r2
 280999c:	180f883a 	mov	r7,r3
 28099a0:	003fc706 	br	28098c0 <__pack_d+0x50>
 28099a4:	480897fa 	slli	r4,r9,31
 28099a8:	4004d07a 	srli	r2,r8,1
 28099ac:	4806d07a 	srli	r3,r9,1
 28099b0:	52800044 	addi	r10,r10,1
 28099b4:	2084b03a 	or	r2,r4,r2
 28099b8:	1011883a 	mov	r8,r2
 28099bc:	1813883a 	mov	r9,r3
 28099c0:	003feb06 	br	2809970 <__pack_d+0x100>
 28099c4:	383fe11e 	bne	r7,zero,280994c <__pack_d+0xdc>
 28099c8:	01004004 	movi	r4,256
 28099cc:	4104703a 	and	r2,r8,r4
 28099d0:	10c4b03a 	or	r2,r2,r3
 28099d4:	103fe326 	beq	r2,zero,2809964 <__pack_d+0xf4>
 28099d8:	3005883a 	mov	r2,r6
 28099dc:	003fdc06 	br	2809950 <__pack_d+0xe0>
 28099e0:	000d883a 	mov	r6,zero
 28099e4:	000f883a 	mov	r7,zero
 28099e8:	0201ffc4 	movi	r8,2047
 28099ec:	003fb406 	br	28098c0 <__pack_d+0x50>
 28099f0:	0005883a 	mov	r2,zero
 28099f4:	00c00234 	movhi	r3,8
 28099f8:	408cb03a 	or	r6,r8,r2
 28099fc:	48ceb03a 	or	r7,r9,r3
 2809a00:	013fffc4 	movi	r4,-1
 2809a04:	01400434 	movhi	r5,16
 2809a08:	297fffc4 	addi	r5,r5,-1
 2809a0c:	3104703a 	and	r2,r6,r4
 2809a10:	3946703a 	and	r3,r7,r5
 2809a14:	100d883a 	mov	r6,r2
 2809a18:	180f883a 	mov	r7,r3
 2809a1c:	0201ffc4 	movi	r8,2047
 2809a20:	003fa706 	br	28098c0 <__pack_d+0x50>
 2809a24:	1109c83a 	sub	r4,r2,r4
 2809a28:	00800e04 	movi	r2,56
 2809a2c:	11004316 	blt	r2,r4,2809b3c <__pack_d+0x2cc>
 2809a30:	21fff804 	addi	r7,r4,-32
 2809a34:	38004516 	blt	r7,zero,2809b4c <__pack_d+0x2dc>
 2809a38:	49d8d83a 	srl	r12,r9,r7
 2809a3c:	001b883a 	mov	r13,zero
 2809a40:	0023883a 	mov	r17,zero
 2809a44:	01400044 	movi	r5,1
 2809a48:	0025883a 	mov	r18,zero
 2809a4c:	38004716 	blt	r7,zero,2809b6c <__pack_d+0x2fc>
 2809a50:	29d6983a 	sll	r11,r5,r7
 2809a54:	0015883a 	mov	r10,zero
 2809a58:	00bfffc4 	movi	r2,-1
 2809a5c:	5089883a 	add	r4,r10,r2
 2809a60:	588b883a 	add	r5,r11,r2
 2809a64:	228d803a 	cmpltu	r6,r4,r10
 2809a68:	314b883a 	add	r5,r6,r5
 2809a6c:	4104703a 	and	r2,r8,r4
 2809a70:	4946703a 	and	r3,r9,r5
 2809a74:	10c4b03a 	or	r2,r2,r3
 2809a78:	10000226 	beq	r2,zero,2809a84 <__pack_d+0x214>
 2809a7c:	04400044 	movi	r17,1
 2809a80:	0025883a 	mov	r18,zero
 2809a84:	00803fc4 	movi	r2,255
 2809a88:	644eb03a 	or	r7,r12,r17
 2809a8c:	3892703a 	and	r9,r7,r2
 2809a90:	00802004 	movi	r2,128
 2809a94:	6c90b03a 	or	r8,r13,r18
 2809a98:	0015883a 	mov	r10,zero
 2809a9c:	48801626 	beq	r9,r2,2809af8 <__pack_d+0x288>
 2809aa0:	01001fc4 	movi	r4,127
 2809aa4:	3905883a 	add	r2,r7,r4
 2809aa8:	11cd803a 	cmpltu	r6,r2,r7
 2809aac:	320d883a 	add	r6,r6,r8
 2809ab0:	100f883a 	mov	r7,r2
 2809ab4:	00840034 	movhi	r2,4096
 2809ab8:	10bfffc4 	addi	r2,r2,-1
 2809abc:	3011883a 	mov	r8,r6
 2809ac0:	0007883a 	mov	r3,zero
 2809ac4:	11801b36 	bltu	r2,r6,2809b34 <__pack_d+0x2c4>
 2809ac8:	4004963a 	slli	r2,r8,24
 2809acc:	3808d23a 	srli	r4,r7,8
 2809ad0:	400ad23a 	srli	r5,r8,8
 2809ad4:	1813883a 	mov	r9,r3
 2809ad8:	1108b03a 	or	r4,r2,r4
 2809adc:	00bfffc4 	movi	r2,-1
 2809ae0:	00c00434 	movhi	r3,16
 2809ae4:	18ffffc4 	addi	r3,r3,-1
 2809ae8:	208c703a 	and	r6,r4,r2
 2809aec:	28ce703a 	and	r7,r5,r3
 2809af0:	4a01ffcc 	andi	r8,r9,2047
 2809af4:	003f7206 	br	28098c0 <__pack_d+0x50>
 2809af8:	503fe91e 	bne	r10,zero,2809aa0 <__pack_d+0x230>
 2809afc:	01004004 	movi	r4,256
 2809b00:	3904703a 	and	r2,r7,r4
 2809b04:	0007883a 	mov	r3,zero
 2809b08:	10c4b03a 	or	r2,r2,r3
 2809b0c:	10000626 	beq	r2,zero,2809b28 <__pack_d+0x2b8>
 2809b10:	3a45883a 	add	r2,r7,r9
 2809b14:	11cd803a 	cmpltu	r6,r2,r7
 2809b18:	320d883a 	add	r6,r6,r8
 2809b1c:	100f883a 	mov	r7,r2
 2809b20:	3011883a 	mov	r8,r6
 2809b24:	0007883a 	mov	r3,zero
 2809b28:	00840034 	movhi	r2,4096
 2809b2c:	10bfffc4 	addi	r2,r2,-1
 2809b30:	123fe52e 	bgeu	r2,r8,2809ac8 <__pack_d+0x258>
 2809b34:	00c00044 	movi	r3,1
 2809b38:	003fe306 	br	2809ac8 <__pack_d+0x258>
 2809b3c:	0009883a 	mov	r4,zero
 2809b40:	0013883a 	mov	r9,zero
 2809b44:	000b883a 	mov	r5,zero
 2809b48:	003fe406 	br	2809adc <__pack_d+0x26c>
 2809b4c:	4a47883a 	add	r3,r9,r9
 2809b50:	008007c4 	movi	r2,31
 2809b54:	1105c83a 	sub	r2,r2,r4
 2809b58:	1886983a 	sll	r3,r3,r2
 2809b5c:	4118d83a 	srl	r12,r8,r4
 2809b60:	491ad83a 	srl	r13,r9,r4
 2809b64:	1b18b03a 	or	r12,r3,r12
 2809b68:	003fb506 	br	2809a40 <__pack_d+0x1d0>
 2809b6c:	2806d07a 	srli	r3,r5,1
 2809b70:	008007c4 	movi	r2,31
 2809b74:	1105c83a 	sub	r2,r2,r4
 2809b78:	1896d83a 	srl	r11,r3,r2
 2809b7c:	2914983a 	sll	r10,r5,r4
 2809b80:	003fb506 	br	2809a58 <__pack_d+0x1e8>

02809b84 <__unpack_d>:
 2809b84:	20c00117 	ldw	r3,4(r4)
 2809b88:	22400017 	ldw	r9,0(r4)
 2809b8c:	00800434 	movhi	r2,16
 2809b90:	10bfffc4 	addi	r2,r2,-1
 2809b94:	1808d53a 	srli	r4,r3,20
 2809b98:	180cd7fa 	srli	r6,r3,31
 2809b9c:	1894703a 	and	r10,r3,r2
 2809ba0:	2201ffcc 	andi	r8,r4,2047
 2809ba4:	281b883a 	mov	r13,r5
 2809ba8:	4817883a 	mov	r11,r9
 2809bac:	29800115 	stw	r6,4(r5)
 2809bb0:	5019883a 	mov	r12,r10
 2809bb4:	40001e1e 	bne	r8,zero,2809c30 <__unpack_d+0xac>
 2809bb8:	4a84b03a 	or	r2,r9,r10
 2809bbc:	10001926 	beq	r2,zero,2809c24 <__unpack_d+0xa0>
 2809bc0:	4804d63a 	srli	r2,r9,24
 2809bc4:	500c923a 	slli	r6,r10,8
 2809bc8:	013f0084 	movi	r4,-1022
 2809bcc:	00c40034 	movhi	r3,4096
 2809bd0:	18ffffc4 	addi	r3,r3,-1
 2809bd4:	118cb03a 	or	r6,r2,r6
 2809bd8:	008000c4 	movi	r2,3
 2809bdc:	480a923a 	slli	r5,r9,8
 2809be0:	68800015 	stw	r2,0(r13)
 2809be4:	69000215 	stw	r4,8(r13)
 2809be8:	19800b36 	bltu	r3,r6,2809c18 <__unpack_d+0x94>
 2809bec:	200f883a 	mov	r7,r4
 2809bf0:	1811883a 	mov	r8,r3
 2809bf4:	2945883a 	add	r2,r5,r5
 2809bf8:	1149803a 	cmpltu	r4,r2,r5
 2809bfc:	3187883a 	add	r3,r6,r6
 2809c00:	20c9883a 	add	r4,r4,r3
 2809c04:	100b883a 	mov	r5,r2
 2809c08:	200d883a 	mov	r6,r4
 2809c0c:	39ffffc4 	addi	r7,r7,-1
 2809c10:	413ff82e 	bgeu	r8,r4,2809bf4 <__unpack_d+0x70>
 2809c14:	69c00215 	stw	r7,8(r13)
 2809c18:	69800415 	stw	r6,16(r13)
 2809c1c:	69400315 	stw	r5,12(r13)
 2809c20:	f800283a 	ret
 2809c24:	00800084 	movi	r2,2
 2809c28:	28800015 	stw	r2,0(r5)
 2809c2c:	f800283a 	ret
 2809c30:	0081ffc4 	movi	r2,2047
 2809c34:	40800f26 	beq	r8,r2,2809c74 <__unpack_d+0xf0>
 2809c38:	480cd63a 	srli	r6,r9,24
 2809c3c:	5006923a 	slli	r3,r10,8
 2809c40:	4804923a 	slli	r2,r9,8
 2809c44:	0009883a 	mov	r4,zero
 2809c48:	30c6b03a 	or	r3,r6,r3
 2809c4c:	01440034 	movhi	r5,4096
 2809c50:	110cb03a 	or	r6,r2,r4
 2809c54:	423f0044 	addi	r8,r8,-1023
 2809c58:	194eb03a 	or	r7,r3,r5
 2809c5c:	008000c4 	movi	r2,3
 2809c60:	69c00415 	stw	r7,16(r13)
 2809c64:	6a000215 	stw	r8,8(r13)
 2809c68:	68800015 	stw	r2,0(r13)
 2809c6c:	69800315 	stw	r6,12(r13)
 2809c70:	f800283a 	ret
 2809c74:	4a84b03a 	or	r2,r9,r10
 2809c78:	1000031e 	bne	r2,zero,2809c88 <__unpack_d+0x104>
 2809c7c:	00800104 	movi	r2,4
 2809c80:	28800015 	stw	r2,0(r5)
 2809c84:	f800283a 	ret
 2809c88:	0009883a 	mov	r4,zero
 2809c8c:	01400234 	movhi	r5,8
 2809c90:	4904703a 	and	r2,r9,r4
 2809c94:	5146703a 	and	r3,r10,r5
 2809c98:	10c4b03a 	or	r2,r2,r3
 2809c9c:	10000526 	beq	r2,zero,2809cb4 <__unpack_d+0x130>
 2809ca0:	00800044 	movi	r2,1
 2809ca4:	68800015 	stw	r2,0(r13)
 2809ca8:	6b000415 	stw	r12,16(r13)
 2809cac:	6ac00315 	stw	r11,12(r13)
 2809cb0:	f800283a 	ret
 2809cb4:	68000015 	stw	zero,0(r13)
 2809cb8:	003ffb06 	br	2809ca8 <__unpack_d+0x124>

02809cbc <__fpcmp_parts_d>:
 2809cbc:	21800017 	ldw	r6,0(r4)
 2809cc0:	00c00044 	movi	r3,1
 2809cc4:	19800a2e 	bgeu	r3,r6,2809cf0 <__fpcmp_parts_d+0x34>
 2809cc8:	28800017 	ldw	r2,0(r5)
 2809ccc:	1880082e 	bgeu	r3,r2,2809cf0 <__fpcmp_parts_d+0x34>
 2809cd0:	00c00104 	movi	r3,4
 2809cd4:	30c02626 	beq	r6,r3,2809d70 <__fpcmp_parts_d+0xb4>
 2809cd8:	10c02226 	beq	r2,r3,2809d64 <__fpcmp_parts_d+0xa8>
 2809cdc:	00c00084 	movi	r3,2
 2809ce0:	30c00526 	beq	r6,r3,2809cf8 <__fpcmp_parts_d+0x3c>
 2809ce4:	10c0071e 	bne	r2,r3,2809d04 <__fpcmp_parts_d+0x48>
 2809ce8:	20800117 	ldw	r2,4(r4)
 2809cec:	1000091e 	bne	r2,zero,2809d14 <__fpcmp_parts_d+0x58>
 2809cf0:	00800044 	movi	r2,1
 2809cf4:	f800283a 	ret
 2809cf8:	10c01a1e 	bne	r2,r3,2809d64 <__fpcmp_parts_d+0xa8>
 2809cfc:	0005883a 	mov	r2,zero
 2809d00:	f800283a 	ret
 2809d04:	22000117 	ldw	r8,4(r4)
 2809d08:	28800117 	ldw	r2,4(r5)
 2809d0c:	40800326 	beq	r8,r2,2809d1c <__fpcmp_parts_d+0x60>
 2809d10:	403ff726 	beq	r8,zero,2809cf0 <__fpcmp_parts_d+0x34>
 2809d14:	00bfffc4 	movi	r2,-1
 2809d18:	f800283a 	ret
 2809d1c:	20c00217 	ldw	r3,8(r4)
 2809d20:	28800217 	ldw	r2,8(r5)
 2809d24:	10fffa16 	blt	r2,r3,2809d10 <__fpcmp_parts_d+0x54>
 2809d28:	18800916 	blt	r3,r2,2809d50 <__fpcmp_parts_d+0x94>
 2809d2c:	21c00417 	ldw	r7,16(r4)
 2809d30:	28c00417 	ldw	r3,16(r5)
 2809d34:	21800317 	ldw	r6,12(r4)
 2809d38:	28800317 	ldw	r2,12(r5)
 2809d3c:	19fff436 	bltu	r3,r7,2809d10 <__fpcmp_parts_d+0x54>
 2809d40:	38c00526 	beq	r7,r3,2809d58 <__fpcmp_parts_d+0x9c>
 2809d44:	38c00236 	bltu	r7,r3,2809d50 <__fpcmp_parts_d+0x94>
 2809d48:	19ffec1e 	bne	r3,r7,2809cfc <__fpcmp_parts_d+0x40>
 2809d4c:	30bfeb2e 	bgeu	r6,r2,2809cfc <__fpcmp_parts_d+0x40>
 2809d50:	403fe71e 	bne	r8,zero,2809cf0 <__fpcmp_parts_d+0x34>
 2809d54:	003fef06 	br	2809d14 <__fpcmp_parts_d+0x58>
 2809d58:	11bffa2e 	bgeu	r2,r6,2809d44 <__fpcmp_parts_d+0x88>
 2809d5c:	403fe426 	beq	r8,zero,2809cf0 <__fpcmp_parts_d+0x34>
 2809d60:	003fec06 	br	2809d14 <__fpcmp_parts_d+0x58>
 2809d64:	28800117 	ldw	r2,4(r5)
 2809d68:	103fe11e 	bne	r2,zero,2809cf0 <__fpcmp_parts_d+0x34>
 2809d6c:	003fe906 	br	2809d14 <__fpcmp_parts_d+0x58>
 2809d70:	11bfdd1e 	bne	r2,r6,2809ce8 <__fpcmp_parts_d+0x2c>
 2809d74:	28c00117 	ldw	r3,4(r5)
 2809d78:	20800117 	ldw	r2,4(r4)
 2809d7c:	1885c83a 	sub	r2,r3,r2
 2809d80:	f800283a 	ret

02809d84 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2809d84:	defff804 	addi	sp,sp,-32
 2809d88:	dfc00715 	stw	ra,28(sp)
 2809d8c:	df000615 	stw	fp,24(sp)
 2809d90:	df000604 	addi	fp,sp,24
 2809d94:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2809d98:	e0bffc17 	ldw	r2,-16(fp)
 2809d9c:	1004803a 	cmplt	r2,r2,zero
 2809da0:	1000091e 	bne	r2,zero,2809dc8 <close+0x44>
 2809da4:	e13ffc17 	ldw	r4,-16(fp)
 2809da8:	01400304 	movi	r5,12
 2809dac:	28096940 	call	2809694 <__mulsi3>
 2809db0:	1007883a 	mov	r3,r2
 2809db4:	0080a074 	movhi	r2,641
 2809db8:	10b88b04 	addi	r2,r2,-7636
 2809dbc:	1887883a 	add	r3,r3,r2
 2809dc0:	e0ffff15 	stw	r3,-4(fp)
 2809dc4:	00000106 	br	2809dcc <close+0x48>
 2809dc8:	e03fff15 	stw	zero,-4(fp)
 2809dcc:	e0bfff17 	ldw	r2,-4(fp)
 2809dd0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 2809dd4:	e0bffb17 	ldw	r2,-20(fp)
 2809dd8:	1005003a 	cmpeq	r2,r2,zero
 2809ddc:	10001d1e 	bne	r2,zero,2809e54 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2809de0:	e0bffb17 	ldw	r2,-20(fp)
 2809de4:	10800017 	ldw	r2,0(r2)
 2809de8:	10800417 	ldw	r2,16(r2)
 2809dec:	1005003a 	cmpeq	r2,r2,zero
 2809df0:	1000071e 	bne	r2,zero,2809e10 <close+0x8c>
 2809df4:	e0bffb17 	ldw	r2,-20(fp)
 2809df8:	10800017 	ldw	r2,0(r2)
 2809dfc:	10800417 	ldw	r2,16(r2)
 2809e00:	e13ffb17 	ldw	r4,-20(fp)
 2809e04:	103ee83a 	callr	r2
 2809e08:	e0bffe15 	stw	r2,-8(fp)
 2809e0c:	00000106 	br	2809e14 <close+0x90>
 2809e10:	e03ffe15 	stw	zero,-8(fp)
 2809e14:	e0bffe17 	ldw	r2,-8(fp)
 2809e18:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2809e1c:	e13ffc17 	ldw	r4,-16(fp)
 2809e20:	280a5dc0 	call	280a5dc <alt_release_fd>
    if (rval < 0)
 2809e24:	e0bffa17 	ldw	r2,-24(fp)
 2809e28:	1004403a 	cmpge	r2,r2,zero
 2809e2c:	1000071e 	bne	r2,zero,2809e4c <close+0xc8>
    {
      ALT_ERRNO = -rval;
 2809e30:	2809e840 	call	2809e84 <alt_get_errno>
 2809e34:	e0fffa17 	ldw	r3,-24(fp)
 2809e38:	00c7c83a 	sub	r3,zero,r3
 2809e3c:	10c00015 	stw	r3,0(r2)
      return -1;
 2809e40:	00bfffc4 	movi	r2,-1
 2809e44:	e0bffd15 	stw	r2,-12(fp)
 2809e48:	00000806 	br	2809e6c <close+0xe8>
    }
    return 0;
 2809e4c:	e03ffd15 	stw	zero,-12(fp)
 2809e50:	00000606 	br	2809e6c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2809e54:	2809e840 	call	2809e84 <alt_get_errno>
 2809e58:	1007883a 	mov	r3,r2
 2809e5c:	00801444 	movi	r2,81
 2809e60:	18800015 	stw	r2,0(r3)
    return -1;
 2809e64:	00bfffc4 	movi	r2,-1
 2809e68:	e0bffd15 	stw	r2,-12(fp)
 2809e6c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 2809e70:	e037883a 	mov	sp,fp
 2809e74:	dfc00117 	ldw	ra,4(sp)
 2809e78:	df000017 	ldw	fp,0(sp)
 2809e7c:	dec00204 	addi	sp,sp,8
 2809e80:	f800283a 	ret

02809e84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2809e84:	defffd04 	addi	sp,sp,-12
 2809e88:	dfc00215 	stw	ra,8(sp)
 2809e8c:	df000115 	stw	fp,4(sp)
 2809e90:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2809e94:	0080a074 	movhi	r2,641
 2809e98:	10bd4504 	addi	r2,r2,-2796
 2809e9c:	10800017 	ldw	r2,0(r2)
 2809ea0:	1005003a 	cmpeq	r2,r2,zero
 2809ea4:	1000061e 	bne	r2,zero,2809ec0 <alt_get_errno+0x3c>
 2809ea8:	0080a074 	movhi	r2,641
 2809eac:	10bd4504 	addi	r2,r2,-2796
 2809eb0:	10800017 	ldw	r2,0(r2)
 2809eb4:	103ee83a 	callr	r2
 2809eb8:	e0bfff15 	stw	r2,-4(fp)
 2809ebc:	00000306 	br	2809ecc <alt_get_errno+0x48>
 2809ec0:	0080a074 	movhi	r2,641
 2809ec4:	10842604 	addi	r2,r2,4248
 2809ec8:	e0bfff15 	stw	r2,-4(fp)
 2809ecc:	e0bfff17 	ldw	r2,-4(fp)
}
 2809ed0:	e037883a 	mov	sp,fp
 2809ed4:	dfc00117 	ldw	ra,4(sp)
 2809ed8:	df000017 	ldw	fp,0(sp)
 2809edc:	dec00204 	addi	sp,sp,8
 2809ee0:	f800283a 	ret

02809ee4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2809ee4:	defffc04 	addi	sp,sp,-16
 2809ee8:	df000315 	stw	fp,12(sp)
 2809eec:	df000304 	addi	fp,sp,12
 2809ef0:	e13ffd15 	stw	r4,-12(fp)
 2809ef4:	e17ffe15 	stw	r5,-8(fp)
 2809ef8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2809efc:	e0bfff17 	ldw	r2,-4(fp)
}
 2809f00:	e037883a 	mov	sp,fp
 2809f04:	df000017 	ldw	fp,0(sp)
 2809f08:	dec00104 	addi	sp,sp,4
 2809f0c:	f800283a 	ret

02809f10 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2809f10:	defff904 	addi	sp,sp,-28
 2809f14:	dfc00615 	stw	ra,24(sp)
 2809f18:	df000515 	stw	fp,20(sp)
 2809f1c:	df000504 	addi	fp,sp,20
 2809f20:	e13ffc15 	stw	r4,-16(fp)
 2809f24:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2809f28:	e0bffc17 	ldw	r2,-16(fp)
 2809f2c:	1004803a 	cmplt	r2,r2,zero
 2809f30:	1000091e 	bne	r2,zero,2809f58 <fstat+0x48>
 2809f34:	e13ffc17 	ldw	r4,-16(fp)
 2809f38:	01400304 	movi	r5,12
 2809f3c:	28096940 	call	2809694 <__mulsi3>
 2809f40:	1007883a 	mov	r3,r2
 2809f44:	0080a074 	movhi	r2,641
 2809f48:	10b88b04 	addi	r2,r2,-7636
 2809f4c:	1887883a 	add	r3,r3,r2
 2809f50:	e0ffff15 	stw	r3,-4(fp)
 2809f54:	00000106 	br	2809f5c <fstat+0x4c>
 2809f58:	e03fff15 	stw	zero,-4(fp)
 2809f5c:	e0bfff17 	ldw	r2,-4(fp)
 2809f60:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2809f64:	e0bffb17 	ldw	r2,-20(fp)
 2809f68:	1005003a 	cmpeq	r2,r2,zero
 2809f6c:	1000121e 	bne	r2,zero,2809fb8 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 2809f70:	e0bffb17 	ldw	r2,-20(fp)
 2809f74:	10800017 	ldw	r2,0(r2)
 2809f78:	10800817 	ldw	r2,32(r2)
 2809f7c:	1005003a 	cmpeq	r2,r2,zero
 2809f80:	1000081e 	bne	r2,zero,2809fa4 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 2809f84:	e0bffb17 	ldw	r2,-20(fp)
 2809f88:	10800017 	ldw	r2,0(r2)
 2809f8c:	10800817 	ldw	r2,32(r2)
 2809f90:	e13ffb17 	ldw	r4,-20(fp)
 2809f94:	e17ffd17 	ldw	r5,-12(fp)
 2809f98:	103ee83a 	callr	r2
 2809f9c:	e0bffe15 	stw	r2,-8(fp)
 2809fa0:	00000b06 	br	2809fd0 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2809fa4:	e0fffd17 	ldw	r3,-12(fp)
 2809fa8:	00880004 	movi	r2,8192
 2809fac:	18800115 	stw	r2,4(r3)
      return 0;
 2809fb0:	e03ffe15 	stw	zero,-8(fp)
 2809fb4:	00000606 	br	2809fd0 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2809fb8:	2809fe80 	call	2809fe8 <alt_get_errno>
 2809fbc:	1007883a 	mov	r3,r2
 2809fc0:	00801444 	movi	r2,81
 2809fc4:	18800015 	stw	r2,0(r3)
    return -1;
 2809fc8:	00bfffc4 	movi	r2,-1
 2809fcc:	e0bffe15 	stw	r2,-8(fp)
 2809fd0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 2809fd4:	e037883a 	mov	sp,fp
 2809fd8:	dfc00117 	ldw	ra,4(sp)
 2809fdc:	df000017 	ldw	fp,0(sp)
 2809fe0:	dec00204 	addi	sp,sp,8
 2809fe4:	f800283a 	ret

02809fe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2809fe8:	defffd04 	addi	sp,sp,-12
 2809fec:	dfc00215 	stw	ra,8(sp)
 2809ff0:	df000115 	stw	fp,4(sp)
 2809ff4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2809ff8:	0080a074 	movhi	r2,641
 2809ffc:	10bd4504 	addi	r2,r2,-2796
 280a000:	10800017 	ldw	r2,0(r2)
 280a004:	1005003a 	cmpeq	r2,r2,zero
 280a008:	1000061e 	bne	r2,zero,280a024 <alt_get_errno+0x3c>
 280a00c:	0080a074 	movhi	r2,641
 280a010:	10bd4504 	addi	r2,r2,-2796
 280a014:	10800017 	ldw	r2,0(r2)
 280a018:	103ee83a 	callr	r2
 280a01c:	e0bfff15 	stw	r2,-4(fp)
 280a020:	00000306 	br	280a030 <alt_get_errno+0x48>
 280a024:	0080a074 	movhi	r2,641
 280a028:	10842604 	addi	r2,r2,4248
 280a02c:	e0bfff15 	stw	r2,-4(fp)
 280a030:	e0bfff17 	ldw	r2,-4(fp)
}
 280a034:	e037883a 	mov	sp,fp
 280a038:	dfc00117 	ldw	ra,4(sp)
 280a03c:	df000017 	ldw	fp,0(sp)
 280a040:	dec00204 	addi	sp,sp,8
 280a044:	f800283a 	ret

0280a048 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 280a048:	deffeb04 	addi	sp,sp,-84
 280a04c:	dfc01415 	stw	ra,80(sp)
 280a050:	df001315 	stw	fp,76(sp)
 280a054:	df001304 	addi	fp,sp,76
 280a058:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 280a05c:	e0bffd17 	ldw	r2,-12(fp)
 280a060:	1004803a 	cmplt	r2,r2,zero
 280a064:	1000091e 	bne	r2,zero,280a08c <isatty+0x44>
 280a068:	e13ffd17 	ldw	r4,-12(fp)
 280a06c:	01400304 	movi	r5,12
 280a070:	28096940 	call	2809694 <__mulsi3>
 280a074:	1007883a 	mov	r3,r2
 280a078:	0080a074 	movhi	r2,641
 280a07c:	10b88b04 	addi	r2,r2,-7636
 280a080:	1887883a 	add	r3,r3,r2
 280a084:	e0ffff15 	stw	r3,-4(fp)
 280a088:	00000106 	br	280a090 <isatty+0x48>
 280a08c:	e03fff15 	stw	zero,-4(fp)
 280a090:	e0bfff17 	ldw	r2,-4(fp)
 280a094:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 280a098:	e0bfed17 	ldw	r2,-76(fp)
 280a09c:	1005003a 	cmpeq	r2,r2,zero
 280a0a0:	10000f1e 	bne	r2,zero,280a0e0 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 280a0a4:	e0bfed17 	ldw	r2,-76(fp)
 280a0a8:	10800017 	ldw	r2,0(r2)
 280a0ac:	10800817 	ldw	r2,32(r2)
 280a0b0:	1004c03a 	cmpne	r2,r2,zero
 280a0b4:	1000031e 	bne	r2,zero,280a0c4 <isatty+0x7c>
    {
      return 1;
 280a0b8:	00800044 	movi	r2,1
 280a0bc:	e0bffe15 	stw	r2,-8(fp)
 280a0c0:	00000c06 	br	280a0f4 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 280a0c4:	e17fee04 	addi	r5,fp,-72
 280a0c8:	e13ffd17 	ldw	r4,-12(fp)
 280a0cc:	2809f100 	call	2809f10 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 280a0d0:	e0bfef17 	ldw	r2,-68(fp)
 280a0d4:	10880020 	cmpeqi	r2,r2,8192
 280a0d8:	e0bffe15 	stw	r2,-8(fp)
 280a0dc:	00000506 	br	280a0f4 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 280a0e0:	280a10c0 	call	280a10c <alt_get_errno>
 280a0e4:	1007883a 	mov	r3,r2
 280a0e8:	00801444 	movi	r2,81
 280a0ec:	18800015 	stw	r2,0(r3)
    return 0;
 280a0f0:	e03ffe15 	stw	zero,-8(fp)
 280a0f4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 280a0f8:	e037883a 	mov	sp,fp
 280a0fc:	dfc00117 	ldw	ra,4(sp)
 280a100:	df000017 	ldw	fp,0(sp)
 280a104:	dec00204 	addi	sp,sp,8
 280a108:	f800283a 	ret

0280a10c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 280a10c:	defffd04 	addi	sp,sp,-12
 280a110:	dfc00215 	stw	ra,8(sp)
 280a114:	df000115 	stw	fp,4(sp)
 280a118:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 280a11c:	0080a074 	movhi	r2,641
 280a120:	10bd4504 	addi	r2,r2,-2796
 280a124:	10800017 	ldw	r2,0(r2)
 280a128:	1005003a 	cmpeq	r2,r2,zero
 280a12c:	1000061e 	bne	r2,zero,280a148 <alt_get_errno+0x3c>
 280a130:	0080a074 	movhi	r2,641
 280a134:	10bd4504 	addi	r2,r2,-2796
 280a138:	10800017 	ldw	r2,0(r2)
 280a13c:	103ee83a 	callr	r2
 280a140:	e0bfff15 	stw	r2,-4(fp)
 280a144:	00000306 	br	280a154 <alt_get_errno+0x48>
 280a148:	0080a074 	movhi	r2,641
 280a14c:	10842604 	addi	r2,r2,4248
 280a150:	e0bfff15 	stw	r2,-4(fp)
 280a154:	e0bfff17 	ldw	r2,-4(fp)
}
 280a158:	e037883a 	mov	sp,fp
 280a15c:	dfc00117 	ldw	ra,4(sp)
 280a160:	df000017 	ldw	fp,0(sp)
 280a164:	dec00204 	addi	sp,sp,8
 280a168:	f800283a 	ret

0280a16c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 280a16c:	defffe04 	addi	sp,sp,-8
 280a170:	dfc00115 	stw	ra,4(sp)
 280a174:	df000015 	stw	fp,0(sp)
 280a178:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 280a17c:	0100a074 	movhi	r4,641
 280a180:	213d4e04 	addi	r4,r4,-2760
 280a184:	0140a074 	movhi	r5,641
 280a188:	29767c04 	addi	r5,r5,-9744
 280a18c:	0180a074 	movhi	r6,641
 280a190:	31bd4e04 	addi	r6,r6,-2760
 280a194:	280a1ec0 	call	280a1ec <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 280a198:	0100a034 	movhi	r4,640
 280a19c:	21000804 	addi	r4,r4,32
 280a1a0:	0140a034 	movhi	r5,640
 280a1a4:	29400804 	addi	r5,r5,32
 280a1a8:	0180a034 	movhi	r6,640
 280a1ac:	31806d04 	addi	r6,r6,436
 280a1b0:	280a1ec0 	call	280a1ec <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 280a1b4:	0100a074 	movhi	r4,641
 280a1b8:	2135a704 	addi	r4,r4,-10596
 280a1bc:	0140a074 	movhi	r5,641
 280a1c0:	2975a704 	addi	r5,r5,-10596
 280a1c4:	0180a074 	movhi	r6,641
 280a1c8:	31b67c04 	addi	r6,r6,-9744
 280a1cc:	280a1ec0 	call	280a1ec <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 280a1d0:	280c3c40 	call	280c3c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 280a1d4:	280c7c00 	call	280c7c0 <alt_icache_flush_all>
}
 280a1d8:	e037883a 	mov	sp,fp
 280a1dc:	dfc00117 	ldw	ra,4(sp)
 280a1e0:	df000017 	ldw	fp,0(sp)
 280a1e4:	dec00204 	addi	sp,sp,8
 280a1e8:	f800283a 	ret

0280a1ec <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 280a1ec:	defffc04 	addi	sp,sp,-16
 280a1f0:	df000315 	stw	fp,12(sp)
 280a1f4:	df000304 	addi	fp,sp,12
 280a1f8:	e13ffd15 	stw	r4,-12(fp)
 280a1fc:	e17ffe15 	stw	r5,-8(fp)
 280a200:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 280a204:	e0fffe17 	ldw	r3,-8(fp)
 280a208:	e0bffd17 	ldw	r2,-12(fp)
 280a20c:	18800e26 	beq	r3,r2,280a248 <alt_load_section+0x5c>
  {
    while( to != end )
 280a210:	00000a06 	br	280a23c <alt_load_section+0x50>
    {
      *to++ = *from++;
 280a214:	e0bffd17 	ldw	r2,-12(fp)
 280a218:	10c00017 	ldw	r3,0(r2)
 280a21c:	e0bffe17 	ldw	r2,-8(fp)
 280a220:	10c00015 	stw	r3,0(r2)
 280a224:	e0bffe17 	ldw	r2,-8(fp)
 280a228:	10800104 	addi	r2,r2,4
 280a22c:	e0bffe15 	stw	r2,-8(fp)
 280a230:	e0bffd17 	ldw	r2,-12(fp)
 280a234:	10800104 	addi	r2,r2,4
 280a238:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 280a23c:	e0fffe17 	ldw	r3,-8(fp)
 280a240:	e0bfff17 	ldw	r2,-4(fp)
 280a244:	18bff31e 	bne	r3,r2,280a214 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 280a248:	e037883a 	mov	sp,fp
 280a24c:	df000017 	ldw	fp,0(sp)
 280a250:	dec00104 	addi	sp,sp,4
 280a254:	f800283a 	ret

0280a258 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 280a258:	defff804 	addi	sp,sp,-32
 280a25c:	dfc00715 	stw	ra,28(sp)
 280a260:	df000615 	stw	fp,24(sp)
 280a264:	df000604 	addi	fp,sp,24
 280a268:	e13ffc15 	stw	r4,-16(fp)
 280a26c:	e17ffd15 	stw	r5,-12(fp)
 280a270:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 280a274:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 280a278:	e0bffc17 	ldw	r2,-16(fp)
 280a27c:	1004803a 	cmplt	r2,r2,zero
 280a280:	1000091e 	bne	r2,zero,280a2a8 <lseek+0x50>
 280a284:	e13ffc17 	ldw	r4,-16(fp)
 280a288:	01400304 	movi	r5,12
 280a28c:	28096940 	call	2809694 <__mulsi3>
 280a290:	1007883a 	mov	r3,r2
 280a294:	0080a074 	movhi	r2,641
 280a298:	10b88b04 	addi	r2,r2,-7636
 280a29c:	1887883a 	add	r3,r3,r2
 280a2a0:	e0ffff15 	stw	r3,-4(fp)
 280a2a4:	00000106 	br	280a2ac <lseek+0x54>
 280a2a8:	e03fff15 	stw	zero,-4(fp)
 280a2ac:	e0bfff17 	ldw	r2,-4(fp)
 280a2b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 280a2b4:	e0bffb17 	ldw	r2,-20(fp)
 280a2b8:	1005003a 	cmpeq	r2,r2,zero
 280a2bc:	1000111e 	bne	r2,zero,280a304 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 280a2c0:	e0bffb17 	ldw	r2,-20(fp)
 280a2c4:	10800017 	ldw	r2,0(r2)
 280a2c8:	10800717 	ldw	r2,28(r2)
 280a2cc:	1005003a 	cmpeq	r2,r2,zero
 280a2d0:	1000091e 	bne	r2,zero,280a2f8 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 280a2d4:	e0bffb17 	ldw	r2,-20(fp)
 280a2d8:	10800017 	ldw	r2,0(r2)
 280a2dc:	10800717 	ldw	r2,28(r2)
 280a2e0:	e13ffb17 	ldw	r4,-20(fp)
 280a2e4:	e17ffd17 	ldw	r5,-12(fp)
 280a2e8:	e1bffe17 	ldw	r6,-8(fp)
 280a2ec:	103ee83a 	callr	r2
 280a2f0:	e0bffa15 	stw	r2,-24(fp)
 280a2f4:	00000506 	br	280a30c <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 280a2f8:	00bfde84 	movi	r2,-134
 280a2fc:	e0bffa15 	stw	r2,-24(fp)
 280a300:	00000206 	br	280a30c <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 280a304:	00bfebc4 	movi	r2,-81
 280a308:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 280a30c:	e0bffa17 	ldw	r2,-24(fp)
 280a310:	1004403a 	cmpge	r2,r2,zero
 280a314:	1000071e 	bne	r2,zero,280a334 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 280a318:	280a34c0 	call	280a34c <alt_get_errno>
 280a31c:	1007883a 	mov	r3,r2
 280a320:	e0bffa17 	ldw	r2,-24(fp)
 280a324:	0085c83a 	sub	r2,zero,r2
 280a328:	18800015 	stw	r2,0(r3)
    rc = -1;
 280a32c:	00bfffc4 	movi	r2,-1
 280a330:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 280a334:	e0bffa17 	ldw	r2,-24(fp)
}
 280a338:	e037883a 	mov	sp,fp
 280a33c:	dfc00117 	ldw	ra,4(sp)
 280a340:	df000017 	ldw	fp,0(sp)
 280a344:	dec00204 	addi	sp,sp,8
 280a348:	f800283a 	ret

0280a34c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 280a34c:	defffd04 	addi	sp,sp,-12
 280a350:	dfc00215 	stw	ra,8(sp)
 280a354:	df000115 	stw	fp,4(sp)
 280a358:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 280a35c:	0080a074 	movhi	r2,641
 280a360:	10bd4504 	addi	r2,r2,-2796
 280a364:	10800017 	ldw	r2,0(r2)
 280a368:	1005003a 	cmpeq	r2,r2,zero
 280a36c:	1000061e 	bne	r2,zero,280a388 <alt_get_errno+0x3c>
 280a370:	0080a074 	movhi	r2,641
 280a374:	10bd4504 	addi	r2,r2,-2796
 280a378:	10800017 	ldw	r2,0(r2)
 280a37c:	103ee83a 	callr	r2
 280a380:	e0bfff15 	stw	r2,-4(fp)
 280a384:	00000306 	br	280a394 <alt_get_errno+0x48>
 280a388:	0080a074 	movhi	r2,641
 280a38c:	10842604 	addi	r2,r2,4248
 280a390:	e0bfff15 	stw	r2,-4(fp)
 280a394:	e0bfff17 	ldw	r2,-4(fp)
}
 280a398:	e037883a 	mov	sp,fp
 280a39c:	dfc00117 	ldw	ra,4(sp)
 280a3a0:	df000017 	ldw	fp,0(sp)
 280a3a4:	dec00204 	addi	sp,sp,8
 280a3a8:	f800283a 	ret

0280a3ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 280a3ac:	defffd04 	addi	sp,sp,-12
 280a3b0:	dfc00215 	stw	ra,8(sp)
 280a3b4:	df000115 	stw	fp,4(sp)
 280a3b8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 280a3bc:	0009883a 	mov	r4,zero
 280a3c0:	280a8c40 	call	280a8c4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 280a3c4:	280a8f80 	call	280a8f8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 280a3c8:	0100a074 	movhi	r4,641
 280a3cc:	21367104 	addi	r4,r4,-9788
 280a3d0:	0140a074 	movhi	r5,641
 280a3d4:	29767104 	addi	r5,r5,-9788
 280a3d8:	0180a074 	movhi	r6,641
 280a3dc:	31b67104 	addi	r6,r6,-9788
 280a3e0:	280cb800 	call	280cb80 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 280a3e4:	280c6640 	call	280c664 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 280a3e8:	0100a074 	movhi	r4,641
 280a3ec:	2131b204 	addi	r4,r4,-14648
 280a3f0:	280d2900 	call	280d290 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 280a3f4:	d126ed17 	ldw	r4,-25676(gp)
 280a3f8:	d166ee17 	ldw	r5,-25672(gp)
 280a3fc:	d1a6ef17 	ldw	r6,-25668(gp)
 280a400:	28001f00 	call	28001f0 <main>
 280a404:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 280a408:	01000044 	movi	r4,1
 280a40c:	2809d840 	call	2809d84 <close>
  exit (result);
 280a410:	e13fff17 	ldw	r4,-4(fp)
 280a414:	280d2a40 	call	280d2a4 <exit>

0280a418 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 280a418:	defffe04 	addi	sp,sp,-8
 280a41c:	df000115 	stw	fp,4(sp)
 280a420:	df000104 	addi	fp,sp,4
 280a424:	e13fff15 	stw	r4,-4(fp)
}
 280a428:	e037883a 	mov	sp,fp
 280a42c:	df000017 	ldw	fp,0(sp)
 280a430:	dec00104 	addi	sp,sp,4
 280a434:	f800283a 	ret

0280a438 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 280a438:	defffe04 	addi	sp,sp,-8
 280a43c:	df000115 	stw	fp,4(sp)
 280a440:	df000104 	addi	fp,sp,4
 280a444:	e13fff15 	stw	r4,-4(fp)
}
 280a448:	e037883a 	mov	sp,fp
 280a44c:	df000017 	ldw	fp,0(sp)
 280a450:	dec00104 	addi	sp,sp,4
 280a454:	f800283a 	ret

0280a458 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 280a458:	defff704 	addi	sp,sp,-36
 280a45c:	dfc00815 	stw	ra,32(sp)
 280a460:	df000715 	stw	fp,28(sp)
 280a464:	df000704 	addi	fp,sp,28
 280a468:	e13ffb15 	stw	r4,-20(fp)
 280a46c:	e17ffc15 	stw	r5,-16(fp)
 280a470:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 280a474:	e0bffb17 	ldw	r2,-20(fp)
 280a478:	1004803a 	cmplt	r2,r2,zero
 280a47c:	1000091e 	bne	r2,zero,280a4a4 <read+0x4c>
 280a480:	e13ffb17 	ldw	r4,-20(fp)
 280a484:	01400304 	movi	r5,12
 280a488:	28096940 	call	2809694 <__mulsi3>
 280a48c:	1007883a 	mov	r3,r2
 280a490:	0080a074 	movhi	r2,641
 280a494:	10b88b04 	addi	r2,r2,-7636
 280a498:	1887883a 	add	r3,r3,r2
 280a49c:	e0ffff15 	stw	r3,-4(fp)
 280a4a0:	00000106 	br	280a4a8 <read+0x50>
 280a4a4:	e03fff15 	stw	zero,-4(fp)
 280a4a8:	e0bfff17 	ldw	r2,-4(fp)
 280a4ac:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 280a4b0:	e0bffa17 	ldw	r2,-24(fp)
 280a4b4:	1005003a 	cmpeq	r2,r2,zero
 280a4b8:	1000241e 	bne	r2,zero,280a54c <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 280a4bc:	e0bffa17 	ldw	r2,-24(fp)
 280a4c0:	10800217 	ldw	r2,8(r2)
 280a4c4:	108000cc 	andi	r2,r2,3
 280a4c8:	10800060 	cmpeqi	r2,r2,1
 280a4cc:	10001a1e 	bne	r2,zero,280a538 <read+0xe0>
 280a4d0:	e0bffa17 	ldw	r2,-24(fp)
 280a4d4:	10800017 	ldw	r2,0(r2)
 280a4d8:	10800517 	ldw	r2,20(r2)
 280a4dc:	1005003a 	cmpeq	r2,r2,zero
 280a4e0:	1000151e 	bne	r2,zero,280a538 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 280a4e4:	e0bffa17 	ldw	r2,-24(fp)
 280a4e8:	10800017 	ldw	r2,0(r2)
 280a4ec:	10800517 	ldw	r2,20(r2)
 280a4f0:	e17ffc17 	ldw	r5,-16(fp)
 280a4f4:	e1bffd17 	ldw	r6,-12(fp)
 280a4f8:	e13ffa17 	ldw	r4,-24(fp)
 280a4fc:	103ee83a 	callr	r2
 280a500:	e0bff915 	stw	r2,-28(fp)
 280a504:	e0bff917 	ldw	r2,-28(fp)
 280a508:	1004403a 	cmpge	r2,r2,zero
 280a50c:	1000071e 	bne	r2,zero,280a52c <read+0xd4>
        {
          ALT_ERRNO = -rval;
 280a510:	280a57c0 	call	280a57c <alt_get_errno>
 280a514:	e0fff917 	ldw	r3,-28(fp)
 280a518:	00c7c83a 	sub	r3,zero,r3
 280a51c:	10c00015 	stw	r3,0(r2)
          return -1;
 280a520:	00bfffc4 	movi	r2,-1
 280a524:	e0bffe15 	stw	r2,-8(fp)
 280a528:	00000e06 	br	280a564 <read+0x10c>
        }
        return rval;
 280a52c:	e0bff917 	ldw	r2,-28(fp)
 280a530:	e0bffe15 	stw	r2,-8(fp)
 280a534:	00000b06 	br	280a564 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 280a538:	280a57c0 	call	280a57c <alt_get_errno>
 280a53c:	1007883a 	mov	r3,r2
 280a540:	00800344 	movi	r2,13
 280a544:	18800015 	stw	r2,0(r3)
 280a548:	00000406 	br	280a55c <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 280a54c:	280a57c0 	call	280a57c <alt_get_errno>
 280a550:	1007883a 	mov	r3,r2
 280a554:	00801444 	movi	r2,81
 280a558:	18800015 	stw	r2,0(r3)
  }
  return -1;
 280a55c:	00bfffc4 	movi	r2,-1
 280a560:	e0bffe15 	stw	r2,-8(fp)
 280a564:	e0bffe17 	ldw	r2,-8(fp)
}
 280a568:	e037883a 	mov	sp,fp
 280a56c:	dfc00117 	ldw	ra,4(sp)
 280a570:	df000017 	ldw	fp,0(sp)
 280a574:	dec00204 	addi	sp,sp,8
 280a578:	f800283a 	ret

0280a57c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 280a57c:	defffd04 	addi	sp,sp,-12
 280a580:	dfc00215 	stw	ra,8(sp)
 280a584:	df000115 	stw	fp,4(sp)
 280a588:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 280a58c:	0080a074 	movhi	r2,641
 280a590:	10bd4504 	addi	r2,r2,-2796
 280a594:	10800017 	ldw	r2,0(r2)
 280a598:	1005003a 	cmpeq	r2,r2,zero
 280a59c:	1000061e 	bne	r2,zero,280a5b8 <alt_get_errno+0x3c>
 280a5a0:	0080a074 	movhi	r2,641
 280a5a4:	10bd4504 	addi	r2,r2,-2796
 280a5a8:	10800017 	ldw	r2,0(r2)
 280a5ac:	103ee83a 	callr	r2
 280a5b0:	e0bfff15 	stw	r2,-4(fp)
 280a5b4:	00000306 	br	280a5c4 <alt_get_errno+0x48>
 280a5b8:	0080a074 	movhi	r2,641
 280a5bc:	10842604 	addi	r2,r2,4248
 280a5c0:	e0bfff15 	stw	r2,-4(fp)
 280a5c4:	e0bfff17 	ldw	r2,-4(fp)
}
 280a5c8:	e037883a 	mov	sp,fp
 280a5cc:	dfc00117 	ldw	ra,4(sp)
 280a5d0:	df000017 	ldw	fp,0(sp)
 280a5d4:	dec00204 	addi	sp,sp,8
 280a5d8:	f800283a 	ret

0280a5dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 280a5dc:	defffc04 	addi	sp,sp,-16
 280a5e0:	dfc00315 	stw	ra,12(sp)
 280a5e4:	df000215 	stw	fp,8(sp)
 280a5e8:	dc000115 	stw	r16,4(sp)
 280a5ec:	df000104 	addi	fp,sp,4
 280a5f0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 280a5f4:	e0bfff17 	ldw	r2,-4(fp)
 280a5f8:	108000d0 	cmplti	r2,r2,3
 280a5fc:	10000f1e 	bne	r2,zero,280a63c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 280a600:	e13fff17 	ldw	r4,-4(fp)
 280a604:	0400a074 	movhi	r16,641
 280a608:	84388b04 	addi	r16,r16,-7636
 280a60c:	01400304 	movi	r5,12
 280a610:	28096940 	call	2809694 <__mulsi3>
 280a614:	1405883a 	add	r2,r2,r16
 280a618:	10800204 	addi	r2,r2,8
 280a61c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 280a620:	e13fff17 	ldw	r4,-4(fp)
 280a624:	0400a074 	movhi	r16,641
 280a628:	84388b04 	addi	r16,r16,-7636
 280a62c:	01400304 	movi	r5,12
 280a630:	28096940 	call	2809694 <__mulsi3>
 280a634:	1405883a 	add	r2,r2,r16
 280a638:	10000015 	stw	zero,0(r2)
  }
}
 280a63c:	e037883a 	mov	sp,fp
 280a640:	dfc00217 	ldw	ra,8(sp)
 280a644:	df000117 	ldw	fp,4(sp)
 280a648:	dc000017 	ldw	r16,0(sp)
 280a64c:	dec00304 	addi	sp,sp,12
 280a650:	f800283a 	ret

0280a654 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 280a654:	defff804 	addi	sp,sp,-32
 280a658:	df000715 	stw	fp,28(sp)
 280a65c:	df000704 	addi	fp,sp,28
 280a660:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 280a664:	0005303a 	rdctl	r2,status
 280a668:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 280a66c:	e0fffb17 	ldw	r3,-20(fp)
 280a670:	00bfff84 	movi	r2,-2
 280a674:	1884703a 	and	r2,r3,r2
 280a678:	1001703a 	wrctl	status,r2
  
  return context;
 280a67c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 280a680:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 280a684:	d0a00c17 	ldw	r2,-32720(gp)
 280a688:	10c000c4 	addi	r3,r2,3
 280a68c:	00bfff04 	movi	r2,-4
 280a690:	1884703a 	and	r2,r3,r2
 280a694:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 280a698:	d0e00c17 	ldw	r3,-32720(gp)
 280a69c:	e0bffe17 	ldw	r2,-8(fp)
 280a6a0:	1887883a 	add	r3,r3,r2
 280a6a4:	0080c034 	movhi	r2,768
 280a6a8:	10800004 	addi	r2,r2,0
 280a6ac:	10c0072e 	bgeu	r2,r3,280a6cc <sbrk+0x78>
 280a6b0:	e0bffd17 	ldw	r2,-12(fp)
 280a6b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 280a6b8:	e0bffa17 	ldw	r2,-24(fp)
 280a6bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 280a6c0:	00bfffc4 	movi	r2,-1
 280a6c4:	e0bfff15 	stw	r2,-4(fp)
 280a6c8:	00000c06 	br	280a6fc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 280a6cc:	d0a00c17 	ldw	r2,-32720(gp)
 280a6d0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 280a6d4:	d0e00c17 	ldw	r3,-32720(gp)
 280a6d8:	e0bffe17 	ldw	r2,-8(fp)
 280a6dc:	1885883a 	add	r2,r3,r2
 280a6e0:	d0a00c15 	stw	r2,-32720(gp)
 280a6e4:	e0bffd17 	ldw	r2,-12(fp)
 280a6e8:	e0bff915 	stw	r2,-28(fp)
 280a6ec:	e0bff917 	ldw	r2,-28(fp)
 280a6f0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 280a6f4:	e0bffc17 	ldw	r2,-16(fp)
 280a6f8:	e0bfff15 	stw	r2,-4(fp)
 280a6fc:	e0bfff17 	ldw	r2,-4(fp)
} 
 280a700:	e037883a 	mov	sp,fp
 280a704:	df000017 	ldw	fp,0(sp)
 280a708:	dec00104 	addi	sp,sp,4
 280a70c:	f800283a 	ret

0280a710 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 280a710:	defffd04 	addi	sp,sp,-12
 280a714:	dfc00215 	stw	ra,8(sp)
 280a718:	df000115 	stw	fp,4(sp)
 280a71c:	df000104 	addi	fp,sp,4
 280a720:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 280a724:	e13fff17 	ldw	r4,-4(fp)
 280a728:	280c2680 	call	280c268 <alt_busy_sleep>
}
 280a72c:	e037883a 	mov	sp,fp
 280a730:	dfc00117 	ldw	ra,4(sp)
 280a734:	df000017 	ldw	fp,0(sp)
 280a738:	dec00204 	addi	sp,sp,8
 280a73c:	f800283a 	ret

0280a740 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 280a740:	defff704 	addi	sp,sp,-36
 280a744:	dfc00815 	stw	ra,32(sp)
 280a748:	df000715 	stw	fp,28(sp)
 280a74c:	df000704 	addi	fp,sp,28
 280a750:	e13ffb15 	stw	r4,-20(fp)
 280a754:	e17ffc15 	stw	r5,-16(fp)
 280a758:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 280a75c:	e0bffb17 	ldw	r2,-20(fp)
 280a760:	1004803a 	cmplt	r2,r2,zero
 280a764:	1000091e 	bne	r2,zero,280a78c <write+0x4c>
 280a768:	e13ffb17 	ldw	r4,-20(fp)
 280a76c:	01400304 	movi	r5,12
 280a770:	28096940 	call	2809694 <__mulsi3>
 280a774:	1007883a 	mov	r3,r2
 280a778:	0080a074 	movhi	r2,641
 280a77c:	10b88b04 	addi	r2,r2,-7636
 280a780:	1887883a 	add	r3,r3,r2
 280a784:	e0ffff15 	stw	r3,-4(fp)
 280a788:	00000106 	br	280a790 <write+0x50>
 280a78c:	e03fff15 	stw	zero,-4(fp)
 280a790:	e0bfff17 	ldw	r2,-4(fp)
 280a794:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 280a798:	e0bffa17 	ldw	r2,-24(fp)
 280a79c:	1005003a 	cmpeq	r2,r2,zero
 280a7a0:	1000241e 	bne	r2,zero,280a834 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 280a7a4:	e0bffa17 	ldw	r2,-24(fp)
 280a7a8:	10800217 	ldw	r2,8(r2)
 280a7ac:	108000cc 	andi	r2,r2,3
 280a7b0:	1005003a 	cmpeq	r2,r2,zero
 280a7b4:	10001a1e 	bne	r2,zero,280a820 <write+0xe0>
 280a7b8:	e0bffa17 	ldw	r2,-24(fp)
 280a7bc:	10800017 	ldw	r2,0(r2)
 280a7c0:	10800617 	ldw	r2,24(r2)
 280a7c4:	1005003a 	cmpeq	r2,r2,zero
 280a7c8:	1000151e 	bne	r2,zero,280a820 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 280a7cc:	e0bffa17 	ldw	r2,-24(fp)
 280a7d0:	10800017 	ldw	r2,0(r2)
 280a7d4:	10800617 	ldw	r2,24(r2)
 280a7d8:	e17ffc17 	ldw	r5,-16(fp)
 280a7dc:	e1bffd17 	ldw	r6,-12(fp)
 280a7e0:	e13ffa17 	ldw	r4,-24(fp)
 280a7e4:	103ee83a 	callr	r2
 280a7e8:	e0bff915 	stw	r2,-28(fp)
 280a7ec:	e0bff917 	ldw	r2,-28(fp)
 280a7f0:	1004403a 	cmpge	r2,r2,zero
 280a7f4:	1000071e 	bne	r2,zero,280a814 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 280a7f8:	280a8640 	call	280a864 <alt_get_errno>
 280a7fc:	e0fff917 	ldw	r3,-28(fp)
 280a800:	00c7c83a 	sub	r3,zero,r3
 280a804:	10c00015 	stw	r3,0(r2)
        return -1;
 280a808:	00bfffc4 	movi	r2,-1
 280a80c:	e0bffe15 	stw	r2,-8(fp)
 280a810:	00000e06 	br	280a84c <write+0x10c>
      }
      return rval;
 280a814:	e0bff917 	ldw	r2,-28(fp)
 280a818:	e0bffe15 	stw	r2,-8(fp)
 280a81c:	00000b06 	br	280a84c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 280a820:	280a8640 	call	280a864 <alt_get_errno>
 280a824:	1007883a 	mov	r3,r2
 280a828:	00800344 	movi	r2,13
 280a82c:	18800015 	stw	r2,0(r3)
 280a830:	00000406 	br	280a844 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 280a834:	280a8640 	call	280a864 <alt_get_errno>
 280a838:	1007883a 	mov	r3,r2
 280a83c:	00801444 	movi	r2,81
 280a840:	18800015 	stw	r2,0(r3)
  }
  return -1;
 280a844:	00bfffc4 	movi	r2,-1
 280a848:	e0bffe15 	stw	r2,-8(fp)
 280a84c:	e0bffe17 	ldw	r2,-8(fp)
}
 280a850:	e037883a 	mov	sp,fp
 280a854:	dfc00117 	ldw	ra,4(sp)
 280a858:	df000017 	ldw	fp,0(sp)
 280a85c:	dec00204 	addi	sp,sp,8
 280a860:	f800283a 	ret

0280a864 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 280a864:	defffd04 	addi	sp,sp,-12
 280a868:	dfc00215 	stw	ra,8(sp)
 280a86c:	df000115 	stw	fp,4(sp)
 280a870:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 280a874:	0080a074 	movhi	r2,641
 280a878:	10bd4504 	addi	r2,r2,-2796
 280a87c:	10800017 	ldw	r2,0(r2)
 280a880:	1005003a 	cmpeq	r2,r2,zero
 280a884:	1000061e 	bne	r2,zero,280a8a0 <alt_get_errno+0x3c>
 280a888:	0080a074 	movhi	r2,641
 280a88c:	10bd4504 	addi	r2,r2,-2796
 280a890:	10800017 	ldw	r2,0(r2)
 280a894:	103ee83a 	callr	r2
 280a898:	e0bfff15 	stw	r2,-4(fp)
 280a89c:	00000306 	br	280a8ac <alt_get_errno+0x48>
 280a8a0:	0080a074 	movhi	r2,641
 280a8a4:	10842604 	addi	r2,r2,4248
 280a8a8:	e0bfff15 	stw	r2,-4(fp)
 280a8ac:	e0bfff17 	ldw	r2,-4(fp)
}
 280a8b0:	e037883a 	mov	sp,fp
 280a8b4:	dfc00117 	ldw	ra,4(sp)
 280a8b8:	df000017 	ldw	fp,0(sp)
 280a8bc:	dec00204 	addi	sp,sp,8
 280a8c0:	f800283a 	ret

0280a8c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 280a8c4:	defffd04 	addi	sp,sp,-12
 280a8c8:	dfc00215 	stw	ra,8(sp)
 280a8cc:	df000115 	stw	fp,4(sp)
 280a8d0:	df000104 	addi	fp,sp,4
 280a8d4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2CPU, nios2cpu);
 280a8d8:	280d0800 	call	280d080 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 280a8dc:	00800044 	movi	r2,1
 280a8e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 280a8e4:	e037883a 	mov	sp,fp
 280a8e8:	dfc00117 	ldw	ra,4(sp)
 280a8ec:	df000017 	ldw	fp,0(sp)
 280a8f0:	dec00204 	addi	sp,sp,8
 280a8f4:	f800283a 	ret

0280a8f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 280a8f8:	defffd04 	addi	sp,sp,-12
 280a8fc:	dfc00215 	stw	ra,8(sp)
 280a900:	df000115 	stw	fp,4(sp)
 280a904:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 280a908:	00c0a074 	movhi	r3,641
 280a90c:	18c42a04 	addi	r3,r3,4264
 280a910:	00804034 	movhi	r2,256
 280a914:	18800015 	stw	r2,0(r3)
 280a918:	00c0a074 	movhi	r3,641
 280a91c:	18c42b04 	addi	r3,r3,4268
 280a920:	00802674 	movhi	r2,153
 280a924:	10a5a004 	addi	r2,r2,-27008
 280a928:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_DMA_INIT ( DMA, dma);
 280a92c:	d8000015 	stw	zero,0(sp)
 280a930:	0100a074 	movhi	r4,641
 280a934:	21391404 	addi	r4,r4,-7088
 280a938:	0140a074 	movhi	r5,641
 280a93c:	29791b04 	addi	r5,r5,-7060
 280a940:	0180c034 	movhi	r6,768
 280a944:	31840004 	addi	r6,r6,4096
 280a948:	000f883a 	mov	r7,zero
 280a94c:	280b5480 	call	280b548 <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 280a950:	0100a074 	movhi	r4,641
 280a954:	21392c04 	addi	r4,r4,-6992
 280a958:	000b883a 	mov	r5,zero
 280a95c:	01800044 	movi	r6,1
 280a960:	280b7b00 	call	280b7b0 <altera_avalon_jtag_uart_init>
 280a964:	0100a074 	movhi	r4,641
 280a968:	21392204 	addi	r4,r4,-7032
 280a96c:	280a9840 	call	280a984 <alt_dev_reg>
}
 280a970:	e037883a 	mov	sp,fp
 280a974:	dfc00117 	ldw	ra,4(sp)
 280a978:	df000017 	ldw	fp,0(sp)
 280a97c:	dec00204 	addi	sp,sp,8
 280a980:	f800283a 	ret

0280a984 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 280a984:	defffd04 	addi	sp,sp,-12
 280a988:	dfc00215 	stw	ra,8(sp)
 280a98c:	df000115 	stw	fp,4(sp)
 280a990:	df000104 	addi	fp,sp,4
 280a994:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 280a998:	e13fff17 	ldw	r4,-4(fp)
 280a99c:	0140a074 	movhi	r5,641
 280a9a0:	297d4204 	addi	r5,r5,-2808
 280a9a4:	280c3e00 	call	280c3e0 <alt_dev_llist_insert>
}
 280a9a8:	e037883a 	mov	sp,fp
 280a9ac:	dfc00117 	ldw	ra,4(sp)
 280a9b0:	df000017 	ldw	fp,0(sp)
 280a9b4:	dec00204 	addi	sp,sp,8
 280a9b8:	f800283a 	ret

0280a9bc <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
 280a9bc:	defff904 	addi	sp,sp,-28
 280a9c0:	df000615 	stw	fp,24(sp)
 280a9c4:	df000604 	addi	fp,sp,24
 280a9c8:	e13ffc15 	stw	r4,-16(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
 280a9cc:	e0bffc17 	ldw	r2,-16(fp)
 280a9d0:	10c00117 	ldw	r3,4(r2)
 280a9d4:	e0bffc17 	ldw	r2,-16(fp)
 280a9d8:	10800217 	ldw	r2,8(r2)
 280a9dc:	18803926 	beq	r3,r2,280aac4 <alt_avalon_dma_launch_bidir+0x108>
 280a9e0:	e0bffc17 	ldw	r2,-16(fp)
 280a9e4:	10c00317 	ldw	r3,12(r2)
 280a9e8:	e0bffc17 	ldw	r2,-16(fp)
 280a9ec:	10800417 	ldw	r2,16(r2)
 280a9f0:	18803426 	beq	r3,r2,280aac4 <alt_avalon_dma_launch_bidir+0x108>
  {
    priv->active = 1;
 280a9f4:	e0fffc17 	ldw	r3,-16(fp)
 280a9f8:	00800044 	movi	r2,1
 280a9fc:	18800815 	stw	r2,32(r3)

    tx_slot = &priv->tx_buf[priv->tx_start];
 280aa00:	e0bffc17 	ldw	r2,-16(fp)
 280aa04:	10c00904 	addi	r3,r2,36
 280aa08:	e0bffc17 	ldw	r2,-16(fp)
 280aa0c:	10800117 	ldw	r2,4(r2)
 280aa10:	1004913a 	slli	r2,r2,4
 280aa14:	1885883a 	add	r2,r3,r2
 280aa18:	e0bffb15 	stw	r2,-20(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
 280aa1c:	e0bffc17 	ldw	r2,-16(fp)
 280aa20:	10c01904 	addi	r3,r2,100
 280aa24:	e0bffc17 	ldw	r2,-16(fp)
 280aa28:	10800317 	ldw	r2,12(r2)
 280aa2c:	1004913a 	slli	r2,r2,4
 280aa30:	1885883a 	add	r2,r3,r2
 280aa34:	e0bffa15 	stw	r2,-24(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
 280aa38:	e0bffc17 	ldw	r2,-16(fp)
 280aa3c:	10800017 	ldw	r2,0(r2)
 280aa40:	11000104 	addi	r4,r2,4
 280aa44:	e0bffb17 	ldw	r2,-20(fp)
 280aa48:	10800017 	ldw	r2,0(r2)
 280aa4c:	1007883a 	mov	r3,r2
 280aa50:	2005883a 	mov	r2,r4
 280aa54:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
 280aa58:	e0bffc17 	ldw	r2,-16(fp)
 280aa5c:	10800017 	ldw	r2,0(r2)
 280aa60:	11000204 	addi	r4,r2,8
 280aa64:	e0bffa17 	ldw	r2,-24(fp)
 280aa68:	10800017 	ldw	r2,0(r2)
 280aa6c:	1007883a 	mov	r3,r2
 280aa70:	2005883a 	mov	r2,r4
 280aa74:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
 280aa78:	e0bffc17 	ldw	r2,-16(fp)
 280aa7c:	10800017 	ldw	r2,0(r2)
 280aa80:	10800304 	addi	r2,r2,12
 280aa84:	e0bfff15 	stw	r2,-4(fp)
 280aa88:	e0bffb17 	ldw	r2,-20(fp)
 280aa8c:	10c00117 	ldw	r3,4(r2)
 280aa90:	e0bffa17 	ldw	r2,-24(fp)
 280aa94:	10800117 	ldw	r2,4(r2)
 280aa98:	e0bffe15 	stw	r2,-8(fp)
 280aa9c:	e0fffd15 	stw	r3,-12(fp)
 280aaa0:	e0bffe17 	ldw	r2,-8(fp)
 280aaa4:	e0fffd17 	ldw	r3,-12(fp)
 280aaa8:	10c0022e 	bgeu	r2,r3,280aab4 <alt_avalon_dma_launch_bidir+0xf8>
 280aaac:	e0bffe17 	ldw	r2,-8(fp)
 280aab0:	e0bffd15 	stw	r2,-12(fp)
 280aab4:	e0fffd17 	ldw	r3,-12(fp)
 280aab8:	e0bfff17 	ldw	r2,-4(fp)
 280aabc:	10c00035 	stwio	r3,0(r2)
void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
 280aac0:	00000206 	br	280aacc <alt_avalon_dma_launch_bidir+0x110>
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
 280aac4:	e0bffc17 	ldw	r2,-16(fp)
 280aac8:	10000815 	stw	zero,32(r2)
  }
}
 280aacc:	e037883a 	mov	sp,fp
 280aad0:	df000017 	ldw	fp,0(sp)
 280aad4:	dec00104 	addi	sp,sp,4
 280aad8:	f800283a 	ret

0280aadc <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
 280aadc:	defffd04 	addi	sp,sp,-12
 280aae0:	df000215 	stw	fp,8(sp)
 280aae4:	df000204 	addi	fp,sp,8
 280aae8:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
 280aaec:	e0bfff17 	ldw	r2,-4(fp)
 280aaf0:	10c00117 	ldw	r3,4(r2)
 280aaf4:	e0bfff17 	ldw	r2,-4(fp)
 280aaf8:	10800217 	ldw	r2,8(r2)
 280aafc:	18801b26 	beq	r3,r2,280ab6c <alt_avalon_dma_launch_txonly+0x90>
  {
    priv->active = 1;
 280ab00:	e0ffff17 	ldw	r3,-4(fp)
 280ab04:	00800044 	movi	r2,1
 280ab08:	18800815 	stw	r2,32(r3)
    tx_slot      = &priv->tx_buf[priv->tx_start];
 280ab0c:	e0bfff17 	ldw	r2,-4(fp)
 280ab10:	10c00904 	addi	r3,r2,36
 280ab14:	e0bfff17 	ldw	r2,-4(fp)
 280ab18:	10800117 	ldw	r2,4(r2)
 280ab1c:	1004913a 	slli	r2,r2,4
 280ab20:	1885883a 	add	r2,r3,r2
 280ab24:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
 280ab28:	e0bfff17 	ldw	r2,-4(fp)
 280ab2c:	10800017 	ldw	r2,0(r2)
 280ab30:	11000104 	addi	r4,r2,4
 280ab34:	e0bffe17 	ldw	r2,-8(fp)
 280ab38:	10800017 	ldw	r2,0(r2)
 280ab3c:	1007883a 	mov	r3,r2
 280ab40:	2005883a 	mov	r2,r4
 280ab44:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
 280ab48:	e0bfff17 	ldw	r2,-4(fp)
 280ab4c:	10800017 	ldw	r2,0(r2)
 280ab50:	11000304 	addi	r4,r2,12
 280ab54:	e0bffe17 	ldw	r2,-8(fp)
 280ab58:	10800117 	ldw	r2,4(r2)
 280ab5c:	1007883a 	mov	r3,r2
 280ab60:	2005883a 	mov	r2,r4
 280ab64:	10c00035 	stwio	r3,0(r2)
 280ab68:	00000206 	br	280ab74 <alt_avalon_dma_launch_txonly+0x98>
  }
  else
  {
    priv->active = 0;
 280ab6c:	e0bfff17 	ldw	r2,-4(fp)
 280ab70:	10000815 	stw	zero,32(r2)
  }
}
 280ab74:	e037883a 	mov	sp,fp
 280ab78:	df000017 	ldw	fp,0(sp)
 280ab7c:	dec00104 	addi	sp,sp,4
 280ab80:	f800283a 	ret

0280ab84 <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
 280ab84:	defffd04 	addi	sp,sp,-12
 280ab88:	df000215 	stw	fp,8(sp)
 280ab8c:	df000204 	addi	fp,sp,8
 280ab90:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
 280ab94:	e0bfff17 	ldw	r2,-4(fp)
 280ab98:	10c00317 	ldw	r3,12(r2)
 280ab9c:	e0bfff17 	ldw	r2,-4(fp)
 280aba0:	10800417 	ldw	r2,16(r2)
 280aba4:	18801b26 	beq	r3,r2,280ac14 <alt_avalon_dma_launch_rxonly+0x90>
  {
    priv->active = 1;
 280aba8:	e0ffff17 	ldw	r3,-4(fp)
 280abac:	00800044 	movi	r2,1
 280abb0:	18800815 	stw	r2,32(r3)
    rx_slot      = &priv->rx_buf[priv->rx_start];
 280abb4:	e0bfff17 	ldw	r2,-4(fp)
 280abb8:	10c01904 	addi	r3,r2,100
 280abbc:	e0bfff17 	ldw	r2,-4(fp)
 280abc0:	10800317 	ldw	r2,12(r2)
 280abc4:	1004913a 	slli	r2,r2,4
 280abc8:	1885883a 	add	r2,r3,r2
 280abcc:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
 280abd0:	e0bfff17 	ldw	r2,-4(fp)
 280abd4:	10800017 	ldw	r2,0(r2)
 280abd8:	11000204 	addi	r4,r2,8
 280abdc:	e0bffe17 	ldw	r2,-8(fp)
 280abe0:	10800017 	ldw	r2,0(r2)
 280abe4:	1007883a 	mov	r3,r2
 280abe8:	2005883a 	mov	r2,r4
 280abec:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
 280abf0:	e0bfff17 	ldw	r2,-4(fp)
 280abf4:	10800017 	ldw	r2,0(r2)
 280abf8:	11000304 	addi	r4,r2,12
 280abfc:	e0bffe17 	ldw	r2,-8(fp)
 280ac00:	10800117 	ldw	r2,4(r2)
 280ac04:	1007883a 	mov	r3,r2
 280ac08:	2005883a 	mov	r2,r4
 280ac0c:	10c00035 	stwio	r3,0(r2)
 280ac10:	00000206 	br	280ac1c <alt_avalon_dma_launch_rxonly+0x98>
  }
  else
  {
    priv->active = 0;
 280ac14:	e0bfff17 	ldw	r2,-4(fp)
 280ac18:	10000815 	stw	zero,32(r2)
  }
}
 280ac1c:	e037883a 	mov	sp,fp
 280ac20:	df000017 	ldw	fp,0(sp)
 280ac24:	dec00104 	addi	sp,sp,4
 280ac28:	f800283a 	ret

0280ac2c <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
 280ac2c:	defff804 	addi	sp,sp,-32
 280ac30:	df000715 	stw	fp,28(sp)
 280ac34:	df000704 	addi	fp,sp,28
 280ac38:	e13ffb15 	stw	r4,-20(fp)
 280ac3c:	e17ffc15 	stw	r5,-16(fp)
 280ac40:	e1bffd15 	stw	r6,-12(fp)
  int     status = 0;
 280ac44:	e03ffa15 	stw	zero,-24(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
 280ac48:	e0bffb17 	ldw	r2,-20(fp)
 280ac4c:	10c00117 	ldw	r3,4(r2)
 280ac50:	e0bffb17 	ldw	r2,-20(fp)
 280ac54:	10800217 	ldw	r2,8(r2)
 280ac58:	18800b1e 	bne	r3,r2,280ac88 <alt_avalon_dma_ioctl+0x5c>
 280ac5c:	e0bffb17 	ldw	r2,-20(fp)
 280ac60:	10c00317 	ldw	r3,12(r2)
 280ac64:	e0bffb17 	ldw	r2,-20(fp)
 280ac68:	10800417 	ldw	r2,16(r2)
 280ac6c:	1880061e 	bne	r3,r2,280ac88 <alt_avalon_dma_ioctl+0x5c>
 280ac70:	e0bffb17 	ldw	r2,-20(fp)
 280ac74:	10800017 	ldw	r2,0(r2)
 280ac78:	10800304 	addi	r2,r2,12
 280ac7c:	10800037 	ldwio	r2,0(r2)
 280ac80:	1005003a 	cmpeq	r2,r2,zero
 280ac84:	1000031e 	bne	r2,zero,280ac94 <alt_avalon_dma_ioctl+0x68>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
 280ac88:	00bffec4 	movi	r2,-5
 280ac8c:	e0bfff15 	stw	r2,-4(fp)
 280ac90:	0000ca06 	br	280afbc <alt_avalon_dma_ioctl+0x390>
  }

  /* Now process the ioctl. */

  switch (req)
 280ac94:	e0bffc17 	ldw	r2,-16(fp)
 280ac98:	108002a8 	cmpgeui	r2,r2,10
 280ac9c:	10007d1e 	bne	r2,zero,280ae94 <alt_avalon_dma_ioctl+0x268>
 280aca0:	e0bffc17 	ldw	r2,-16(fp)
 280aca4:	1085883a 	add	r2,r2,r2
 280aca8:	1087883a 	add	r3,r2,r2
 280acac:	0080a074 	movhi	r2,641
 280acb0:	10ab3004 	addi	r2,r2,-21312
 280acb4:	1885883a 	add	r2,r3,r2
 280acb8:	10800017 	ldw	r2,0(r2)
 280acbc:	1000683a 	jmp	r2
 280acc0:	0280ae94 	movui	r10,698
 280acc4:	0280ace8 	cmpgeui	r10,zero,691
 280acc8:	0280ad44 	movi	r10,693
 280accc:	0280ad70 	cmpltui	r10,zero,693
 280acd0:	0280adcc 	andi	r10,zero,695
 280acd4:	0280adf8 	rdprs	r10,zero,695
 280acd8:	0280ae14 	movui	r10,696
 280acdc:	0280ae34 	movhi	r10,696
 280ace0:	0280ae54 	movui	r10,697
 280ace4:	0280ae74 	movhi	r10,697
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
 280ace8:	e0bffb17 	ldw	r2,-20(fp)
 280acec:	10800517 	ldw	r2,20(r2)
 280acf0:	1080100c 	andi	r2,r2,64
 280acf4:	1004c03a 	cmpne	r2,r2,zero
 280acf8:	10000f1e 	bne	r2,zero,280ad38 <alt_avalon_dma_ioctl+0x10c>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
 280acfc:	e0bffb17 	ldw	r2,-20(fp)
 280ad00:	10800017 	ldw	r2,0(r2)
 280ad04:	10800104 	addi	r2,r2,4
 280ad08:	e0fffd17 	ldw	r3,-12(fp)
 280ad0c:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
 280ad10:	e0bffb17 	ldw	r2,-20(fp)
 280ad14:	10800517 	ldw	r2,20(r2)
 280ad18:	10c00814 	ori	r3,r2,32
 280ad1c:	e0bffb17 	ldw	r2,-20(fp)
 280ad20:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
 280ad24:	e0fffb17 	ldw	r3,-20(fp)
 280ad28:	0080a074 	movhi	r2,641
 280ad2c:	10aae104 	addi	r2,r2,-21628
 280ad30:	18800715 	stw	r2,28(r3)
 280ad34:	00005906 	br	280ae9c <alt_avalon_dma_ioctl+0x270>
    }
    else
    {
      status = -EIO;
 280ad38:	00bffec4 	movi	r2,-5
 280ad3c:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
 280ad40:	00005606 	br	280ae9c <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
 280ad44:	e0bffb17 	ldw	r2,-20(fp)
 280ad48:	10c00517 	ldw	r3,20(r2)
 280ad4c:	00bff7c4 	movi	r2,-33
 280ad50:	1886703a 	and	r3,r3,r2
 280ad54:	e0bffb17 	ldw	r2,-20(fp)
 280ad58:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
 280ad5c:	e0fffb17 	ldw	r3,-20(fp)
 280ad60:	0080a074 	movhi	r2,641
 280ad64:	10aa6f04 	addi	r2,r2,-22084
 280ad68:	18800715 	stw	r2,28(r3)
    break;
 280ad6c:	00004b06 	br	280ae9c <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
 280ad70:	e0bffb17 	ldw	r2,-20(fp)
 280ad74:	10800517 	ldw	r2,20(r2)
 280ad78:	1080080c 	andi	r2,r2,32
 280ad7c:	1004c03a 	cmpne	r2,r2,zero
 280ad80:	10000f1e 	bne	r2,zero,280adc0 <alt_avalon_dma_ioctl+0x194>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
 280ad84:	e0bffb17 	ldw	r2,-20(fp)
 280ad88:	10800017 	ldw	r2,0(r2)
 280ad8c:	10800204 	addi	r2,r2,8
 280ad90:	e0fffd17 	ldw	r3,-12(fp)
 280ad94:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
 280ad98:	e0bffb17 	ldw	r2,-20(fp)
 280ad9c:	10800517 	ldw	r2,20(r2)
 280ada0:	10c01014 	ori	r3,r2,64
 280ada4:	e0bffb17 	ldw	r2,-20(fp)
 280ada8:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
 280adac:	e0fffb17 	ldw	r3,-20(fp)
 280adb0:	0080a074 	movhi	r2,641
 280adb4:	10aab704 	addi	r2,r2,-21796
 280adb8:	18800715 	stw	r2,28(r3)
 280adbc:	00003706 	br	280ae9c <alt_avalon_dma_ioctl+0x270>
    }
    else
    {
      status = -EIO;
 280adc0:	00bffec4 	movi	r2,-5
 280adc4:	e0bffa15 	stw	r2,-24(fp)
    }
    break;
 280adc8:	00003406 	br	280ae9c <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
 280adcc:	e0bffb17 	ldw	r2,-20(fp)
 280add0:	10c00517 	ldw	r3,20(r2)
 280add4:	00bfefc4 	movi	r2,-65
 280add8:	1886703a 	and	r3,r3,r2
 280addc:	e0bffb17 	ldw	r2,-20(fp)
 280ade0:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
 280ade4:	e0fffb17 	ldw	r3,-20(fp)
 280ade8:	0080a074 	movhi	r2,641
 280adec:	10aa6f04 	addi	r2,r2,-22084
 280adf0:	18800715 	stw	r2,28(r3)
    break;
 280adf4:	00002906 	br	280ae9c <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 280adf8:	e0bffb17 	ldw	r2,-20(fp)
 280adfc:	10c00517 	ldw	r3,20(r2)
 280ae00:	00bffc04 	movi	r2,-16
 280ae04:	1886703a 	and	r3,r3,r2
 280ae08:	e0bffb17 	ldw	r2,-20(fp)
 280ae0c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
 280ae10:	00002206 	br	280ae9c <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 280ae14:	e0bffb17 	ldw	r2,-20(fp)
 280ae18:	10c00517 	ldw	r3,20(r2)
 280ae1c:	00bffc04 	movi	r2,-16
 280ae20:	1884703a 	and	r2,r3,r2
 280ae24:	10c00054 	ori	r3,r2,1
 280ae28:	e0bffb17 	ldw	r2,-20(fp)
 280ae2c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
 280ae30:	00001a06 	br	280ae9c <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 280ae34:	e0bffb17 	ldw	r2,-20(fp)
 280ae38:	10c00517 	ldw	r3,20(r2)
 280ae3c:	00bffc04 	movi	r2,-16
 280ae40:	1884703a 	and	r2,r3,r2
 280ae44:	10c000d4 	ori	r3,r2,3
 280ae48:	e0bffb17 	ldw	r2,-20(fp)
 280ae4c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
 280ae50:	00001206 	br	280ae9c <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 280ae54:	e0bffb17 	ldw	r2,-20(fp)
 280ae58:	10c00517 	ldw	r3,20(r2)
 280ae5c:	00bffc04 	movi	r2,-16
 280ae60:	1884703a 	and	r2,r3,r2
 280ae64:	10c001d4 	ori	r3,r2,7
 280ae68:	e0bffb17 	ldw	r2,-20(fp)
 280ae6c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
 280ae70:	00000a06 	br	280ae9c <alt_avalon_dma_ioctl+0x270>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
 280ae74:	e0bffb17 	ldw	r2,-20(fp)
 280ae78:	10c00517 	ldw	r3,20(r2)
 280ae7c:	00bffc04 	movi	r2,-16
 280ae80:	1884703a 	and	r2,r3,r2
 280ae84:	10c003d4 	ori	r3,r2,15
 280ae88:	e0bffb17 	ldw	r2,-20(fp)
 280ae8c:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
 280ae90:	00000206 	br	280ae9c <alt_avalon_dma_ioctl+0x270>
  default:
    status = -ENOTTY;
 280ae94:	00bff9c4 	movi	r2,-25
 280ae98:	e0bffa15 	stw	r2,-24(fp)
  }

  if (!status)
 280ae9c:	e0bffa17 	ldw	r2,-24(fp)
 280aea0:	1004c03a 	cmpne	r2,r2,zero
 280aea4:	1000431e 	bne	r2,zero,280afb4 <alt_avalon_dma_ioctl+0x388>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
 280aea8:	e0bffb17 	ldw	r2,-20(fp)
 280aeac:	10800517 	ldw	r2,20(r2)
 280aeb0:	108003cc 	andi	r2,r2,15
 280aeb4:	e0bffe15 	stw	r2,-8(fp)
 280aeb8:	e0fffe17 	ldw	r3,-8(fp)
 280aebc:	18800060 	cmpeqi	r2,r3,1
 280aec0:	10000d1e 	bne	r2,zero,280aef8 <alt_avalon_dma_ioctl+0x2cc>
 280aec4:	e0fffe17 	ldw	r3,-8(fp)
 280aec8:	18800070 	cmpltui	r2,r3,1
 280aecc:	1000071e 	bne	r2,zero,280aeec <alt_avalon_dma_ioctl+0x2c0>
 280aed0:	e0fffe17 	ldw	r3,-8(fp)
 280aed4:	188000e0 	cmpeqi	r2,r3,3
 280aed8:	10000a1e 	bne	r2,zero,280af04 <alt_avalon_dma_ioctl+0x2d8>
 280aedc:	e0fffe17 	ldw	r3,-8(fp)
 280aee0:	188001e0 	cmpeqi	r2,r3,7
 280aee4:	10000a1e 	bne	r2,zero,280af10 <alt_avalon_dma_ioctl+0x2e4>
 280aee8:	00000c06 	br	280af1c <alt_avalon_dma_ioctl+0x2f0>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
 280aeec:	00800044 	movi	r2,1
 280aef0:	e0bff915 	stw	r2,-28(fp)
       break;
 280aef4:	00000b06 	br	280af24 <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
 280aef8:	00800084 	movi	r2,2
 280aefc:	e0bff915 	stw	r2,-28(fp)
       break;
 280af00:	00000806 	br	280af24 <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
 280af04:	00800104 	movi	r2,4
 280af08:	e0bff915 	stw	r2,-28(fp)
       break;
 280af0c:	00000506 	br	280af24 <alt_avalon_dma_ioctl+0x2f8>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
 280af10:	00810004 	movi	r2,1024
 280af14:	e0bff915 	stw	r2,-28(fp)
       break;
 280af18:	00000206 	br	280af24 <alt_avalon_dma_ioctl+0x2f8>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
 280af1c:	00820004 	movi	r2,2048
 280af20:	e0bff915 	stw	r2,-28(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
 280af24:	e0bffb17 	ldw	r2,-20(fp)
 280af28:	10800517 	ldw	r2,20(r2)
 280af2c:	1080080c 	andi	r2,r2,32
 280af30:	1005003a 	cmpeq	r2,r2,zero
 280af34:	1000091e 	bne	r2,zero,280af5c <alt_avalon_dma_ioctl+0x330>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
 280af38:	e0bffb17 	ldw	r2,-20(fp)
 280af3c:	10800017 	ldw	r2,0(r2)
 280af40:	11000604 	addi	r4,r2,24
 280af44:	e0bff917 	ldw	r2,-28(fp)
 280af48:	10807e14 	ori	r2,r2,504
 280af4c:	1007883a 	mov	r3,r2
 280af50:	2005883a 	mov	r2,r4
 280af54:	10c00035 	stwio	r3,0(r2)
 280af58:	00001606 	br	280afb4 <alt_avalon_dma_ioctl+0x388>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
 280af5c:	e0bffb17 	ldw	r2,-20(fp)
 280af60:	10800517 	ldw	r2,20(r2)
 280af64:	1080100c 	andi	r2,r2,64
 280af68:	1005003a 	cmpeq	r2,r2,zero
 280af6c:	1000091e 	bne	r2,zero,280af94 <alt_avalon_dma_ioctl+0x368>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
 280af70:	e0bffb17 	ldw	r2,-20(fp)
 280af74:	10800017 	ldw	r2,0(r2)
 280af78:	11000604 	addi	r4,r2,24
 280af7c:	e0bff917 	ldw	r2,-28(fp)
 280af80:	1080be14 	ori	r2,r2,760
 280af84:	1007883a 	mov	r3,r2
 280af88:	2005883a 	mov	r2,r4
 280af8c:	10c00035 	stwio	r3,0(r2)
 280af90:	00000806 	br	280afb4 <alt_avalon_dma_ioctl+0x388>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
 280af94:	e0bffb17 	ldw	r2,-20(fp)
 280af98:	10800017 	ldw	r2,0(r2)
 280af9c:	11000604 	addi	r4,r2,24
 280afa0:	e0bff917 	ldw	r2,-28(fp)
 280afa4:	10803e14 	ori	r2,r2,248
 280afa8:	1007883a 	mov	r3,r2
 280afac:	2005883a 	mov	r2,r4
 280afb0:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
 280afb4:	e0bffa17 	ldw	r2,-24(fp)
 280afb8:	e0bfff15 	stw	r2,-4(fp)
 280afbc:	e0bfff17 	ldw	r2,-4(fp)
}
 280afc0:	e037883a 	mov	sp,fp
 280afc4:	df000017 	ldw	fp,0(sp)
 280afc8:	dec00104 	addi	sp,sp,4
 280afcc:	f800283a 	ret

0280afd0 <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
 280afd0:	defffb04 	addi	sp,sp,-20
 280afd4:	dfc00415 	stw	ra,16(sp)
 280afd8:	df000315 	stw	fp,12(sp)
 280afdc:	df000304 	addi	fp,sp,12
 280afe0:	e13ffd15 	stw	r4,-12(fp)
 280afe4:	e17ffe15 	stw	r5,-8(fp)
 280afe8:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
 280afec:	e0bffd17 	ldw	r2,-12(fp)
 280aff0:	11000617 	ldw	r4,24(r2)
 280aff4:	e17ffe17 	ldw	r5,-8(fp)
 280aff8:	e1bfff17 	ldw	r6,-4(fp)
 280affc:	280ac2c0 	call	280ac2c <alt_avalon_dma_ioctl>
             req,
             arg);
}
 280b000:	e037883a 	mov	sp,fp
 280b004:	dfc00117 	ldw	ra,4(sp)
 280b008:	df000017 	ldw	fp,0(sp)
 280b00c:	dec00204 	addi	sp,sp,8
 280b010:	f800283a 	ret

0280b014 <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
 280b014:	defffb04 	addi	sp,sp,-20
 280b018:	dfc00415 	stw	ra,16(sp)
 280b01c:	df000315 	stw	fp,12(sp)
 280b020:	df000304 	addi	fp,sp,12
 280b024:	e13ffd15 	stw	r4,-12(fp)
 280b028:	e17ffe15 	stw	r5,-8(fp)
 280b02c:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
 280b030:	e0bffd17 	ldw	r2,-12(fp)
 280b034:	11000617 	ldw	r4,24(r2)
 280b038:	e17ffe17 	ldw	r5,-8(fp)
 280b03c:	e1bfff17 	ldw	r6,-4(fp)
 280b040:	280ac2c0 	call	280ac2c <alt_avalon_dma_ioctl>
             req,
             arg);
}
 280b044:	e037883a 	mov	sp,fp
 280b048:	dfc00117 	ldw	ra,4(sp)
 280b04c:	df000017 	ldw	fp,0(sp)
 280b050:	dec00204 	addi	sp,sp,8
 280b054:	f800283a 	ret

0280b058 <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
 280b058:	defff304 	addi	sp,sp,-52
 280b05c:	dfc00c15 	stw	ra,48(sp)
 280b060:	df000b15 	stw	fp,44(sp)
 280b064:	df000b04 	addi	fp,sp,44
 280b068:	e13ffb15 	stw	r4,-20(fp)
 280b06c:	e17ffc15 	stw	r5,-16(fp)
 280b070:	e1bffd15 	stw	r6,-12(fp)
 280b074:	e1fffe15 	stw	r7,-8(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
 280b078:	e0bffb17 	ldw	r2,-20(fp)
 280b07c:	10800617 	ldw	r2,24(r2)
 280b080:	e0bff515 	stw	r2,-44(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
 280b084:	e0bff517 	ldw	r2,-44(fp)
 280b088:	10800517 	ldw	r2,20(r2)
 280b08c:	108003cc 	andi	r2,r2,15
 280b090:	e0bff615 	stw	r2,-40(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
 280b094:	e0bffc17 	ldw	r2,-16(fp)
 280b098:	1007883a 	mov	r3,r2
 280b09c:	e0bff617 	ldw	r2,-40(fp)
 280b0a0:	1884703a 	and	r2,r3,r2
 280b0a4:	1004c03a 	cmpne	r2,r2,zero
 280b0a8:	1000091e 	bne	r2,zero,280b0d0 <alt_avalon_dma_prepare+0x78>
 280b0ac:	e0fffd17 	ldw	r3,-12(fp)
 280b0b0:	e0bff617 	ldw	r2,-40(fp)
 280b0b4:	1884703a 	and	r2,r3,r2
 280b0b8:	1004c03a 	cmpne	r2,r2,zero
 280b0bc:	1000041e 	bne	r2,zero,280b0d0 <alt_avalon_dma_prepare+0x78>
 280b0c0:	e0bff517 	ldw	r2,-44(fp)
 280b0c4:	10c00617 	ldw	r3,24(r2)
 280b0c8:	e0bffd17 	ldw	r2,-12(fp)
 280b0cc:	1880032e 	bgeu	r3,r2,280b0dc <alt_avalon_dma_prepare+0x84>
     (len > priv->max_length))
  {
    return -EINVAL;
 280b0d0:	00bffa84 	movi	r2,-22
 280b0d4:	e0bfff15 	stw	r2,-4(fp)
 280b0d8:	00002e06 	br	280b194 <alt_avalon_dma_prepare+0x13c>
  }

  start = priv->rx_start;
 280b0dc:	e0bff517 	ldw	r2,-44(fp)
 280b0e0:	10800317 	ldw	r2,12(r2)
 280b0e4:	e0bff915 	stw	r2,-28(fp)
  end   = priv->rx_end;
 280b0e8:	e0bff517 	ldw	r2,-44(fp)
 280b0ec:	10800417 	ldw	r2,16(r2)
 280b0f0:	e0bff815 	stw	r2,-32(fp)
  slot  = &priv->rx_buf[end];
 280b0f4:	e0bff517 	ldw	r2,-44(fp)
 280b0f8:	10c01904 	addi	r3,r2,100
 280b0fc:	e0bff817 	ldw	r2,-32(fp)
 280b100:	1004913a 	slli	r2,r2,4
 280b104:	1885883a 	add	r2,r3,r2
 280b108:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 280b10c:	e0bff817 	ldw	r2,-32(fp)
 280b110:	10800044 	addi	r2,r2,1
 280b114:	108000cc 	andi	r2,r2,3
 280b118:	e0bff715 	stw	r2,-36(fp)

  if (next == start)
 280b11c:	e0fff717 	ldw	r3,-36(fp)
 280b120:	e0bff917 	ldw	r2,-28(fp)
 280b124:	1880031e 	bne	r3,r2,280b134 <alt_avalon_dma_prepare+0xdc>
  {
    return -ENOSPC;
 280b128:	00bff904 	movi	r2,-28
 280b12c:	e0bfff15 	stw	r2,-4(fp)
 280b130:	00001806 	br	280b194 <alt_avalon_dma_prepare+0x13c>
  }

  slot->data   = data;
 280b134:	e0fffa17 	ldw	r3,-24(fp)
 280b138:	e0bffc17 	ldw	r2,-16(fp)
 280b13c:	18800015 	stw	r2,0(r3)
  slot->len    = len;
 280b140:	e0fffa17 	ldw	r3,-24(fp)
 280b144:	e0bffd17 	ldw	r2,-12(fp)
 280b148:	18800115 	stw	r2,4(r3)
  slot->done   = done;
 280b14c:	e0fffa17 	ldw	r3,-24(fp)
 280b150:	e0bffe17 	ldw	r2,-8(fp)
 280b154:	18800215 	stw	r2,8(r3)
  slot->handle = handle;
 280b158:	e0fffa17 	ldw	r3,-24(fp)
 280b15c:	e0800217 	ldw	r2,8(fp)
 280b160:	18800315 	stw	r2,12(r3)

  priv->rx_end = next;
 280b164:	e0fff517 	ldw	r3,-44(fp)
 280b168:	e0bff717 	ldw	r2,-36(fp)
 280b16c:	18800415 	stw	r2,16(r3)

  if (!priv->active)
 280b170:	e0bff517 	ldw	r2,-44(fp)
 280b174:	10800817 	ldw	r2,32(r2)
 280b178:	1004c03a 	cmpne	r2,r2,zero
 280b17c:	1000041e 	bne	r2,zero,280b190 <alt_avalon_dma_prepare+0x138>
  {
    priv->launch (priv);
 280b180:	e0bff517 	ldw	r2,-44(fp)
 280b184:	10800717 	ldw	r2,28(r2)
 280b188:	e13ff517 	ldw	r4,-44(fp)
 280b18c:	103ee83a 	callr	r2
  }

  return 0;
 280b190:	e03fff15 	stw	zero,-4(fp)
 280b194:	e0bfff17 	ldw	r2,-4(fp)
}
 280b198:	e037883a 	mov	sp,fp
 280b19c:	dfc00117 	ldw	ra,4(sp)
 280b1a0:	df000017 	ldw	fp,0(sp)
 280b1a4:	dec00204 	addi	sp,sp,8
 280b1a8:	f800283a 	ret

0280b1ac <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
 280b1ac:	defffa04 	addi	sp,sp,-24
 280b1b0:	df000515 	stw	fp,20(sp)
 280b1b4:	df000504 	addi	fp,sp,20
 280b1b8:	e13ffe15 	stw	r4,-8(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
 280b1bc:	e0bffe17 	ldw	r2,-8(fp)
 280b1c0:	10800617 	ldw	r2,24(r2)
 280b1c4:	e0bffd15 	stw	r2,-12(fp)

  start = priv->tx_start;
 280b1c8:	e0bffd17 	ldw	r2,-12(fp)
 280b1cc:	10800117 	ldw	r2,4(r2)
 280b1d0:	e0bffc15 	stw	r2,-16(fp)
  end   = priv->tx_end;
 280b1d4:	e0bffd17 	ldw	r2,-12(fp)
 280b1d8:	10800217 	ldw	r2,8(r2)
 280b1dc:	e0bffb15 	stw	r2,-20(fp)

  return (start > end) ? start - end - 1 :
 280b1e0:	e0fffc17 	ldw	r3,-16(fp)
 280b1e4:	e0bffb17 	ldw	r2,-20(fp)
 280b1e8:	10c0062e 	bgeu	r2,r3,280b204 <alt_avalon_dma_space+0x58>
 280b1ec:	e0fffc17 	ldw	r3,-16(fp)
 280b1f0:	e0bffb17 	ldw	r2,-20(fp)
 280b1f4:	1885c83a 	sub	r2,r3,r2
 280b1f8:	10bfffc4 	addi	r2,r2,-1
 280b1fc:	e0bfff15 	stw	r2,-4(fp)
 280b200:	00000506 	br	280b218 <alt_avalon_dma_space+0x6c>
 280b204:	e0fffc17 	ldw	r3,-16(fp)
 280b208:	e0bffb17 	ldw	r2,-20(fp)
 280b20c:	1885c83a 	sub	r2,r3,r2
 280b210:	108000c4 	addi	r2,r2,3
 280b214:	e0bfff15 	stw	r2,-4(fp)
 280b218:	e0bfff17 	ldw	r2,-4(fp)
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
}
 280b21c:	e037883a 	mov	sp,fp
 280b220:	df000017 	ldw	fp,0(sp)
 280b224:	dec00104 	addi	sp,sp,4
 280b228:	f800283a 	ret

0280b22c <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
 280b22c:	defff304 	addi	sp,sp,-52
 280b230:	dfc00c15 	stw	ra,48(sp)
 280b234:	df000b15 	stw	fp,44(sp)
 280b238:	df000b04 	addi	fp,sp,44
 280b23c:	e13ffb15 	stw	r4,-20(fp)
 280b240:	e17ffc15 	stw	r5,-16(fp)
 280b244:	e1bffd15 	stw	r6,-12(fp)
 280b248:	e1fffe15 	stw	r7,-8(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
 280b24c:	e0bffb17 	ldw	r2,-20(fp)
 280b250:	10800617 	ldw	r2,24(r2)
 280b254:	e0bff515 	stw	r2,-44(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
 280b258:	e0bff517 	ldw	r2,-44(fp)
 280b25c:	10800517 	ldw	r2,20(r2)
 280b260:	108003cc 	andi	r2,r2,15
 280b264:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
 280b268:	e0bffc17 	ldw	r2,-16(fp)
 280b26c:	1007883a 	mov	r3,r2
 280b270:	e0bff717 	ldw	r2,-36(fp)
 280b274:	1884703a 	and	r2,r3,r2
 280b278:	1004c03a 	cmpne	r2,r2,zero
 280b27c:	1000091e 	bne	r2,zero,280b2a4 <alt_avalon_dma_send+0x78>
 280b280:	e0fffd17 	ldw	r3,-12(fp)
 280b284:	e0bff717 	ldw	r2,-36(fp)
 280b288:	1884703a 	and	r2,r3,r2
 280b28c:	1004c03a 	cmpne	r2,r2,zero
 280b290:	1000041e 	bne	r2,zero,280b2a4 <alt_avalon_dma_send+0x78>
 280b294:	e0bff517 	ldw	r2,-44(fp)
 280b298:	10c00617 	ldw	r3,24(r2)
 280b29c:	e0bffd17 	ldw	r2,-12(fp)
 280b2a0:	1880032e 	bgeu	r3,r2,280b2b0 <alt_avalon_dma_send+0x84>
        (len & align_mask)            ||
        (len > priv->max_length))
  {
    return -EINVAL;
 280b2a4:	00bffa84 	movi	r2,-22
 280b2a8:	e0bfff15 	stw	r2,-4(fp)
 280b2ac:	00002e06 	br	280b368 <alt_avalon_dma_send+0x13c>
  }

  start = priv->tx_start;
 280b2b0:	e0bff517 	ldw	r2,-44(fp)
 280b2b4:	10800117 	ldw	r2,4(r2)
 280b2b8:	e0bff915 	stw	r2,-28(fp)
  end   = priv->tx_end;
 280b2bc:	e0bff517 	ldw	r2,-44(fp)
 280b2c0:	10800217 	ldw	r2,8(r2)
 280b2c4:	e0bff815 	stw	r2,-32(fp)
  slot  = &priv->tx_buf[end];
 280b2c8:	e0bff517 	ldw	r2,-44(fp)
 280b2cc:	10c00904 	addi	r3,r2,36
 280b2d0:	e0bff817 	ldw	r2,-32(fp)
 280b2d4:	1004913a 	slli	r2,r2,4
 280b2d8:	1885883a 	add	r2,r3,r2
 280b2dc:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 280b2e0:	e0bff817 	ldw	r2,-32(fp)
 280b2e4:	10800044 	addi	r2,r2,1
 280b2e8:	108000cc 	andi	r2,r2,3
 280b2ec:	e0bff615 	stw	r2,-40(fp)

  if (next == start)
 280b2f0:	e0fff617 	ldw	r3,-40(fp)
 280b2f4:	e0bff917 	ldw	r2,-28(fp)
 280b2f8:	1880031e 	bne	r3,r2,280b308 <alt_avalon_dma_send+0xdc>
  {
    return -ENOSPC;
 280b2fc:	00bff904 	movi	r2,-28
 280b300:	e0bfff15 	stw	r2,-4(fp)
 280b304:	00001806 	br	280b368 <alt_avalon_dma_send+0x13c>
  }

  /* Fill in the descriptor */

  slot->from   = from;
 280b308:	e0fffa17 	ldw	r3,-24(fp)
 280b30c:	e0bffc17 	ldw	r2,-16(fp)
 280b310:	18800015 	stw	r2,0(r3)
  slot->len    = len;
 280b314:	e0fffa17 	ldw	r3,-24(fp)
 280b318:	e0bffd17 	ldw	r2,-12(fp)
 280b31c:	18800115 	stw	r2,4(r3)
  slot->done   = done;
 280b320:	e0fffa17 	ldw	r3,-24(fp)
 280b324:	e0bffe17 	ldw	r2,-8(fp)
 280b328:	18800215 	stw	r2,8(r3)
  slot->handle = handle;
 280b32c:	e0fffa17 	ldw	r3,-24(fp)
 280b330:	e0800217 	ldw	r2,8(fp)
 280b334:	18800315 	stw	r2,12(r3)

  priv->tx_end = next;
 280b338:	e0fff517 	ldw	r3,-44(fp)
 280b33c:	e0bff617 	ldw	r2,-40(fp)
 280b340:	18800215 	stw	r2,8(r3)

  if (!priv->active)
 280b344:	e0bff517 	ldw	r2,-44(fp)
 280b348:	10800817 	ldw	r2,32(r2)
 280b34c:	1004c03a 	cmpne	r2,r2,zero
 280b350:	1000041e 	bne	r2,zero,280b364 <alt_avalon_dma_send+0x138>
  {
    priv->launch (priv);
 280b354:	e0bff517 	ldw	r2,-44(fp)
 280b358:	10800717 	ldw	r2,28(r2)
 280b35c:	e13ff517 	ldw	r4,-44(fp)
 280b360:	103ee83a 	callr	r2
  }

  return 0;
 280b364:	e03fff15 	stw	zero,-4(fp)
 280b368:	e0bfff17 	ldw	r2,-4(fp)
}
 280b36c:	e037883a 	mov	sp,fp
 280b370:	dfc00117 	ldw	ra,4(sp)
 280b374:	df000017 	ldw	fp,0(sp)
 280b378:	dec00204 	addi	sp,sp,8
 280b37c:	f800283a 	ret

0280b380 <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
 280b380:	defff104 	addi	sp,sp,-60
 280b384:	dfc00e15 	stw	ra,56(sp)
 280b388:	df000d15 	stw	fp,52(sp)
 280b38c:	df000d04 	addi	fp,sp,52
 280b390:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
 280b394:	e0bfff17 	ldw	r2,-4(fp)
 280b398:	e0bffe15 	stw	r2,-8(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
 280b39c:	e0bffe17 	ldw	r2,-8(fp)
 280b3a0:	10800517 	ldw	r2,20(r2)
 280b3a4:	1080080c 	andi	r2,r2,32
 280b3a8:	e0bff915 	stw	r2,-28(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
 280b3ac:	e0bffe17 	ldw	r2,-8(fp)
 280b3b0:	10800517 	ldw	r2,20(r2)
 280b3b4:	1080100c 	andi	r2,r2,64
 280b3b8:	e0bff815 	stw	r2,-32(fp)

  tx_start = priv->tx_start;
 280b3bc:	e0bffe17 	ldw	r2,-8(fp)
 280b3c0:	10800117 	ldw	r2,4(r2)
 280b3c4:	e0bffb15 	stw	r2,-20(fp)
  rx_start = priv->rx_start;
 280b3c8:	e0bffe17 	ldw	r2,-8(fp)
 280b3cc:	10800317 	ldw	r2,12(r2)
 280b3d0:	e0bffa15 	stw	r2,-24(fp)

  tx_slot = &priv->tx_buf[tx_start];
 280b3d4:	e0bffe17 	ldw	r2,-8(fp)
 280b3d8:	10c00904 	addi	r3,r2,36
 280b3dc:	e0bffb17 	ldw	r2,-20(fp)
 280b3e0:	1004913a 	slli	r2,r2,4
 280b3e4:	1885883a 	add	r2,r3,r2
 280b3e8:	e0bffd15 	stw	r2,-12(fp)
  rx_slot = &priv->rx_buf[rx_start];
 280b3ec:	e0bffe17 	ldw	r2,-8(fp)
 280b3f0:	10c01904 	addi	r3,r2,100
 280b3f4:	e0bffa17 	ldw	r2,-24(fp)
 280b3f8:	1004913a 	slli	r2,r2,4
 280b3fc:	1885883a 	add	r2,r3,r2
 280b400:	e0bffc15 	stw	r2,-16(fp)

  /* Increment the descriptors */

  if (!stream_tx)
 280b404:	e0bff917 	ldw	r2,-28(fp)
 280b408:	1004c03a 	cmpne	r2,r2,zero
 280b40c:	1000051e 	bne	r2,zero,280b424 <alt_avalon_dma_irq+0xa4>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 280b410:	e0bffb17 	ldw	r2,-20(fp)
 280b414:	10800044 	addi	r2,r2,1
 280b418:	10c000cc 	andi	r3,r2,3
 280b41c:	e0bffe17 	ldw	r2,-8(fp)
 280b420:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
 280b424:	e0bff817 	ldw	r2,-32(fp)
 280b428:	1004c03a 	cmpne	r2,r2,zero
 280b42c:	1000051e 	bne	r2,zero,280b444 <alt_avalon_dma_irq+0xc4>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
 280b430:	e0bffa17 	ldw	r2,-24(fp)
 280b434:	10800044 	addi	r2,r2,1
 280b438:	10c000cc 	andi	r3,r2,3
 280b43c:	e0bffe17 	ldw	r2,-8(fp)
 280b440:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
 280b444:	e0bffe17 	ldw	r2,-8(fp)
 280b448:	10800017 	ldw	r2,0(r2)
 280b44c:	10000035 	stwio	zero,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
 280b450:	e0bffe17 	ldw	r2,-8(fp)
 280b454:	10800017 	ldw	r2,0(r2)
 280b458:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
 280b45c:	e0bffe17 	ldw	r2,-8(fp)
 280b460:	10800717 	ldw	r2,28(r2)
 280b464:	e13ffe17 	ldw	r4,-8(fp)
 280b468:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
 280b46c:	e0bff917 	ldw	r2,-28(fp)
 280b470:	1004c03a 	cmpne	r2,r2,zero
 280b474:	1000151e 	bne	r2,zero,280b4cc <alt_avalon_dma_irq+0x14c>
 280b478:	e0bffd17 	ldw	r2,-12(fp)
 280b47c:	10800217 	ldw	r2,8(r2)
 280b480:	1005003a 	cmpeq	r2,r2,zero
 280b484:	1000111e 	bne	r2,zero,280b4cc <alt_avalon_dma_irq+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 280b488:	0005303a 	rdctl	r2,status
 280b48c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 280b490:	e0fff617 	ldw	r3,-40(fp)
 280b494:	00bfff84 	movi	r2,-2
 280b498:	1884703a 	and	r2,r3,r2
 280b49c:	1001703a 	wrctl	status,r2
  
  return context;
 280b4a0:	e0bff617 	ldw	r2,-40(fp)
  {
    cpu_sr = alt_irq_disable_all();
 280b4a4:	e0bff715 	stw	r2,-36(fp)
    tx_slot->done (tx_slot->handle);
 280b4a8:	e0bffd17 	ldw	r2,-12(fp)
 280b4ac:	10c00217 	ldw	r3,8(r2)
 280b4b0:	e0bffd17 	ldw	r2,-12(fp)
 280b4b4:	11000317 	ldw	r4,12(r2)
 280b4b8:	183ee83a 	callr	r3
 280b4bc:	e0bff717 	ldw	r2,-36(fp)
 280b4c0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 280b4c4:	e0bff517 	ldw	r2,-44(fp)
 280b4c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
 280b4cc:	e0bff817 	ldw	r2,-32(fp)
 280b4d0:	1004c03a 	cmpne	r2,r2,zero
 280b4d4:	1000171e 	bne	r2,zero,280b534 <alt_avalon_dma_irq+0x1b4>
 280b4d8:	e0bffc17 	ldw	r2,-16(fp)
 280b4dc:	10800217 	ldw	r2,8(r2)
 280b4e0:	1005003a 	cmpeq	r2,r2,zero
 280b4e4:	1000131e 	bne	r2,zero,280b534 <alt_avalon_dma_irq+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 280b4e8:	0005303a 	rdctl	r2,status
 280b4ec:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 280b4f0:	e0fff417 	ldw	r3,-48(fp)
 280b4f4:	00bfff84 	movi	r2,-2
 280b4f8:	1884703a 	and	r2,r3,r2
 280b4fc:	1001703a 	wrctl	status,r2
  
  return context;
 280b500:	e0bff417 	ldw	r2,-48(fp)
  {
    cpu_sr = alt_irq_disable_all();
 280b504:	e0bff715 	stw	r2,-36(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
 280b508:	e0bffc17 	ldw	r2,-16(fp)
 280b50c:	10c00217 	ldw	r3,8(r2)
 280b510:	e0bffc17 	ldw	r2,-16(fp)
 280b514:	11000317 	ldw	r4,12(r2)
 280b518:	e0bffc17 	ldw	r2,-16(fp)
 280b51c:	11400017 	ldw	r5,0(r2)
 280b520:	183ee83a 	callr	r3
 280b524:	e0bff717 	ldw	r2,-36(fp)
 280b528:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 280b52c:	e0bff317 	ldw	r2,-52(fp)
 280b530:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
 280b534:	e037883a 	mov	sp,fp
 280b538:	dfc00117 	ldw	ra,4(sp)
 280b53c:	df000017 	ldw	fp,0(sp)
 280b540:	dec00204 	addi	sp,sp,8
 280b544:	f800283a 	ret

0280b548 <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
 280b548:	defff904 	addi	sp,sp,-28
 280b54c:	dfc00615 	stw	ra,24(sp)
 280b550:	df000515 	stw	fp,20(sp)
 280b554:	df000504 	addi	fp,sp,20
 280b558:	e13ffc15 	stw	r4,-16(fp)
 280b55c:	e17ffd15 	stw	r5,-12(fp)
 280b560:	e1bffe15 	stw	r6,-8(fp)
 280b564:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
 280b568:	e0bffe17 	ldw	r2,-8(fp)
 280b56c:	10800604 	addi	r2,r2,24
 280b570:	1007883a 	mov	r3,r2
 280b574:	00840004 	movi	r2,4096
 280b578:	18800035 	stwio	r2,0(r3)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
 280b57c:	e0bffe17 	ldw	r2,-8(fp)
 280b580:	10800604 	addi	r2,r2,24
 280b584:	1007883a 	mov	r3,r2
 280b588:	00840004 	movi	r2,4096
 280b58c:	18800035 	stwio	r2,0(r3)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
 280b590:	e0bffe17 	ldw	r2,-8(fp)
 280b594:	10800604 	addi	r2,r2,24
 280b598:	1007883a 	mov	r3,r2
 280b59c:	00803f04 	movi	r2,252
 280b5a0:	18800035 	stwio	r2,0(r3)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
 280b5a4:	e0bffe17 	ldw	r2,-8(fp)
 280b5a8:	10000035 	stwio	zero,0(r2)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
 280b5ac:	e0bffc17 	ldw	r2,-16(fp)
 280b5b0:	11c00617 	ldw	r7,24(r2)
 280b5b4:	d8000015 	stw	zero,0(sp)
 280b5b8:	e13fff17 	ldw	r4,-4(fp)
 280b5bc:	e1400217 	ldw	r5,8(fp)
 280b5c0:	0180a074 	movhi	r6,641
 280b5c4:	31ace004 	addi	r6,r6,-19584
 280b5c8:	280c7dc0 	call	280c7dc <alt_ic_isr_register>
 280b5cc:	1004803a 	cmplt	r2,r2,zero
 280b5d0:	1000041e 	bne	r2,zero,280b5e4 <alt_avalon_dma_init+0x9c>
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
 280b5d4:	e13ffc17 	ldw	r4,-16(fp)
 280b5d8:	280b5f80 	call	280b5f8 <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
 280b5dc:	e13ffd17 	ldw	r4,-12(fp)
 280b5e0:	280b6300 	call	280b630 <alt_dma_rxchan_reg>
  }
}
 280b5e4:	e037883a 	mov	sp,fp
 280b5e8:	dfc00117 	ldw	ra,4(sp)
 280b5ec:	df000017 	ldw	fp,0(sp)
 280b5f0:	dec00204 	addi	sp,sp,8
 280b5f4:	f800283a 	ret

0280b5f8 <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
 280b5f8:	defffd04 	addi	sp,sp,-12
 280b5fc:	dfc00215 	stw	ra,8(sp)
 280b600:	df000115 	stw	fp,4(sp)
 280b604:	df000104 	addi	fp,sp,4
 280b608:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
 280b60c:	e13fff17 	ldw	r4,-4(fp)
 280b610:	0140a074 	movhi	r5,641
 280b614:	297d4904 	addi	r5,r5,-2780
 280b618:	280c3e00 	call	280c3e0 <alt_dev_llist_insert>
}
 280b61c:	e037883a 	mov	sp,fp
 280b620:	dfc00117 	ldw	ra,4(sp)
 280b624:	df000017 	ldw	fp,0(sp)
 280b628:	dec00204 	addi	sp,sp,8
 280b62c:	f800283a 	ret

0280b630 <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
 280b630:	defffd04 	addi	sp,sp,-12
 280b634:	dfc00215 	stw	ra,8(sp)
 280b638:	df000115 	stw	fp,4(sp)
 280b63c:	df000104 	addi	fp,sp,4
 280b640:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
 280b644:	e13fff17 	ldw	r4,-4(fp)
 280b648:	0140a074 	movhi	r5,641
 280b64c:	297d4704 	addi	r5,r5,-2788
 280b650:	280c3e00 	call	280c3e0 <alt_dev_llist_insert>
}
 280b654:	e037883a 	mov	sp,fp
 280b658:	dfc00117 	ldw	ra,4(sp)
 280b65c:	df000017 	ldw	fp,0(sp)
 280b660:	dec00204 	addi	sp,sp,8
 280b664:	f800283a 	ret

0280b668 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 280b668:	defffa04 	addi	sp,sp,-24
 280b66c:	dfc00515 	stw	ra,20(sp)
 280b670:	df000415 	stw	fp,16(sp)
 280b674:	df000404 	addi	fp,sp,16
 280b678:	e13ffd15 	stw	r4,-12(fp)
 280b67c:	e17ffe15 	stw	r5,-8(fp)
 280b680:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 280b684:	e0bffd17 	ldw	r2,-12(fp)
 280b688:	10800017 	ldw	r2,0(r2)
 280b68c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 280b690:	e0bffc17 	ldw	r2,-16(fp)
 280b694:	11000a04 	addi	r4,r2,40
 280b698:	e0bffd17 	ldw	r2,-12(fp)
 280b69c:	11c00217 	ldw	r7,8(r2)
 280b6a0:	e17ffe17 	ldw	r5,-8(fp)
 280b6a4:	e1bfff17 	ldw	r6,-4(fp)
 280b6a8:	280bcb00 	call	280bcb0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 280b6ac:	e037883a 	mov	sp,fp
 280b6b0:	dfc00117 	ldw	ra,4(sp)
 280b6b4:	df000017 	ldw	fp,0(sp)
 280b6b8:	dec00204 	addi	sp,sp,8
 280b6bc:	f800283a 	ret

0280b6c0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 280b6c0:	defffa04 	addi	sp,sp,-24
 280b6c4:	dfc00515 	stw	ra,20(sp)
 280b6c8:	df000415 	stw	fp,16(sp)
 280b6cc:	df000404 	addi	fp,sp,16
 280b6d0:	e13ffd15 	stw	r4,-12(fp)
 280b6d4:	e17ffe15 	stw	r5,-8(fp)
 280b6d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 280b6dc:	e0bffd17 	ldw	r2,-12(fp)
 280b6e0:	10800017 	ldw	r2,0(r2)
 280b6e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 280b6e8:	e0bffc17 	ldw	r2,-16(fp)
 280b6ec:	11000a04 	addi	r4,r2,40
 280b6f0:	e0bffd17 	ldw	r2,-12(fp)
 280b6f4:	11c00217 	ldw	r7,8(r2)
 280b6f8:	e17ffe17 	ldw	r5,-8(fp)
 280b6fc:	e1bfff17 	ldw	r6,-4(fp)
 280b700:	280bed40 	call	280bed4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 280b704:	e037883a 	mov	sp,fp
 280b708:	dfc00117 	ldw	ra,4(sp)
 280b70c:	df000017 	ldw	fp,0(sp)
 280b710:	dec00204 	addi	sp,sp,8
 280b714:	f800283a 	ret

0280b718 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 280b718:	defffc04 	addi	sp,sp,-16
 280b71c:	dfc00315 	stw	ra,12(sp)
 280b720:	df000215 	stw	fp,8(sp)
 280b724:	df000204 	addi	fp,sp,8
 280b728:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 280b72c:	e0bfff17 	ldw	r2,-4(fp)
 280b730:	10800017 	ldw	r2,0(r2)
 280b734:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 280b738:	e0bffe17 	ldw	r2,-8(fp)
 280b73c:	11000a04 	addi	r4,r2,40
 280b740:	e0bfff17 	ldw	r2,-4(fp)
 280b744:	11400217 	ldw	r5,8(r2)
 280b748:	280bb480 	call	280bb48 <altera_avalon_jtag_uart_close>
}
 280b74c:	e037883a 	mov	sp,fp
 280b750:	dfc00117 	ldw	ra,4(sp)
 280b754:	df000017 	ldw	fp,0(sp)
 280b758:	dec00204 	addi	sp,sp,8
 280b75c:	f800283a 	ret

0280b760 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 280b760:	defffa04 	addi	sp,sp,-24
 280b764:	dfc00515 	stw	ra,20(sp)
 280b768:	df000415 	stw	fp,16(sp)
 280b76c:	df000404 	addi	fp,sp,16
 280b770:	e13ffd15 	stw	r4,-12(fp)
 280b774:	e17ffe15 	stw	r5,-8(fp)
 280b778:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 280b77c:	e0bffd17 	ldw	r2,-12(fp)
 280b780:	10800017 	ldw	r2,0(r2)
 280b784:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 280b788:	e0bffc17 	ldw	r2,-16(fp)
 280b78c:	11000a04 	addi	r4,r2,40
 280b790:	e17ffe17 	ldw	r5,-8(fp)
 280b794:	e1bfff17 	ldw	r6,-4(fp)
 280b798:	280bbbc0 	call	280bbbc <altera_avalon_jtag_uart_ioctl>
}
 280b79c:	e037883a 	mov	sp,fp
 280b7a0:	dfc00117 	ldw	ra,4(sp)
 280b7a4:	df000017 	ldw	fp,0(sp)
 280b7a8:	dec00204 	addi	sp,sp,8
 280b7ac:	f800283a 	ret

0280b7b0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 280b7b0:	defffa04 	addi	sp,sp,-24
 280b7b4:	dfc00515 	stw	ra,20(sp)
 280b7b8:	df000415 	stw	fp,16(sp)
 280b7bc:	df000404 	addi	fp,sp,16
 280b7c0:	e13ffd15 	stw	r4,-12(fp)
 280b7c4:	e17ffe15 	stw	r5,-8(fp)
 280b7c8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 280b7cc:	e0fffd17 	ldw	r3,-12(fp)
 280b7d0:	00800044 	movi	r2,1
 280b7d4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 280b7d8:	e0bffd17 	ldw	r2,-12(fp)
 280b7dc:	10800017 	ldw	r2,0(r2)
 280b7e0:	11000104 	addi	r4,r2,4
 280b7e4:	e0bffd17 	ldw	r2,-12(fp)
 280b7e8:	10800817 	ldw	r2,32(r2)
 280b7ec:	1007883a 	mov	r3,r2
 280b7f0:	2005883a 	mov	r2,r4
 280b7f4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 280b7f8:	e13ffe17 	ldw	r4,-8(fp)
 280b7fc:	e17fff17 	ldw	r5,-4(fp)
 280b800:	d8000015 	stw	zero,0(sp)
 280b804:	0180a074 	movhi	r6,641
 280b808:	31ae1c04 	addi	r6,r6,-18320
 280b80c:	e1fffd17 	ldw	r7,-12(fp)
 280b810:	280c7dc0 	call	280c7dc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 280b814:	e0bffd17 	ldw	r2,-12(fp)
 280b818:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 280b81c:	e0bffd17 	ldw	r2,-12(fp)
 280b820:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 280b824:	0080a074 	movhi	r2,641
 280b828:	10842d04 	addi	r2,r2,4276
 280b82c:	10800017 	ldw	r2,0(r2)
 280b830:	100b883a 	mov	r5,r2
 280b834:	0180a074 	movhi	r6,641
 280b838:	31aea604 	addi	r6,r6,-17768
 280b83c:	e1fffd17 	ldw	r7,-12(fp)
 280b840:	280c1140 	call	280c114 <alt_alarm_start>
 280b844:	1004403a 	cmpge	r2,r2,zero
 280b848:	1000041e 	bne	r2,zero,280b85c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 280b84c:	e0fffd17 	ldw	r3,-12(fp)
 280b850:	00a00034 	movhi	r2,32768
 280b854:	10bfffc4 	addi	r2,r2,-1
 280b858:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 280b85c:	e037883a 	mov	sp,fp
 280b860:	dfc00117 	ldw	ra,4(sp)
 280b864:	df000017 	ldw	fp,0(sp)
 280b868:	dec00204 	addi	sp,sp,8
 280b86c:	f800283a 	ret

0280b870 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 280b870:	defff804 	addi	sp,sp,-32
 280b874:	df000715 	stw	fp,28(sp)
 280b878:	df000704 	addi	fp,sp,28
 280b87c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 280b880:	e0bfff17 	ldw	r2,-4(fp)
 280b884:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 280b888:	e0bffe17 	ldw	r2,-8(fp)
 280b88c:	10800017 	ldw	r2,0(r2)
 280b890:	e0bffd15 	stw	r2,-12(fp)
 280b894:	00000006 	br	280b898 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 280b898:	e0bffd17 	ldw	r2,-12(fp)
 280b89c:	10800104 	addi	r2,r2,4
 280b8a0:	10800037 	ldwio	r2,0(r2)
 280b8a4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 280b8a8:	e0bffc17 	ldw	r2,-16(fp)
 280b8ac:	1080c00c 	andi	r2,r2,768
 280b8b0:	1005003a 	cmpeq	r2,r2,zero
 280b8b4:	1000741e 	bne	r2,zero,280ba88 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 280b8b8:	e0bffc17 	ldw	r2,-16(fp)
 280b8bc:	1080400c 	andi	r2,r2,256
 280b8c0:	1005003a 	cmpeq	r2,r2,zero
 280b8c4:	1000351e 	bne	r2,zero,280b99c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 280b8c8:	00800074 	movhi	r2,1
 280b8cc:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 280b8d0:	e0bffe17 	ldw	r2,-8(fp)
 280b8d4:	10800a17 	ldw	r2,40(r2)
 280b8d8:	10800044 	addi	r2,r2,1
 280b8dc:	1081ffcc 	andi	r2,r2,2047
 280b8e0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 280b8e4:	e0bffe17 	ldw	r2,-8(fp)
 280b8e8:	10c00b17 	ldw	r3,44(r2)
 280b8ec:	e0bffa17 	ldw	r2,-24(fp)
 280b8f0:	18801626 	beq	r3,r2,280b94c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 280b8f4:	e0bffd17 	ldw	r2,-12(fp)
 280b8f8:	10800037 	ldwio	r2,0(r2)
 280b8fc:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 280b900:	e0bffb17 	ldw	r2,-20(fp)
 280b904:	10a0000c 	andi	r2,r2,32768
 280b908:	1005003a 	cmpeq	r2,r2,zero
 280b90c:	10000f1e 	bne	r2,zero,280b94c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 280b910:	e0bffe17 	ldw	r2,-8(fp)
 280b914:	10c00a17 	ldw	r3,40(r2)
 280b918:	e0bffb17 	ldw	r2,-20(fp)
 280b91c:	1009883a 	mov	r4,r2
 280b920:	e0bffe17 	ldw	r2,-8(fp)
 280b924:	1885883a 	add	r2,r3,r2
 280b928:	10800e04 	addi	r2,r2,56
 280b92c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 280b930:	e0bffe17 	ldw	r2,-8(fp)
 280b934:	10800a17 	ldw	r2,40(r2)
 280b938:	10800044 	addi	r2,r2,1
 280b93c:	10c1ffcc 	andi	r3,r2,2047
 280b940:	e0bffe17 	ldw	r2,-8(fp)
 280b944:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 280b948:	003fe106 	br	280b8d0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 280b94c:	e0bffb17 	ldw	r2,-20(fp)
 280b950:	10bfffec 	andhi	r2,r2,65535
 280b954:	1005003a 	cmpeq	r2,r2,zero
 280b958:	1000101e 	bne	r2,zero,280b99c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 280b95c:	e0bffe17 	ldw	r2,-8(fp)
 280b960:	10c00817 	ldw	r3,32(r2)
 280b964:	00bfff84 	movi	r2,-2
 280b968:	1886703a 	and	r3,r3,r2
 280b96c:	e0bffe17 	ldw	r2,-8(fp)
 280b970:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 280b974:	e0bffd17 	ldw	r2,-12(fp)
 280b978:	11000104 	addi	r4,r2,4
 280b97c:	e0bffe17 	ldw	r2,-8(fp)
 280b980:	10800817 	ldw	r2,32(r2)
 280b984:	1007883a 	mov	r3,r2
 280b988:	2005883a 	mov	r2,r4
 280b98c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 280b990:	e0bffd17 	ldw	r2,-12(fp)
 280b994:	10800104 	addi	r2,r2,4
 280b998:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 280b99c:	e0bffc17 	ldw	r2,-16(fp)
 280b9a0:	1080800c 	andi	r2,r2,512
 280b9a4:	1005003a 	cmpeq	r2,r2,zero
 280b9a8:	103fbb1e 	bne	r2,zero,280b898 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 280b9ac:	e0bffc17 	ldw	r2,-16(fp)
 280b9b0:	10bfffec 	andhi	r2,r2,65535
 280b9b4:	1004d43a 	srli	r2,r2,16
 280b9b8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 280b9bc:	00001506 	br	280ba14 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 280b9c0:	e13ffd17 	ldw	r4,-12(fp)
 280b9c4:	e0bffe17 	ldw	r2,-8(fp)
 280b9c8:	10c00d17 	ldw	r3,52(r2)
 280b9cc:	e0bffe17 	ldw	r2,-8(fp)
 280b9d0:	1885883a 	add	r2,r3,r2
 280b9d4:	10820e04 	addi	r2,r2,2104
 280b9d8:	10800003 	ldbu	r2,0(r2)
 280b9dc:	10c03fcc 	andi	r3,r2,255
 280b9e0:	18c0201c 	xori	r3,r3,128
 280b9e4:	18ffe004 	addi	r3,r3,-128
 280b9e8:	2005883a 	mov	r2,r4
 280b9ec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 280b9f0:	e0bffe17 	ldw	r2,-8(fp)
 280b9f4:	10800d17 	ldw	r2,52(r2)
 280b9f8:	10800044 	addi	r2,r2,1
 280b9fc:	10c1ffcc 	andi	r3,r2,2047
 280ba00:	e0bffe17 	ldw	r2,-8(fp)
 280ba04:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 280ba08:	e0bff917 	ldw	r2,-28(fp)
 280ba0c:	10bfffc4 	addi	r2,r2,-1
 280ba10:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 280ba14:	e0bff917 	ldw	r2,-28(fp)
 280ba18:	1005003a 	cmpeq	r2,r2,zero
 280ba1c:	1000051e 	bne	r2,zero,280ba34 <altera_avalon_jtag_uart_irq+0x1c4>
 280ba20:	e0bffe17 	ldw	r2,-8(fp)
 280ba24:	10c00d17 	ldw	r3,52(r2)
 280ba28:	e0bffe17 	ldw	r2,-8(fp)
 280ba2c:	10800c17 	ldw	r2,48(r2)
 280ba30:	18bfe31e 	bne	r3,r2,280b9c0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 280ba34:	e0bff917 	ldw	r2,-28(fp)
 280ba38:	1005003a 	cmpeq	r2,r2,zero
 280ba3c:	103f961e 	bne	r2,zero,280b898 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 280ba40:	e0bffe17 	ldw	r2,-8(fp)
 280ba44:	10c00817 	ldw	r3,32(r2)
 280ba48:	00bfff44 	movi	r2,-3
 280ba4c:	1886703a 	and	r3,r3,r2
 280ba50:	e0bffe17 	ldw	r2,-8(fp)
 280ba54:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 280ba58:	e0bffe17 	ldw	r2,-8(fp)
 280ba5c:	10800017 	ldw	r2,0(r2)
 280ba60:	11000104 	addi	r4,r2,4
 280ba64:	e0bffe17 	ldw	r2,-8(fp)
 280ba68:	10800817 	ldw	r2,32(r2)
 280ba6c:	1007883a 	mov	r3,r2
 280ba70:	2005883a 	mov	r2,r4
 280ba74:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 280ba78:	e0bffd17 	ldw	r2,-12(fp)
 280ba7c:	10800104 	addi	r2,r2,4
 280ba80:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 280ba84:	003f8406 	br	280b898 <altera_avalon_jtag_uart_irq+0x28>
}
 280ba88:	e037883a 	mov	sp,fp
 280ba8c:	df000017 	ldw	fp,0(sp)
 280ba90:	dec00104 	addi	sp,sp,4
 280ba94:	f800283a 	ret

0280ba98 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 280ba98:	defffc04 	addi	sp,sp,-16
 280ba9c:	df000315 	stw	fp,12(sp)
 280baa0:	df000304 	addi	fp,sp,12
 280baa4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 280baa8:	e0bfff17 	ldw	r2,-4(fp)
 280baac:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 280bab0:	e0bffe17 	ldw	r2,-8(fp)
 280bab4:	10800017 	ldw	r2,0(r2)
 280bab8:	10800104 	addi	r2,r2,4
 280babc:	10800037 	ldwio	r2,0(r2)
 280bac0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 280bac4:	e0bffd17 	ldw	r2,-12(fp)
 280bac8:	1081000c 	andi	r2,r2,1024
 280bacc:	1005003a 	cmpeq	r2,r2,zero
 280bad0:	10000c1e 	bne	r2,zero,280bb04 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 280bad4:	e0bffe17 	ldw	r2,-8(fp)
 280bad8:	10800017 	ldw	r2,0(r2)
 280badc:	11000104 	addi	r4,r2,4
 280bae0:	e0bffe17 	ldw	r2,-8(fp)
 280bae4:	10800817 	ldw	r2,32(r2)
 280bae8:	10810014 	ori	r2,r2,1024
 280baec:	1007883a 	mov	r3,r2
 280baf0:	2005883a 	mov	r2,r4
 280baf4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 280baf8:	e0bffe17 	ldw	r2,-8(fp)
 280bafc:	10000915 	stw	zero,36(r2)
 280bb00:	00000a06 	br	280bb2c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 280bb04:	e0bffe17 	ldw	r2,-8(fp)
 280bb08:	10c00917 	ldw	r3,36(r2)
 280bb0c:	00a00034 	movhi	r2,32768
 280bb10:	10bfff04 	addi	r2,r2,-4
 280bb14:	10c00536 	bltu	r2,r3,280bb2c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 280bb18:	e0bffe17 	ldw	r2,-8(fp)
 280bb1c:	10800917 	ldw	r2,36(r2)
 280bb20:	10c00044 	addi	r3,r2,1
 280bb24:	e0bffe17 	ldw	r2,-8(fp)
 280bb28:	10c00915 	stw	r3,36(r2)
 280bb2c:	0080a074 	movhi	r2,641
 280bb30:	10842d04 	addi	r2,r2,4276
 280bb34:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 280bb38:	e037883a 	mov	sp,fp
 280bb3c:	df000017 	ldw	fp,0(sp)
 280bb40:	dec00104 	addi	sp,sp,4
 280bb44:	f800283a 	ret

0280bb48 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 280bb48:	defffc04 	addi	sp,sp,-16
 280bb4c:	df000315 	stw	fp,12(sp)
 280bb50:	df000304 	addi	fp,sp,12
 280bb54:	e13ffd15 	stw	r4,-12(fp)
 280bb58:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 280bb5c:	00000706 	br	280bb7c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 280bb60:	e0bffe17 	ldw	r2,-8(fp)
 280bb64:	1090000c 	andi	r2,r2,16384
 280bb68:	1005003a 	cmpeq	r2,r2,zero
 280bb6c:	1000031e 	bne	r2,zero,280bb7c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 280bb70:	00bffd44 	movi	r2,-11
 280bb74:	e0bfff15 	stw	r2,-4(fp)
 280bb78:	00000b06 	br	280bba8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 280bb7c:	e0bffd17 	ldw	r2,-12(fp)
 280bb80:	10c00d17 	ldw	r3,52(r2)
 280bb84:	e0bffd17 	ldw	r2,-12(fp)
 280bb88:	10800c17 	ldw	r2,48(r2)
 280bb8c:	18800526 	beq	r3,r2,280bba4 <altera_avalon_jtag_uart_close+0x5c>
 280bb90:	e0bffd17 	ldw	r2,-12(fp)
 280bb94:	10c00917 	ldw	r3,36(r2)
 280bb98:	e0bffd17 	ldw	r2,-12(fp)
 280bb9c:	10800117 	ldw	r2,4(r2)
 280bba0:	18bfef36 	bltu	r3,r2,280bb60 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 280bba4:	e03fff15 	stw	zero,-4(fp)
 280bba8:	e0bfff17 	ldw	r2,-4(fp)
}
 280bbac:	e037883a 	mov	sp,fp
 280bbb0:	df000017 	ldw	fp,0(sp)
 280bbb4:	dec00104 	addi	sp,sp,4
 280bbb8:	f800283a 	ret

0280bbbc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 280bbbc:	defff804 	addi	sp,sp,-32
 280bbc0:	df000715 	stw	fp,28(sp)
 280bbc4:	df000704 	addi	fp,sp,28
 280bbc8:	e13ffb15 	stw	r4,-20(fp)
 280bbcc:	e17ffc15 	stw	r5,-16(fp)
 280bbd0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 280bbd4:	00bff9c4 	movi	r2,-25
 280bbd8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 280bbdc:	e0bffc17 	ldw	r2,-16(fp)
 280bbe0:	e0bfff15 	stw	r2,-4(fp)
 280bbe4:	e0ffff17 	ldw	r3,-4(fp)
 280bbe8:	189a8060 	cmpeqi	r2,r3,27137
 280bbec:	1000041e 	bne	r2,zero,280bc00 <altera_avalon_jtag_uart_ioctl+0x44>
 280bbf0:	e0ffff17 	ldw	r3,-4(fp)
 280bbf4:	189a80a0 	cmpeqi	r2,r3,27138
 280bbf8:	10001b1e 	bne	r2,zero,280bc68 <altera_avalon_jtag_uart_ioctl+0xac>
 280bbfc:	00002706 	br	280bc9c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 280bc00:	e0bffb17 	ldw	r2,-20(fp)
 280bc04:	10c00117 	ldw	r3,4(r2)
 280bc08:	00a00034 	movhi	r2,32768
 280bc0c:	10bfffc4 	addi	r2,r2,-1
 280bc10:	18802226 	beq	r3,r2,280bc9c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 280bc14:	e0bffd17 	ldw	r2,-12(fp)
 280bc18:	10800017 	ldw	r2,0(r2)
 280bc1c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 280bc20:	e0bff917 	ldw	r2,-28(fp)
 280bc24:	10800090 	cmplti	r2,r2,2
 280bc28:	1000071e 	bne	r2,zero,280bc48 <altera_avalon_jtag_uart_ioctl+0x8c>
 280bc2c:	e0fff917 	ldw	r3,-28(fp)
 280bc30:	00a00034 	movhi	r2,32768
 280bc34:	10bfffc4 	addi	r2,r2,-1
 280bc38:	18800326 	beq	r3,r2,280bc48 <altera_avalon_jtag_uart_ioctl+0x8c>
 280bc3c:	e0bff917 	ldw	r2,-28(fp)
 280bc40:	e0bffe15 	stw	r2,-8(fp)
 280bc44:	00000306 	br	280bc54 <altera_avalon_jtag_uart_ioctl+0x98>
 280bc48:	00e00034 	movhi	r3,32768
 280bc4c:	18ffff84 	addi	r3,r3,-2
 280bc50:	e0fffe15 	stw	r3,-8(fp)
 280bc54:	e0bffb17 	ldw	r2,-20(fp)
 280bc58:	e0fffe17 	ldw	r3,-8(fp)
 280bc5c:	10c00115 	stw	r3,4(r2)
      rc = 0;
 280bc60:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 280bc64:	00000d06 	br	280bc9c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 280bc68:	e0bffb17 	ldw	r2,-20(fp)
 280bc6c:	10c00117 	ldw	r3,4(r2)
 280bc70:	00a00034 	movhi	r2,32768
 280bc74:	10bfffc4 	addi	r2,r2,-1
 280bc78:	18800826 	beq	r3,r2,280bc9c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 280bc7c:	e13ffd17 	ldw	r4,-12(fp)
 280bc80:	e0bffb17 	ldw	r2,-20(fp)
 280bc84:	10c00917 	ldw	r3,36(r2)
 280bc88:	e0bffb17 	ldw	r2,-20(fp)
 280bc8c:	10800117 	ldw	r2,4(r2)
 280bc90:	1885803a 	cmpltu	r2,r3,r2
 280bc94:	20800015 	stw	r2,0(r4)
      rc = 0;
 280bc98:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 280bc9c:	e0bffa17 	ldw	r2,-24(fp)
}
 280bca0:	e037883a 	mov	sp,fp
 280bca4:	df000017 	ldw	fp,0(sp)
 280bca8:	dec00104 	addi	sp,sp,4
 280bcac:	f800283a 	ret

0280bcb0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 280bcb0:	defff204 	addi	sp,sp,-56
 280bcb4:	dfc00d15 	stw	ra,52(sp)
 280bcb8:	df000c15 	stw	fp,48(sp)
 280bcbc:	df000c04 	addi	fp,sp,48
 280bcc0:	e13ffb15 	stw	r4,-20(fp)
 280bcc4:	e17ffc15 	stw	r5,-16(fp)
 280bcc8:	e1bffd15 	stw	r6,-12(fp)
 280bccc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 280bcd0:	e0bffc17 	ldw	r2,-16(fp)
 280bcd4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 280bcd8:	00004806 	br	280bdfc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 280bcdc:	e0bffb17 	ldw	r2,-20(fp)
 280bce0:	10800a17 	ldw	r2,40(r2)
 280bce4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 280bce8:	e0bffb17 	ldw	r2,-20(fp)
 280bcec:	10800b17 	ldw	r2,44(r2)
 280bcf0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 280bcf4:	e0fff717 	ldw	r3,-36(fp)
 280bcf8:	e0bff617 	ldw	r2,-40(fp)
 280bcfc:	18800536 	bltu	r3,r2,280bd14 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 280bd00:	e0bff717 	ldw	r2,-36(fp)
 280bd04:	e0fff617 	ldw	r3,-40(fp)
 280bd08:	10c5c83a 	sub	r2,r2,r3
 280bd0c:	e0bff815 	stw	r2,-32(fp)
 280bd10:	00000406 	br	280bd24 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 280bd14:	00820004 	movi	r2,2048
 280bd18:	e0fff617 	ldw	r3,-40(fp)
 280bd1c:	10c5c83a 	sub	r2,r2,r3
 280bd20:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 280bd24:	e0bff817 	ldw	r2,-32(fp)
 280bd28:	1005003a 	cmpeq	r2,r2,zero
 280bd2c:	10001f1e 	bne	r2,zero,280bdac <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 280bd30:	e0fffd17 	ldw	r3,-12(fp)
 280bd34:	e0bff817 	ldw	r2,-32(fp)
 280bd38:	1880022e 	bgeu	r3,r2,280bd44 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 280bd3c:	e0bffd17 	ldw	r2,-12(fp)
 280bd40:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 280bd44:	e0bffb17 	ldw	r2,-20(fp)
 280bd48:	10c00e04 	addi	r3,r2,56
 280bd4c:	e0bff617 	ldw	r2,-40(fp)
 280bd50:	1887883a 	add	r3,r3,r2
 280bd54:	e0bffa17 	ldw	r2,-24(fp)
 280bd58:	1009883a 	mov	r4,r2
 280bd5c:	180b883a 	mov	r5,r3
 280bd60:	e1bff817 	ldw	r6,-32(fp)
 280bd64:	28057280 	call	2805728 <memcpy>
      ptr   += n;
 280bd68:	e0fff817 	ldw	r3,-32(fp)
 280bd6c:	e0bffa17 	ldw	r2,-24(fp)
 280bd70:	10c5883a 	add	r2,r2,r3
 280bd74:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 280bd78:	e0fffd17 	ldw	r3,-12(fp)
 280bd7c:	e0bff817 	ldw	r2,-32(fp)
 280bd80:	1885c83a 	sub	r2,r3,r2
 280bd84:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 280bd88:	e0fff617 	ldw	r3,-40(fp)
 280bd8c:	e0bff817 	ldw	r2,-32(fp)
 280bd90:	1885883a 	add	r2,r3,r2
 280bd94:	10c1ffcc 	andi	r3,r2,2047
 280bd98:	e0bffb17 	ldw	r2,-20(fp)
 280bd9c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 280bda0:	e0bffd17 	ldw	r2,-12(fp)
 280bda4:	10800048 	cmpgei	r2,r2,1
 280bda8:	103fcc1e 	bne	r2,zero,280bcdc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 280bdac:	e0fffa17 	ldw	r3,-24(fp)
 280bdb0:	e0bffc17 	ldw	r2,-16(fp)
 280bdb4:	1880141e 	bne	r3,r2,280be08 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 280bdb8:	e0bffe17 	ldw	r2,-8(fp)
 280bdbc:	1090000c 	andi	r2,r2,16384
 280bdc0:	1004c03a 	cmpne	r2,r2,zero
 280bdc4:	1000101e 	bne	r2,zero,280be08 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 280bdc8:	e0bffb17 	ldw	r2,-20(fp)
 280bdcc:	10c00a17 	ldw	r3,40(r2)
 280bdd0:	e0bff717 	ldw	r2,-36(fp)
 280bdd4:	1880051e 	bne	r3,r2,280bdec <altera_avalon_jtag_uart_read+0x13c>
 280bdd8:	e0bffb17 	ldw	r2,-20(fp)
 280bddc:	10c00917 	ldw	r3,36(r2)
 280bde0:	e0bffb17 	ldw	r2,-20(fp)
 280bde4:	10800117 	ldw	r2,4(r2)
 280bde8:	18bff736 	bltu	r3,r2,280bdc8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 280bdec:	e0bffb17 	ldw	r2,-20(fp)
 280bdf0:	10c00a17 	ldw	r3,40(r2)
 280bdf4:	e0bff717 	ldw	r2,-36(fp)
 280bdf8:	18800326 	beq	r3,r2,280be08 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 280bdfc:	e0bffd17 	ldw	r2,-12(fp)
 280be00:	10800048 	cmpgei	r2,r2,1
 280be04:	103fb51e 	bne	r2,zero,280bcdc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 280be08:	e0fffa17 	ldw	r3,-24(fp)
 280be0c:	e0bffc17 	ldw	r2,-16(fp)
 280be10:	18801926 	beq	r3,r2,280be78 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 280be14:	0005303a 	rdctl	r2,status
 280be18:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 280be1c:	e0fff517 	ldw	r3,-44(fp)
 280be20:	00bfff84 	movi	r2,-2
 280be24:	1884703a 	and	r2,r3,r2
 280be28:	1001703a 	wrctl	status,r2
  
  return context;
 280be2c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 280be30:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 280be34:	e0bffb17 	ldw	r2,-20(fp)
 280be38:	10800817 	ldw	r2,32(r2)
 280be3c:	10c00054 	ori	r3,r2,1
 280be40:	e0bffb17 	ldw	r2,-20(fp)
 280be44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 280be48:	e0bffb17 	ldw	r2,-20(fp)
 280be4c:	10800017 	ldw	r2,0(r2)
 280be50:	11000104 	addi	r4,r2,4
 280be54:	e0bffb17 	ldw	r2,-20(fp)
 280be58:	10800817 	ldw	r2,32(r2)
 280be5c:	1007883a 	mov	r3,r2
 280be60:	2005883a 	mov	r2,r4
 280be64:	10c00035 	stwio	r3,0(r2)
 280be68:	e0bff917 	ldw	r2,-28(fp)
 280be6c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 280be70:	e0bff417 	ldw	r2,-48(fp)
 280be74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 280be78:	e0fffa17 	ldw	r3,-24(fp)
 280be7c:	e0bffc17 	ldw	r2,-16(fp)
 280be80:	18800526 	beq	r3,r2,280be98 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 280be84:	e0fffa17 	ldw	r3,-24(fp)
 280be88:	e0bffc17 	ldw	r2,-16(fp)
 280be8c:	1887c83a 	sub	r3,r3,r2
 280be90:	e0ffff15 	stw	r3,-4(fp)
 280be94:	00000906 	br	280bebc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 280be98:	e0bffe17 	ldw	r2,-8(fp)
 280be9c:	1090000c 	andi	r2,r2,16384
 280bea0:	1005003a 	cmpeq	r2,r2,zero
 280bea4:	1000031e 	bne	r2,zero,280beb4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 280bea8:	00bffd44 	movi	r2,-11
 280beac:	e0bfff15 	stw	r2,-4(fp)
 280beb0:	00000206 	br	280bebc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 280beb4:	00bffec4 	movi	r2,-5
 280beb8:	e0bfff15 	stw	r2,-4(fp)
 280bebc:	e0bfff17 	ldw	r2,-4(fp)
}
 280bec0:	e037883a 	mov	sp,fp
 280bec4:	dfc00117 	ldw	ra,4(sp)
 280bec8:	df000017 	ldw	fp,0(sp)
 280becc:	dec00204 	addi	sp,sp,8
 280bed0:	f800283a 	ret

0280bed4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 280bed4:	defff204 	addi	sp,sp,-56
 280bed8:	dfc00d15 	stw	ra,52(sp)
 280bedc:	df000c15 	stw	fp,48(sp)
 280bee0:	df000c04 	addi	fp,sp,48
 280bee4:	e13ffb15 	stw	r4,-20(fp)
 280bee8:	e17ffc15 	stw	r5,-16(fp)
 280beec:	e1bffd15 	stw	r6,-12(fp)
 280bef0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 280bef4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 280bef8:	e0bffc17 	ldw	r2,-16(fp)
 280befc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 280bf00:	00003a06 	br	280bfec <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 280bf04:	e0bffb17 	ldw	r2,-20(fp)
 280bf08:	10800c17 	ldw	r2,48(r2)
 280bf0c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 280bf10:	e0bffb17 	ldw	r2,-20(fp)
 280bf14:	10800d17 	ldw	r2,52(r2)
 280bf18:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 280bf1c:	e0fffa17 	ldw	r3,-24(fp)
 280bf20:	e0bff917 	ldw	r2,-28(fp)
 280bf24:	1880062e 	bgeu	r3,r2,280bf40 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 280bf28:	e0fff917 	ldw	r3,-28(fp)
 280bf2c:	e0bffa17 	ldw	r2,-24(fp)
 280bf30:	1885c83a 	sub	r2,r3,r2
 280bf34:	10bfffc4 	addi	r2,r2,-1
 280bf38:	e0bff815 	stw	r2,-32(fp)
 280bf3c:	00000c06 	br	280bf70 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 280bf40:	e0bff917 	ldw	r2,-28(fp)
 280bf44:	1005003a 	cmpeq	r2,r2,zero
 280bf48:	1000051e 	bne	r2,zero,280bf60 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 280bf4c:	00820004 	movi	r2,2048
 280bf50:	e0fffa17 	ldw	r3,-24(fp)
 280bf54:	10c5c83a 	sub	r2,r2,r3
 280bf58:	e0bff815 	stw	r2,-32(fp)
 280bf5c:	00000406 	br	280bf70 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 280bf60:	0081ffc4 	movi	r2,2047
 280bf64:	e0fffa17 	ldw	r3,-24(fp)
 280bf68:	10c5c83a 	sub	r2,r2,r3
 280bf6c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 280bf70:	e0bff817 	ldw	r2,-32(fp)
 280bf74:	1005003a 	cmpeq	r2,r2,zero
 280bf78:	10001f1e 	bne	r2,zero,280bff8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 280bf7c:	e0fffd17 	ldw	r3,-12(fp)
 280bf80:	e0bff817 	ldw	r2,-32(fp)
 280bf84:	1880022e 	bgeu	r3,r2,280bf90 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 280bf88:	e0bffd17 	ldw	r2,-12(fp)
 280bf8c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 280bf90:	e0bffb17 	ldw	r2,-20(fp)
 280bf94:	10c20e04 	addi	r3,r2,2104
 280bf98:	e0bffa17 	ldw	r2,-24(fp)
 280bf9c:	1885883a 	add	r2,r3,r2
 280bfa0:	e0fffc17 	ldw	r3,-16(fp)
 280bfa4:	1009883a 	mov	r4,r2
 280bfa8:	180b883a 	mov	r5,r3
 280bfac:	e1bff817 	ldw	r6,-32(fp)
 280bfb0:	28057280 	call	2805728 <memcpy>
      ptr   += n;
 280bfb4:	e0fff817 	ldw	r3,-32(fp)
 280bfb8:	e0bffc17 	ldw	r2,-16(fp)
 280bfbc:	10c5883a 	add	r2,r2,r3
 280bfc0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 280bfc4:	e0fffd17 	ldw	r3,-12(fp)
 280bfc8:	e0bff817 	ldw	r2,-32(fp)
 280bfcc:	1885c83a 	sub	r2,r3,r2
 280bfd0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 280bfd4:	e0fffa17 	ldw	r3,-24(fp)
 280bfd8:	e0bff817 	ldw	r2,-32(fp)
 280bfdc:	1885883a 	add	r2,r3,r2
 280bfe0:	10c1ffcc 	andi	r3,r2,2047
 280bfe4:	e0bffb17 	ldw	r2,-20(fp)
 280bfe8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 280bfec:	e0bffd17 	ldw	r2,-12(fp)
 280bff0:	10800048 	cmpgei	r2,r2,1
 280bff4:	103fc31e 	bne	r2,zero,280bf04 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 280bff8:	0005303a 	rdctl	r2,status
 280bffc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 280c000:	e0fff517 	ldw	r3,-44(fp)
 280c004:	00bfff84 	movi	r2,-2
 280c008:	1884703a 	and	r2,r3,r2
 280c00c:	1001703a 	wrctl	status,r2
  
  return context;
 280c010:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 280c014:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 280c018:	e0bffb17 	ldw	r2,-20(fp)
 280c01c:	10800817 	ldw	r2,32(r2)
 280c020:	10c00094 	ori	r3,r2,2
 280c024:	e0bffb17 	ldw	r2,-20(fp)
 280c028:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 280c02c:	e0bffb17 	ldw	r2,-20(fp)
 280c030:	10800017 	ldw	r2,0(r2)
 280c034:	11000104 	addi	r4,r2,4
 280c038:	e0bffb17 	ldw	r2,-20(fp)
 280c03c:	10800817 	ldw	r2,32(r2)
 280c040:	1007883a 	mov	r3,r2
 280c044:	2005883a 	mov	r2,r4
 280c048:	10c00035 	stwio	r3,0(r2)
 280c04c:	e0bff717 	ldw	r2,-36(fp)
 280c050:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 280c054:	e0bff417 	ldw	r2,-48(fp)
 280c058:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 280c05c:	e0bffd17 	ldw	r2,-12(fp)
 280c060:	10800050 	cmplti	r2,r2,1
 280c064:	1000111e 	bne	r2,zero,280c0ac <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 280c068:	e0bffe17 	ldw	r2,-8(fp)
 280c06c:	1090000c 	andi	r2,r2,16384
 280c070:	1004c03a 	cmpne	r2,r2,zero
 280c074:	1000101e 	bne	r2,zero,280c0b8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 280c078:	e0bffb17 	ldw	r2,-20(fp)
 280c07c:	10c00d17 	ldw	r3,52(r2)
 280c080:	e0bff917 	ldw	r2,-28(fp)
 280c084:	1880051e 	bne	r3,r2,280c09c <altera_avalon_jtag_uart_write+0x1c8>
 280c088:	e0bffb17 	ldw	r2,-20(fp)
 280c08c:	10c00917 	ldw	r3,36(r2)
 280c090:	e0bffb17 	ldw	r2,-20(fp)
 280c094:	10800117 	ldw	r2,4(r2)
 280c098:	18bff736 	bltu	r3,r2,280c078 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 280c09c:	e0bffb17 	ldw	r2,-20(fp)
 280c0a0:	10c00d17 	ldw	r3,52(r2)
 280c0a4:	e0bff917 	ldw	r2,-28(fp)
 280c0a8:	18800326 	beq	r3,r2,280c0b8 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 280c0ac:	e0bffd17 	ldw	r2,-12(fp)
 280c0b0:	10800048 	cmpgei	r2,r2,1
 280c0b4:	103fcd1e 	bne	r2,zero,280bfec <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 280c0b8:	e0fffc17 	ldw	r3,-16(fp)
 280c0bc:	e0bff617 	ldw	r2,-40(fp)
 280c0c0:	18800526 	beq	r3,r2,280c0d8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 280c0c4:	e0fffc17 	ldw	r3,-16(fp)
 280c0c8:	e0bff617 	ldw	r2,-40(fp)
 280c0cc:	1887c83a 	sub	r3,r3,r2
 280c0d0:	e0ffff15 	stw	r3,-4(fp)
 280c0d4:	00000906 	br	280c0fc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 280c0d8:	e0bffe17 	ldw	r2,-8(fp)
 280c0dc:	1090000c 	andi	r2,r2,16384
 280c0e0:	1005003a 	cmpeq	r2,r2,zero
 280c0e4:	1000031e 	bne	r2,zero,280c0f4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 280c0e8:	00bffd44 	movi	r2,-11
 280c0ec:	e0bfff15 	stw	r2,-4(fp)
 280c0f0:	00000206 	br	280c0fc <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 280c0f4:	00bffec4 	movi	r2,-5
 280c0f8:	e0bfff15 	stw	r2,-4(fp)
 280c0fc:	e0bfff17 	ldw	r2,-4(fp)
}
 280c100:	e037883a 	mov	sp,fp
 280c104:	dfc00117 	ldw	ra,4(sp)
 280c108:	df000017 	ldw	fp,0(sp)
 280c10c:	dec00204 	addi	sp,sp,8
 280c110:	f800283a 	ret

0280c114 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 280c114:	defff404 	addi	sp,sp,-48
 280c118:	df000b15 	stw	fp,44(sp)
 280c11c:	df000b04 	addi	fp,sp,44
 280c120:	e13ffb15 	stw	r4,-20(fp)
 280c124:	e17ffc15 	stw	r5,-16(fp)
 280c128:	e1bffd15 	stw	r6,-12(fp)
 280c12c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 280c130:	e03ff915 	stw	zero,-28(fp)
 280c134:	0080a074 	movhi	r2,641
 280c138:	10842d04 	addi	r2,r2,4276
 280c13c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 280c140:	1005003a 	cmpeq	r2,r2,zero
 280c144:	1000411e 	bne	r2,zero,280c24c <alt_alarm_start+0x138>
  {
    if (alarm)
 280c148:	e0bffb17 	ldw	r2,-20(fp)
 280c14c:	1005003a 	cmpeq	r2,r2,zero
 280c150:	10003b1e 	bne	r2,zero,280c240 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 280c154:	e0fffb17 	ldw	r3,-20(fp)
 280c158:	e0bffd17 	ldw	r2,-12(fp)
 280c15c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 280c160:	e0fffb17 	ldw	r3,-20(fp)
 280c164:	e0bffe17 	ldw	r2,-8(fp)
 280c168:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 280c16c:	0005303a 	rdctl	r2,status
 280c170:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 280c174:	e0fff817 	ldw	r3,-32(fp)
 280c178:	00bfff84 	movi	r2,-2
 280c17c:	1884703a 	and	r2,r3,r2
 280c180:	1001703a 	wrctl	status,r2
  
  return context;
 280c184:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 280c188:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 280c18c:	0080a074 	movhi	r2,641
 280c190:	10842e04 	addi	r2,r2,4280
 280c194:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 280c198:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 280c19c:	e0fffc17 	ldw	r3,-16(fp)
 280c1a0:	e0bff917 	ldw	r2,-28(fp)
 280c1a4:	1885883a 	add	r2,r3,r2
 280c1a8:	10c00044 	addi	r3,r2,1
 280c1ac:	e0bffb17 	ldw	r2,-20(fp)
 280c1b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 280c1b4:	e0bffb17 	ldw	r2,-20(fp)
 280c1b8:	10c00217 	ldw	r3,8(r2)
 280c1bc:	e0bff917 	ldw	r2,-28(fp)
 280c1c0:	1880042e 	bgeu	r3,r2,280c1d4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 280c1c4:	e0fffb17 	ldw	r3,-20(fp)
 280c1c8:	00800044 	movi	r2,1
 280c1cc:	18800405 	stb	r2,16(r3)
 280c1d0:	00000206 	br	280c1dc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 280c1d4:	e0bffb17 	ldw	r2,-20(fp)
 280c1d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 280c1dc:	e0fffb17 	ldw	r3,-20(fp)
 280c1e0:	0080a074 	movhi	r2,641
 280c1e4:	10bd4c04 	addi	r2,r2,-2768
 280c1e8:	e0bff615 	stw	r2,-40(fp)
 280c1ec:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 280c1f0:	e0fff717 	ldw	r3,-36(fp)
 280c1f4:	e0bff617 	ldw	r2,-40(fp)
 280c1f8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 280c1fc:	e0bff617 	ldw	r2,-40(fp)
 280c200:	10c00017 	ldw	r3,0(r2)
 280c204:	e0bff717 	ldw	r2,-36(fp)
 280c208:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 280c20c:	e0bff617 	ldw	r2,-40(fp)
 280c210:	10c00017 	ldw	r3,0(r2)
 280c214:	e0bff717 	ldw	r2,-36(fp)
 280c218:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 280c21c:	e0fff617 	ldw	r3,-40(fp)
 280c220:	e0bff717 	ldw	r2,-36(fp)
 280c224:	18800015 	stw	r2,0(r3)
 280c228:	e0bffa17 	ldw	r2,-24(fp)
 280c22c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 280c230:	e0bff517 	ldw	r2,-44(fp)
 280c234:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 280c238:	e03fff15 	stw	zero,-4(fp)
 280c23c:	00000506 	br	280c254 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 280c240:	00bffa84 	movi	r2,-22
 280c244:	e0bfff15 	stw	r2,-4(fp)
 280c248:	00000206 	br	280c254 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 280c24c:	00bfde84 	movi	r2,-134
 280c250:	e0bfff15 	stw	r2,-4(fp)
 280c254:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 280c258:	e037883a 	mov	sp,fp
 280c25c:	df000017 	ldw	fp,0(sp)
 280c260:	dec00104 	addi	sp,sp,4
 280c264:	f800283a 	ret

0280c268 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 280c268:	defffa04 	addi	sp,sp,-24
 280c26c:	dfc00515 	stw	ra,20(sp)
 280c270:	df000415 	stw	fp,16(sp)
 280c274:	df000404 	addi	fp,sp,16
 280c278:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 280c27c:	00800244 	movi	r2,9
 280c280:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 280c284:	e13ffc17 	ldw	r4,-16(fp)
 280c288:	014003f4 	movhi	r5,15
 280c28c:	29509004 	addi	r5,r5,16960
 280c290:	28096940 	call	2809694 <__mulsi3>
 280c294:	100b883a 	mov	r5,r2
 280c298:	0101fcf4 	movhi	r4,2035
 280c29c:	21205404 	addi	r4,r4,-32432
 280c2a0:	28096840 	call	2809684 <__udivsi3>
 280c2a4:	100b883a 	mov	r5,r2
 280c2a8:	01200034 	movhi	r4,32768
 280c2ac:	213fffc4 	addi	r4,r4,-1
 280c2b0:	28096840 	call	2809684 <__udivsi3>
 280c2b4:	100b883a 	mov	r5,r2
 280c2b8:	e13fff17 	ldw	r4,-4(fp)
 280c2bc:	28096840 	call	2809684 <__udivsi3>
 280c2c0:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 280c2c4:	e0bffd17 	ldw	r2,-12(fp)
 280c2c8:	1005003a 	cmpeq	r2,r2,zero
 280c2cc:	10002a1e 	bne	r2,zero,280c378 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
 280c2d0:	e03ffe15 	stw	zero,-8(fp)
 280c2d4:	00001706 	br	280c334 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 280c2d8:	00a00034 	movhi	r2,32768
 280c2dc:	10bfffc4 	addi	r2,r2,-1
 280c2e0:	10bfffc4 	addi	r2,r2,-1
 280c2e4:	103ffe1e 	bne	r2,zero,280c2e0 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 280c2e8:	e13ffc17 	ldw	r4,-16(fp)
 280c2ec:	014003f4 	movhi	r5,15
 280c2f0:	29509004 	addi	r5,r5,16960
 280c2f4:	28096940 	call	2809694 <__mulsi3>
 280c2f8:	100b883a 	mov	r5,r2
 280c2fc:	0101fcf4 	movhi	r4,2035
 280c300:	21205404 	addi	r4,r4,-32432
 280c304:	28096840 	call	2809684 <__udivsi3>
 280c308:	100b883a 	mov	r5,r2
 280c30c:	01200034 	movhi	r4,32768
 280c310:	213fffc4 	addi	r4,r4,-1
 280c314:	28096840 	call	2809684 <__udivsi3>
 280c318:	1007883a 	mov	r3,r2
 280c31c:	e0bfff17 	ldw	r2,-4(fp)
 280c320:	10c5c83a 	sub	r2,r2,r3
 280c324:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 280c328:	e0bffe17 	ldw	r2,-8(fp)
 280c32c:	10800044 	addi	r2,r2,1
 280c330:	e0bffe15 	stw	r2,-8(fp)
 280c334:	e0fffe17 	ldw	r3,-8(fp)
 280c338:	e0bffd17 	ldw	r2,-12(fp)
 280c33c:	18bfe616 	blt	r3,r2,280c2d8 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 280c340:	e13ffc17 	ldw	r4,-16(fp)
 280c344:	014003f4 	movhi	r5,15
 280c348:	29509004 	addi	r5,r5,16960
 280c34c:	28096940 	call	2809694 <__mulsi3>
 280c350:	100b883a 	mov	r5,r2
 280c354:	0101fcf4 	movhi	r4,2035
 280c358:	21205404 	addi	r4,r4,-32432
 280c35c:	28096840 	call	2809684 <__udivsi3>
 280c360:	1009883a 	mov	r4,r2
 280c364:	e17fff17 	ldw	r5,-4(fp)
 280c368:	28096940 	call	2809694 <__mulsi3>
 280c36c:	10bfffc4 	addi	r2,r2,-1
 280c370:	103ffe1e 	bne	r2,zero,280c36c <alt_busy_sleep+0x104>
 280c374:	00000d06 	br	280c3ac <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 280c378:	e13ffc17 	ldw	r4,-16(fp)
 280c37c:	014003f4 	movhi	r5,15
 280c380:	29509004 	addi	r5,r5,16960
 280c384:	28096940 	call	2809694 <__mulsi3>
 280c388:	100b883a 	mov	r5,r2
 280c38c:	0101fcf4 	movhi	r4,2035
 280c390:	21205404 	addi	r4,r4,-32432
 280c394:	28096840 	call	2809684 <__udivsi3>
 280c398:	1009883a 	mov	r4,r2
 280c39c:	e17fff17 	ldw	r5,-4(fp)
 280c3a0:	28096940 	call	2809694 <__mulsi3>
 280c3a4:	10bfffc4 	addi	r2,r2,-1
 280c3a8:	00bffe16 	blt	zero,r2,280c3a4 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 280c3ac:	0005883a 	mov	r2,zero
}
 280c3b0:	e037883a 	mov	sp,fp
 280c3b4:	dfc00117 	ldw	ra,4(sp)
 280c3b8:	df000017 	ldw	fp,0(sp)
 280c3bc:	dec00204 	addi	sp,sp,8
 280c3c0:	f800283a 	ret

0280c3c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 280c3c4:	deffff04 	addi	sp,sp,-4
 280c3c8:	df000015 	stw	fp,0(sp)
 280c3cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 280c3d0:	e037883a 	mov	sp,fp
 280c3d4:	df000017 	ldw	fp,0(sp)
 280c3d8:	dec00104 	addi	sp,sp,4
 280c3dc:	f800283a 	ret

0280c3e0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 280c3e0:	defff904 	addi	sp,sp,-28
 280c3e4:	dfc00615 	stw	ra,24(sp)
 280c3e8:	df000515 	stw	fp,20(sp)
 280c3ec:	df000504 	addi	fp,sp,20
 280c3f0:	e13ffd15 	stw	r4,-12(fp)
 280c3f4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 280c3f8:	e0bffd17 	ldw	r2,-12(fp)
 280c3fc:	1005003a 	cmpeq	r2,r2,zero
 280c400:	1000041e 	bne	r2,zero,280c414 <alt_dev_llist_insert+0x34>
 280c404:	e0bffd17 	ldw	r2,-12(fp)
 280c408:	10800217 	ldw	r2,8(r2)
 280c40c:	1004c03a 	cmpne	r2,r2,zero
 280c410:	1000071e 	bne	r2,zero,280c430 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 280c414:	280c4940 	call	280c494 <alt_get_errno>
 280c418:	1007883a 	mov	r3,r2
 280c41c:	00800584 	movi	r2,22
 280c420:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 280c424:	00bffa84 	movi	r2,-22
 280c428:	e0bfff15 	stw	r2,-4(fp)
 280c42c:	00001306 	br	280c47c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 280c430:	e0fffd17 	ldw	r3,-12(fp)
 280c434:	e0bffe17 	ldw	r2,-8(fp)
 280c438:	e0bffb15 	stw	r2,-20(fp)
 280c43c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 280c440:	e0fffc17 	ldw	r3,-16(fp)
 280c444:	e0bffb17 	ldw	r2,-20(fp)
 280c448:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 280c44c:	e0bffb17 	ldw	r2,-20(fp)
 280c450:	10c00017 	ldw	r3,0(r2)
 280c454:	e0bffc17 	ldw	r2,-16(fp)
 280c458:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 280c45c:	e0bffb17 	ldw	r2,-20(fp)
 280c460:	10c00017 	ldw	r3,0(r2)
 280c464:	e0bffc17 	ldw	r2,-16(fp)
 280c468:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 280c46c:	e0fffb17 	ldw	r3,-20(fp)
 280c470:	e0bffc17 	ldw	r2,-16(fp)
 280c474:	18800015 	stw	r2,0(r3)

  return 0;  
 280c478:	e03fff15 	stw	zero,-4(fp)
 280c47c:	e0bfff17 	ldw	r2,-4(fp)
}
 280c480:	e037883a 	mov	sp,fp
 280c484:	dfc00117 	ldw	ra,4(sp)
 280c488:	df000017 	ldw	fp,0(sp)
 280c48c:	dec00204 	addi	sp,sp,8
 280c490:	f800283a 	ret

0280c494 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 280c494:	defffd04 	addi	sp,sp,-12
 280c498:	dfc00215 	stw	ra,8(sp)
 280c49c:	df000115 	stw	fp,4(sp)
 280c4a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 280c4a4:	0080a074 	movhi	r2,641
 280c4a8:	10bd4504 	addi	r2,r2,-2796
 280c4ac:	10800017 	ldw	r2,0(r2)
 280c4b0:	1005003a 	cmpeq	r2,r2,zero
 280c4b4:	1000061e 	bne	r2,zero,280c4d0 <alt_get_errno+0x3c>
 280c4b8:	0080a074 	movhi	r2,641
 280c4bc:	10bd4504 	addi	r2,r2,-2796
 280c4c0:	10800017 	ldw	r2,0(r2)
 280c4c4:	103ee83a 	callr	r2
 280c4c8:	e0bfff15 	stw	r2,-4(fp)
 280c4cc:	00000306 	br	280c4dc <alt_get_errno+0x48>
 280c4d0:	0080a074 	movhi	r2,641
 280c4d4:	10842604 	addi	r2,r2,4248
 280c4d8:	e0bfff15 	stw	r2,-4(fp)
 280c4dc:	e0bfff17 	ldw	r2,-4(fp)
}
 280c4e0:	e037883a 	mov	sp,fp
 280c4e4:	dfc00117 	ldw	ra,4(sp)
 280c4e8:	df000017 	ldw	fp,0(sp)
 280c4ec:	dec00204 	addi	sp,sp,8
 280c4f0:	f800283a 	ret

0280c4f4 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
 280c4f4:	defffc04 	addi	sp,sp,-16
 280c4f8:	dfc00315 	stw	ra,12(sp)
 280c4fc:	df000215 	stw	fp,8(sp)
 280c500:	df000204 	addi	fp,sp,8
 280c504:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
 280c508:	e13fff17 	ldw	r4,-4(fp)
 280c50c:	d1600d04 	addi	r5,gp,-32716
 280c510:	280c72c0 	call	280c72c <alt_find_dev>
 280c514:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
 280c518:	e0bffe17 	ldw	r2,-8(fp)
 280c51c:	1004c03a 	cmpne	r2,r2,zero
 280c520:	1000041e 	bne	r2,zero,280c534 <alt_dma_rxchan_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 280c524:	280c54c0 	call	280c54c <alt_get_errno>
 280c528:	1007883a 	mov	r3,r2
 280c52c:	008004c4 	movi	r2,19
 280c530:	18800015 	stw	r2,0(r3)
  }

  return dev;
 280c534:	e0bffe17 	ldw	r2,-8(fp)
}
 280c538:	e037883a 	mov	sp,fp
 280c53c:	dfc00117 	ldw	ra,4(sp)
 280c540:	df000017 	ldw	fp,0(sp)
 280c544:	dec00204 	addi	sp,sp,8
 280c548:	f800283a 	ret

0280c54c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 280c54c:	defffd04 	addi	sp,sp,-12
 280c550:	dfc00215 	stw	ra,8(sp)
 280c554:	df000115 	stw	fp,4(sp)
 280c558:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 280c55c:	0080a074 	movhi	r2,641
 280c560:	10bd4504 	addi	r2,r2,-2796
 280c564:	10800017 	ldw	r2,0(r2)
 280c568:	1005003a 	cmpeq	r2,r2,zero
 280c56c:	1000061e 	bne	r2,zero,280c588 <alt_get_errno+0x3c>
 280c570:	0080a074 	movhi	r2,641
 280c574:	10bd4504 	addi	r2,r2,-2796
 280c578:	10800017 	ldw	r2,0(r2)
 280c57c:	103ee83a 	callr	r2
 280c580:	e0bfff15 	stw	r2,-4(fp)
 280c584:	00000306 	br	280c594 <alt_get_errno+0x48>
 280c588:	0080a074 	movhi	r2,641
 280c58c:	10842604 	addi	r2,r2,4248
 280c590:	e0bfff15 	stw	r2,-4(fp)
 280c594:	e0bfff17 	ldw	r2,-4(fp)
}
 280c598:	e037883a 	mov	sp,fp
 280c59c:	dfc00117 	ldw	ra,4(sp)
 280c5a0:	df000017 	ldw	fp,0(sp)
 280c5a4:	dec00204 	addi	sp,sp,8
 280c5a8:	f800283a 	ret

0280c5ac <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
 280c5ac:	defffc04 	addi	sp,sp,-16
 280c5b0:	dfc00315 	stw	ra,12(sp)
 280c5b4:	df000215 	stw	fp,8(sp)
 280c5b8:	df000204 	addi	fp,sp,8
 280c5bc:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
 280c5c0:	e13fff17 	ldw	r4,-4(fp)
 280c5c4:	d1600f04 	addi	r5,gp,-32708
 280c5c8:	280c72c0 	call	280c72c <alt_find_dev>
 280c5cc:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
 280c5d0:	e0bffe17 	ldw	r2,-8(fp)
 280c5d4:	1004c03a 	cmpne	r2,r2,zero
 280c5d8:	1000041e 	bne	r2,zero,280c5ec <alt_dma_txchan_open+0x40>
  {
    ALT_ERRNO = ENODEV;
 280c5dc:	280c6040 	call	280c604 <alt_get_errno>
 280c5e0:	1007883a 	mov	r3,r2
 280c5e4:	008004c4 	movi	r2,19
 280c5e8:	18800015 	stw	r2,0(r3)
  }

  return dev;
 280c5ec:	e0bffe17 	ldw	r2,-8(fp)
}
 280c5f0:	e037883a 	mov	sp,fp
 280c5f4:	dfc00117 	ldw	ra,4(sp)
 280c5f8:	df000017 	ldw	fp,0(sp)
 280c5fc:	dec00204 	addi	sp,sp,8
 280c600:	f800283a 	ret

0280c604 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 280c604:	defffd04 	addi	sp,sp,-12
 280c608:	dfc00215 	stw	ra,8(sp)
 280c60c:	df000115 	stw	fp,4(sp)
 280c610:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 280c614:	0080a074 	movhi	r2,641
 280c618:	10bd4504 	addi	r2,r2,-2796
 280c61c:	10800017 	ldw	r2,0(r2)
 280c620:	1005003a 	cmpeq	r2,r2,zero
 280c624:	1000061e 	bne	r2,zero,280c640 <alt_get_errno+0x3c>
 280c628:	0080a074 	movhi	r2,641
 280c62c:	10bd4504 	addi	r2,r2,-2796
 280c630:	10800017 	ldw	r2,0(r2)
 280c634:	103ee83a 	callr	r2
 280c638:	e0bfff15 	stw	r2,-4(fp)
 280c63c:	00000306 	br	280c64c <alt_get_errno+0x48>
 280c640:	0080a074 	movhi	r2,641
 280c644:	10842604 	addi	r2,r2,4248
 280c648:	e0bfff15 	stw	r2,-4(fp)
 280c64c:	e0bfff17 	ldw	r2,-4(fp)
}
 280c650:	e037883a 	mov	sp,fp
 280c654:	dfc00117 	ldw	ra,4(sp)
 280c658:	df000017 	ldw	fp,0(sp)
 280c65c:	dec00204 	addi	sp,sp,8
 280c660:	f800283a 	ret

0280c664 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 280c664:	defffd04 	addi	sp,sp,-12
 280c668:	dfc00215 	stw	ra,8(sp)
 280c66c:	df000115 	stw	fp,4(sp)
 280c670:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 280c674:	00bfff04 	movi	r2,-4
 280c678:	00c0a074 	movhi	r3,641
 280c67c:	18f5a704 	addi	r3,r3,-10596
 280c680:	1885883a 	add	r2,r3,r2
 280c684:	e0bfff15 	stw	r2,-4(fp)
 280c688:	00000606 	br	280c6a4 <_do_ctors+0x40>
        (*ctor) (); 
 280c68c:	e0bfff17 	ldw	r2,-4(fp)
 280c690:	10800017 	ldw	r2,0(r2)
 280c694:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 280c698:	e0bfff17 	ldw	r2,-4(fp)
 280c69c:	10bfff04 	addi	r2,r2,-4
 280c6a0:	e0bfff15 	stw	r2,-4(fp)
 280c6a4:	e0ffff17 	ldw	r3,-4(fp)
 280c6a8:	0080a074 	movhi	r2,641
 280c6ac:	10b5a604 	addi	r2,r2,-10600
 280c6b0:	18bff62e 	bgeu	r3,r2,280c68c <_do_ctors+0x28>
        (*ctor) (); 
}
 280c6b4:	e037883a 	mov	sp,fp
 280c6b8:	dfc00117 	ldw	ra,4(sp)
 280c6bc:	df000017 	ldw	fp,0(sp)
 280c6c0:	dec00204 	addi	sp,sp,8
 280c6c4:	f800283a 	ret

0280c6c8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 280c6c8:	defffd04 	addi	sp,sp,-12
 280c6cc:	dfc00215 	stw	ra,8(sp)
 280c6d0:	df000115 	stw	fp,4(sp)
 280c6d4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 280c6d8:	00bfff04 	movi	r2,-4
 280c6dc:	00c0a074 	movhi	r3,641
 280c6e0:	18f5a704 	addi	r3,r3,-10596
 280c6e4:	1885883a 	add	r2,r3,r2
 280c6e8:	e0bfff15 	stw	r2,-4(fp)
 280c6ec:	00000606 	br	280c708 <_do_dtors+0x40>
        (*dtor) (); 
 280c6f0:	e0bfff17 	ldw	r2,-4(fp)
 280c6f4:	10800017 	ldw	r2,0(r2)
 280c6f8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 280c6fc:	e0bfff17 	ldw	r2,-4(fp)
 280c700:	10bfff04 	addi	r2,r2,-4
 280c704:	e0bfff15 	stw	r2,-4(fp)
 280c708:	e0ffff17 	ldw	r3,-4(fp)
 280c70c:	0080a074 	movhi	r2,641
 280c710:	10b5a704 	addi	r2,r2,-10596
 280c714:	18bff62e 	bgeu	r3,r2,280c6f0 <_do_dtors+0x28>
        (*dtor) (); 
}
 280c718:	e037883a 	mov	sp,fp
 280c71c:	dfc00117 	ldw	ra,4(sp)
 280c720:	df000017 	ldw	fp,0(sp)
 280c724:	dec00204 	addi	sp,sp,8
 280c728:	f800283a 	ret

0280c72c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 280c72c:	defff904 	addi	sp,sp,-28
 280c730:	dfc00615 	stw	ra,24(sp)
 280c734:	df000515 	stw	fp,20(sp)
 280c738:	df000504 	addi	fp,sp,20
 280c73c:	e13ffd15 	stw	r4,-12(fp)
 280c740:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 280c744:	e0bffe17 	ldw	r2,-8(fp)
 280c748:	10800017 	ldw	r2,0(r2)
 280c74c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 280c750:	e13ffd17 	ldw	r4,-12(fp)
 280c754:	28004440 	call	2800444 <strlen>
 280c758:	10800044 	addi	r2,r2,1
 280c75c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 280c760:	00000d06 	br	280c798 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 280c764:	e0bffc17 	ldw	r2,-16(fp)
 280c768:	11000217 	ldw	r4,8(r2)
 280c76c:	e1bffb17 	ldw	r6,-20(fp)
 280c770:	e17ffd17 	ldw	r5,-12(fp)
 280c774:	280d2dc0 	call	280d2dc <memcmp>
 280c778:	1004c03a 	cmpne	r2,r2,zero
 280c77c:	1000031e 	bne	r2,zero,280c78c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 280c780:	e0bffc17 	ldw	r2,-16(fp)
 280c784:	e0bfff15 	stw	r2,-4(fp)
 280c788:	00000706 	br	280c7a8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 280c78c:	e0bffc17 	ldw	r2,-16(fp)
 280c790:	10800017 	ldw	r2,0(r2)
 280c794:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 280c798:	e0fffe17 	ldw	r3,-8(fp)
 280c79c:	e0bffc17 	ldw	r2,-16(fp)
 280c7a0:	10fff01e 	bne	r2,r3,280c764 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 280c7a4:	e03fff15 	stw	zero,-4(fp)
 280c7a8:	e0bfff17 	ldw	r2,-4(fp)
}
 280c7ac:	e037883a 	mov	sp,fp
 280c7b0:	dfc00117 	ldw	ra,4(sp)
 280c7b4:	df000017 	ldw	fp,0(sp)
 280c7b8:	dec00204 	addi	sp,sp,8
 280c7bc:	f800283a 	ret

0280c7c0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 280c7c0:	deffff04 	addi	sp,sp,-4
 280c7c4:	df000015 	stw	fp,0(sp)
 280c7c8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 280c7cc:	e037883a 	mov	sp,fp
 280c7d0:	df000017 	ldw	fp,0(sp)
 280c7d4:	dec00104 	addi	sp,sp,4
 280c7d8:	f800283a 	ret

0280c7dc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 280c7dc:	defff904 	addi	sp,sp,-28
 280c7e0:	dfc00615 	stw	ra,24(sp)
 280c7e4:	df000515 	stw	fp,20(sp)
 280c7e8:	df000504 	addi	fp,sp,20
 280c7ec:	e13ffc15 	stw	r4,-16(fp)
 280c7f0:	e17ffd15 	stw	r5,-12(fp)
 280c7f4:	e1bffe15 	stw	r6,-8(fp)
 280c7f8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 280c7fc:	e0800217 	ldw	r2,8(fp)
 280c800:	d8800015 	stw	r2,0(sp)
 280c804:	e13ffc17 	ldw	r4,-16(fp)
 280c808:	e17ffd17 	ldw	r5,-12(fp)
 280c80c:	e1bffe17 	ldw	r6,-8(fp)
 280c810:	e1ffff17 	ldw	r7,-4(fp)
 280c814:	280c9b00 	call	280c9b0 <alt_iic_isr_register>
}  
 280c818:	e037883a 	mov	sp,fp
 280c81c:	dfc00117 	ldw	ra,4(sp)
 280c820:	df000017 	ldw	fp,0(sp)
 280c824:	dec00204 	addi	sp,sp,8
 280c828:	f800283a 	ret

0280c82c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 280c82c:	defff904 	addi	sp,sp,-28
 280c830:	df000615 	stw	fp,24(sp)
 280c834:	df000604 	addi	fp,sp,24
 280c838:	e13ffe15 	stw	r4,-8(fp)
 280c83c:	e17fff15 	stw	r5,-4(fp)
 280c840:	e0bfff17 	ldw	r2,-4(fp)
 280c844:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 280c848:	0005303a 	rdctl	r2,status
 280c84c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 280c850:	e0fffb17 	ldw	r3,-20(fp)
 280c854:	00bfff84 	movi	r2,-2
 280c858:	1884703a 	and	r2,r3,r2
 280c85c:	1001703a 	wrctl	status,r2
  
  return context;
 280c860:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 280c864:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 280c868:	e0fffc17 	ldw	r3,-16(fp)
 280c86c:	00800044 	movi	r2,1
 280c870:	10c4983a 	sll	r2,r2,r3
 280c874:	1007883a 	mov	r3,r2
 280c878:	0080a074 	movhi	r2,641
 280c87c:	10842c04 	addi	r2,r2,4272
 280c880:	10800017 	ldw	r2,0(r2)
 280c884:	1886b03a 	or	r3,r3,r2
 280c888:	0080a074 	movhi	r2,641
 280c88c:	10842c04 	addi	r2,r2,4272
 280c890:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 280c894:	0080a074 	movhi	r2,641
 280c898:	10842c04 	addi	r2,r2,4272
 280c89c:	10800017 	ldw	r2,0(r2)
 280c8a0:	100170fa 	wrctl	ienable,r2
 280c8a4:	e0bffd17 	ldw	r2,-12(fp)
 280c8a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 280c8ac:	e0bffa17 	ldw	r2,-24(fp)
 280c8b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 280c8b4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 280c8b8:	e037883a 	mov	sp,fp
 280c8bc:	df000017 	ldw	fp,0(sp)
 280c8c0:	dec00104 	addi	sp,sp,4
 280c8c4:	f800283a 	ret

0280c8c8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 280c8c8:	defff904 	addi	sp,sp,-28
 280c8cc:	df000615 	stw	fp,24(sp)
 280c8d0:	df000604 	addi	fp,sp,24
 280c8d4:	e13ffe15 	stw	r4,-8(fp)
 280c8d8:	e17fff15 	stw	r5,-4(fp)
 280c8dc:	e0bfff17 	ldw	r2,-4(fp)
 280c8e0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 280c8e4:	0005303a 	rdctl	r2,status
 280c8e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 280c8ec:	e0fffb17 	ldw	r3,-20(fp)
 280c8f0:	00bfff84 	movi	r2,-2
 280c8f4:	1884703a 	and	r2,r3,r2
 280c8f8:	1001703a 	wrctl	status,r2
  
  return context;
 280c8fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 280c900:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 280c904:	e0fffc17 	ldw	r3,-16(fp)
 280c908:	00800044 	movi	r2,1
 280c90c:	10c4983a 	sll	r2,r2,r3
 280c910:	0084303a 	nor	r2,zero,r2
 280c914:	1007883a 	mov	r3,r2
 280c918:	0080a074 	movhi	r2,641
 280c91c:	10842c04 	addi	r2,r2,4272
 280c920:	10800017 	ldw	r2,0(r2)
 280c924:	1886703a 	and	r3,r3,r2
 280c928:	0080a074 	movhi	r2,641
 280c92c:	10842c04 	addi	r2,r2,4272
 280c930:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 280c934:	0080a074 	movhi	r2,641
 280c938:	10842c04 	addi	r2,r2,4272
 280c93c:	10800017 	ldw	r2,0(r2)
 280c940:	100170fa 	wrctl	ienable,r2
 280c944:	e0bffd17 	ldw	r2,-12(fp)
 280c948:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 280c94c:	e0bffa17 	ldw	r2,-24(fp)
 280c950:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 280c954:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 280c958:	e037883a 	mov	sp,fp
 280c95c:	df000017 	ldw	fp,0(sp)
 280c960:	dec00104 	addi	sp,sp,4
 280c964:	f800283a 	ret

0280c968 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 280c968:	defffc04 	addi	sp,sp,-16
 280c96c:	df000315 	stw	fp,12(sp)
 280c970:	df000304 	addi	fp,sp,12
 280c974:	e13ffe15 	stw	r4,-8(fp)
 280c978:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 280c97c:	000530fa 	rdctl	r2,ienable
 280c980:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 280c984:	e0ffff17 	ldw	r3,-4(fp)
 280c988:	00800044 	movi	r2,1
 280c98c:	10c4983a 	sll	r2,r2,r3
 280c990:	1007883a 	mov	r3,r2
 280c994:	e0bffd17 	ldw	r2,-12(fp)
 280c998:	1884703a 	and	r2,r3,r2
 280c99c:	1004c03a 	cmpne	r2,r2,zero
}
 280c9a0:	e037883a 	mov	sp,fp
 280c9a4:	df000017 	ldw	fp,0(sp)
 280c9a8:	dec00104 	addi	sp,sp,4
 280c9ac:	f800283a 	ret

0280c9b0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 280c9b0:	defff404 	addi	sp,sp,-48
 280c9b4:	dfc00b15 	stw	ra,44(sp)
 280c9b8:	df000a15 	stw	fp,40(sp)
 280c9bc:	df000a04 	addi	fp,sp,40
 280c9c0:	e13ffb15 	stw	r4,-20(fp)
 280c9c4:	e17ffc15 	stw	r5,-16(fp)
 280c9c8:	e1bffd15 	stw	r6,-12(fp)
 280c9cc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 280c9d0:	00bffa84 	movi	r2,-22
 280c9d4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 280c9d8:	e0bffc17 	ldw	r2,-16(fp)
 280c9dc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 280c9e0:	e0bff917 	ldw	r2,-28(fp)
 280c9e4:	10800808 	cmpgei	r2,r2,32
 280c9e8:	1000291e 	bne	r2,zero,280ca90 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 280c9ec:	0005303a 	rdctl	r2,status
 280c9f0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 280c9f4:	e0fff717 	ldw	r3,-36(fp)
 280c9f8:	00bfff84 	movi	r2,-2
 280c9fc:	1884703a 	and	r2,r3,r2
 280ca00:	1001703a 	wrctl	status,r2
  
  return context;
 280ca04:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 280ca08:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 280ca0c:	e0bff917 	ldw	r2,-28(fp)
 280ca10:	00c0a074 	movhi	r3,641
 280ca14:	18c43904 	addi	r3,r3,4324
 280ca18:	100490fa 	slli	r2,r2,3
 280ca1c:	10c7883a 	add	r3,r2,r3
 280ca20:	e0bffd17 	ldw	r2,-12(fp)
 280ca24:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 280ca28:	e0bff917 	ldw	r2,-28(fp)
 280ca2c:	00c0a074 	movhi	r3,641
 280ca30:	18c43904 	addi	r3,r3,4324
 280ca34:	100490fa 	slli	r2,r2,3
 280ca38:	10c5883a 	add	r2,r2,r3
 280ca3c:	10c00104 	addi	r3,r2,4
 280ca40:	e0bffe17 	ldw	r2,-8(fp)
 280ca44:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 280ca48:	e0bffd17 	ldw	r2,-12(fp)
 280ca4c:	1005003a 	cmpeq	r2,r2,zero
 280ca50:	1000051e 	bne	r2,zero,280ca68 <alt_iic_isr_register+0xb8>
 280ca54:	e17ff917 	ldw	r5,-28(fp)
 280ca58:	e13ffb17 	ldw	r4,-20(fp)
 280ca5c:	280c82c0 	call	280c82c <alt_ic_irq_enable>
 280ca60:	e0bfff15 	stw	r2,-4(fp)
 280ca64:	00000406 	br	280ca78 <alt_iic_isr_register+0xc8>
 280ca68:	e17ff917 	ldw	r5,-28(fp)
 280ca6c:	e13ffb17 	ldw	r4,-20(fp)
 280ca70:	280c8c80 	call	280c8c8 <alt_ic_irq_disable>
 280ca74:	e0bfff15 	stw	r2,-4(fp)
 280ca78:	e0bfff17 	ldw	r2,-4(fp)
 280ca7c:	e0bffa15 	stw	r2,-24(fp)
 280ca80:	e0bff817 	ldw	r2,-32(fp)
 280ca84:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 280ca88:	e0bff617 	ldw	r2,-40(fp)
 280ca8c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 280ca90:	e0bffa17 	ldw	r2,-24(fp)
}
 280ca94:	e037883a 	mov	sp,fp
 280ca98:	dfc00117 	ldw	ra,4(sp)
 280ca9c:	df000017 	ldw	fp,0(sp)
 280caa0:	dec00204 	addi	sp,sp,8
 280caa4:	f800283a 	ret

0280caa8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 280caa8:	defff804 	addi	sp,sp,-32
 280caac:	dfc00715 	stw	ra,28(sp)
 280cab0:	df000615 	stw	fp,24(sp)
 280cab4:	dc000515 	stw	r16,20(sp)
 280cab8:	df000504 	addi	fp,sp,20
 280cabc:	e13ffc15 	stw	r4,-16(fp)
 280cac0:	e17ffd15 	stw	r5,-12(fp)
 280cac4:	e1bffe15 	stw	r6,-8(fp)
 280cac8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 280cacc:	e13ffd17 	ldw	r4,-12(fp)
 280cad0:	e17ffe17 	ldw	r5,-8(fp)
 280cad4:	e1bfff17 	ldw	r6,-4(fp)
 280cad8:	280ccf00 	call	280ccf0 <open>
 280cadc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 280cae0:	e0bffb17 	ldw	r2,-20(fp)
 280cae4:	1004803a 	cmplt	r2,r2,zero
 280cae8:	10001f1e 	bne	r2,zero,280cb68 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 280caec:	e13ffb17 	ldw	r4,-20(fp)
 280caf0:	0400a074 	movhi	r16,641
 280caf4:	84388b04 	addi	r16,r16,-7636
 280caf8:	01400304 	movi	r5,12
 280cafc:	28096940 	call	2809694 <__mulsi3>
 280cb00:	1405883a 	add	r2,r2,r16
 280cb04:	10c00017 	ldw	r3,0(r2)
 280cb08:	e0bffc17 	ldw	r2,-16(fp)
 280cb0c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 280cb10:	e13ffb17 	ldw	r4,-20(fp)
 280cb14:	0400a074 	movhi	r16,641
 280cb18:	84388b04 	addi	r16,r16,-7636
 280cb1c:	01400304 	movi	r5,12
 280cb20:	28096940 	call	2809694 <__mulsi3>
 280cb24:	1405883a 	add	r2,r2,r16
 280cb28:	10800104 	addi	r2,r2,4
 280cb2c:	10c00017 	ldw	r3,0(r2)
 280cb30:	e0bffc17 	ldw	r2,-16(fp)
 280cb34:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 280cb38:	e13ffb17 	ldw	r4,-20(fp)
 280cb3c:	0400a074 	movhi	r16,641
 280cb40:	84388b04 	addi	r16,r16,-7636
 280cb44:	01400304 	movi	r5,12
 280cb48:	28096940 	call	2809694 <__mulsi3>
 280cb4c:	1405883a 	add	r2,r2,r16
 280cb50:	10800204 	addi	r2,r2,8
 280cb54:	10c00017 	ldw	r3,0(r2)
 280cb58:	e0bffc17 	ldw	r2,-16(fp)
 280cb5c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 280cb60:	e13ffb17 	ldw	r4,-20(fp)
 280cb64:	280a5dc0 	call	280a5dc <alt_release_fd>
  }
} 
 280cb68:	e037883a 	mov	sp,fp
 280cb6c:	dfc00217 	ldw	ra,8(sp)
 280cb70:	df000117 	ldw	fp,4(sp)
 280cb74:	dc000017 	ldw	r16,0(sp)
 280cb78:	dec00304 	addi	sp,sp,12
 280cb7c:	f800283a 	ret

0280cb80 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 280cb80:	defffb04 	addi	sp,sp,-20
 280cb84:	dfc00415 	stw	ra,16(sp)
 280cb88:	df000315 	stw	fp,12(sp)
 280cb8c:	df000304 	addi	fp,sp,12
 280cb90:	e13ffd15 	stw	r4,-12(fp)
 280cb94:	e17ffe15 	stw	r5,-8(fp)
 280cb98:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 280cb9c:	0100a074 	movhi	r4,641
 280cba0:	21388e04 	addi	r4,r4,-7624
 280cba4:	e17ffd17 	ldw	r5,-12(fp)
 280cba8:	01800044 	movi	r6,1
 280cbac:	01c07fc4 	movi	r7,511
 280cbb0:	280caa80 	call	280caa8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 280cbb4:	0100a074 	movhi	r4,641
 280cbb8:	21388b04 	addi	r4,r4,-7636
 280cbbc:	e17ffe17 	ldw	r5,-8(fp)
 280cbc0:	000d883a 	mov	r6,zero
 280cbc4:	01c07fc4 	movi	r7,511
 280cbc8:	280caa80 	call	280caa8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 280cbcc:	0100a074 	movhi	r4,641
 280cbd0:	21389104 	addi	r4,r4,-7612
 280cbd4:	e17fff17 	ldw	r5,-4(fp)
 280cbd8:	01800044 	movi	r6,1
 280cbdc:	01c07fc4 	movi	r7,511
 280cbe0:	280caa80 	call	280caa8 <alt_open_fd>
}  
 280cbe4:	e037883a 	mov	sp,fp
 280cbe8:	dfc00117 	ldw	ra,4(sp)
 280cbec:	df000017 	ldw	fp,0(sp)
 280cbf0:	dec00204 	addi	sp,sp,8
 280cbf4:	f800283a 	ret

0280cbf8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 280cbf8:	defffa04 	addi	sp,sp,-24
 280cbfc:	dfc00515 	stw	ra,20(sp)
 280cc00:	df000415 	stw	fp,16(sp)
 280cc04:	dc000315 	stw	r16,12(sp)
 280cc08:	df000304 	addi	fp,sp,12
 280cc0c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 280cc10:	e0bffe17 	ldw	r2,-8(fp)
 280cc14:	10800217 	ldw	r2,8(r2)
 280cc18:	10d00034 	orhi	r3,r2,16384
 280cc1c:	e0bffe17 	ldw	r2,-8(fp)
 280cc20:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 280cc24:	e03ffd15 	stw	zero,-12(fp)
 280cc28:	00002306 	br	280ccb8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 280cc2c:	e13ffd17 	ldw	r4,-12(fp)
 280cc30:	0400a074 	movhi	r16,641
 280cc34:	84388b04 	addi	r16,r16,-7636
 280cc38:	01400304 	movi	r5,12
 280cc3c:	28096940 	call	2809694 <__mulsi3>
 280cc40:	1405883a 	add	r2,r2,r16
 280cc44:	10c00017 	ldw	r3,0(r2)
 280cc48:	e0bffe17 	ldw	r2,-8(fp)
 280cc4c:	10800017 	ldw	r2,0(r2)
 280cc50:	1880161e 	bne	r3,r2,280ccac <alt_file_locked+0xb4>
 280cc54:	e13ffd17 	ldw	r4,-12(fp)
 280cc58:	0400a074 	movhi	r16,641
 280cc5c:	84388b04 	addi	r16,r16,-7636
 280cc60:	01400304 	movi	r5,12
 280cc64:	28096940 	call	2809694 <__mulsi3>
 280cc68:	1405883a 	add	r2,r2,r16
 280cc6c:	10800204 	addi	r2,r2,8
 280cc70:	10800017 	ldw	r2,0(r2)
 280cc74:	1004403a 	cmpge	r2,r2,zero
 280cc78:	10000c1e 	bne	r2,zero,280ccac <alt_file_locked+0xb4>
 280cc7c:	e13ffd17 	ldw	r4,-12(fp)
 280cc80:	01400304 	movi	r5,12
 280cc84:	28096940 	call	2809694 <__mulsi3>
 280cc88:	1007883a 	mov	r3,r2
 280cc8c:	0080a074 	movhi	r2,641
 280cc90:	10b88b04 	addi	r2,r2,-7636
 280cc94:	1887883a 	add	r3,r3,r2
 280cc98:	e0bffe17 	ldw	r2,-8(fp)
 280cc9c:	18800326 	beq	r3,r2,280ccac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 280cca0:	00bffcc4 	movi	r2,-13
 280cca4:	e0bfff15 	stw	r2,-4(fp)
 280cca8:	00000a06 	br	280ccd4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 280ccac:	e0bffd17 	ldw	r2,-12(fp)
 280ccb0:	10800044 	addi	r2,r2,1
 280ccb4:	e0bffd15 	stw	r2,-12(fp)
 280ccb8:	0080a074 	movhi	r2,641
 280ccbc:	10bd4404 	addi	r2,r2,-2800
 280ccc0:	10800017 	ldw	r2,0(r2)
 280ccc4:	1007883a 	mov	r3,r2
 280ccc8:	e0bffd17 	ldw	r2,-12(fp)
 280cccc:	18bfd72e 	bgeu	r3,r2,280cc2c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 280ccd0:	e03fff15 	stw	zero,-4(fp)
 280ccd4:	e0bfff17 	ldw	r2,-4(fp)
}
 280ccd8:	e037883a 	mov	sp,fp
 280ccdc:	dfc00217 	ldw	ra,8(sp)
 280cce0:	df000117 	ldw	fp,4(sp)
 280cce4:	dc000017 	ldw	r16,0(sp)
 280cce8:	dec00304 	addi	sp,sp,12
 280ccec:	f800283a 	ret

0280ccf0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 280ccf0:	defff404 	addi	sp,sp,-48
 280ccf4:	dfc00b15 	stw	ra,44(sp)
 280ccf8:	df000a15 	stw	fp,40(sp)
 280ccfc:	df000a04 	addi	fp,sp,40
 280cd00:	e13ffb15 	stw	r4,-20(fp)
 280cd04:	e17ffc15 	stw	r5,-16(fp)
 280cd08:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 280cd0c:	00bfffc4 	movi	r2,-1
 280cd10:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 280cd14:	00bffb44 	movi	r2,-19
 280cd18:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 280cd1c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 280cd20:	e13ffb17 	ldw	r4,-20(fp)
 280cd24:	0140a074 	movhi	r5,641
 280cd28:	297d4204 	addi	r5,r5,-2808
 280cd2c:	280c72c0 	call	280c72c <alt_find_dev>
 280cd30:	e0bffa15 	stw	r2,-24(fp)
 280cd34:	e0bffa17 	ldw	r2,-24(fp)
 280cd38:	1004c03a 	cmpne	r2,r2,zero
 280cd3c:	1000051e 	bne	r2,zero,280cd54 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 280cd40:	e13ffb17 	ldw	r4,-20(fp)
 280cd44:	280d0a00 	call	280d0a0 <alt_find_file>
 280cd48:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 280cd4c:	00800044 	movi	r2,1
 280cd50:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 280cd54:	e0bffa17 	ldw	r2,-24(fp)
 280cd58:	1005003a 	cmpeq	r2,r2,zero
 280cd5c:	1000311e 	bne	r2,zero,280ce24 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 280cd60:	e13ffa17 	ldw	r4,-24(fp)
 280cd64:	280d1c00 	call	280d1c0 <alt_get_fd>
 280cd68:	e0bff815 	stw	r2,-32(fp)
 280cd6c:	e0bff817 	ldw	r2,-32(fp)
 280cd70:	1004403a 	cmpge	r2,r2,zero
 280cd74:	1000031e 	bne	r2,zero,280cd84 <open+0x94>
    {
      status = index;
 280cd78:	e0bff817 	ldw	r2,-32(fp)
 280cd7c:	e0bff715 	stw	r2,-36(fp)
 280cd80:	00002a06 	br	280ce2c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 280cd84:	e13ff817 	ldw	r4,-32(fp)
 280cd88:	01400304 	movi	r5,12
 280cd8c:	28096940 	call	2809694 <__mulsi3>
 280cd90:	1007883a 	mov	r3,r2
 280cd94:	0080a074 	movhi	r2,641
 280cd98:	10b88b04 	addi	r2,r2,-7636
 280cd9c:	1885883a 	add	r2,r3,r2
 280cda0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 280cda4:	e0fffc17 	ldw	r3,-16(fp)
 280cda8:	00900034 	movhi	r2,16384
 280cdac:	10bfffc4 	addi	r2,r2,-1
 280cdb0:	1886703a 	and	r3,r3,r2
 280cdb4:	e0bff917 	ldw	r2,-28(fp)
 280cdb8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 280cdbc:	e0bff617 	ldw	r2,-40(fp)
 280cdc0:	1004c03a 	cmpne	r2,r2,zero
 280cdc4:	1000061e 	bne	r2,zero,280cde0 <open+0xf0>
 280cdc8:	e13ff917 	ldw	r4,-28(fp)
 280cdcc:	280cbf80 	call	280cbf8 <alt_file_locked>
 280cdd0:	e0bff715 	stw	r2,-36(fp)
 280cdd4:	e0bff717 	ldw	r2,-36(fp)
 280cdd8:	1004803a 	cmplt	r2,r2,zero
 280cddc:	1000131e 	bne	r2,zero,280ce2c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 280cde0:	e0bffa17 	ldw	r2,-24(fp)
 280cde4:	10800317 	ldw	r2,12(r2)
 280cde8:	1005003a 	cmpeq	r2,r2,zero
 280cdec:	1000091e 	bne	r2,zero,280ce14 <open+0x124>
 280cdf0:	e0bffa17 	ldw	r2,-24(fp)
 280cdf4:	10800317 	ldw	r2,12(r2)
 280cdf8:	e13ff917 	ldw	r4,-28(fp)
 280cdfc:	e17ffb17 	ldw	r5,-20(fp)
 280ce00:	e1bffc17 	ldw	r6,-16(fp)
 280ce04:	e1fffd17 	ldw	r7,-12(fp)
 280ce08:	103ee83a 	callr	r2
 280ce0c:	e0bfff15 	stw	r2,-4(fp)
 280ce10:	00000106 	br	280ce18 <open+0x128>
 280ce14:	e03fff15 	stw	zero,-4(fp)
 280ce18:	e0bfff17 	ldw	r2,-4(fp)
 280ce1c:	e0bff715 	stw	r2,-36(fp)
 280ce20:	00000206 	br	280ce2c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 280ce24:	00bffb44 	movi	r2,-19
 280ce28:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 280ce2c:	e0bff717 	ldw	r2,-36(fp)
 280ce30:	1004403a 	cmpge	r2,r2,zero
 280ce34:	1000091e 	bne	r2,zero,280ce5c <open+0x16c>
  {
    alt_release_fd (index);  
 280ce38:	e13ff817 	ldw	r4,-32(fp)
 280ce3c:	280a5dc0 	call	280a5dc <alt_release_fd>
    ALT_ERRNO = -status;
 280ce40:	280ce7c0 	call	280ce7c <alt_get_errno>
 280ce44:	e0fff717 	ldw	r3,-36(fp)
 280ce48:	00c7c83a 	sub	r3,zero,r3
 280ce4c:	10c00015 	stw	r3,0(r2)
    return -1;
 280ce50:	00bfffc4 	movi	r2,-1
 280ce54:	e0bffe15 	stw	r2,-8(fp)
 280ce58:	00000206 	br	280ce64 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 280ce5c:	e0bff817 	ldw	r2,-32(fp)
 280ce60:	e0bffe15 	stw	r2,-8(fp)
 280ce64:	e0bffe17 	ldw	r2,-8(fp)
}
 280ce68:	e037883a 	mov	sp,fp
 280ce6c:	dfc00117 	ldw	ra,4(sp)
 280ce70:	df000017 	ldw	fp,0(sp)
 280ce74:	dec00204 	addi	sp,sp,8
 280ce78:	f800283a 	ret

0280ce7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 280ce7c:	defffd04 	addi	sp,sp,-12
 280ce80:	dfc00215 	stw	ra,8(sp)
 280ce84:	df000115 	stw	fp,4(sp)
 280ce88:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 280ce8c:	0080a074 	movhi	r2,641
 280ce90:	10bd4504 	addi	r2,r2,-2796
 280ce94:	10800017 	ldw	r2,0(r2)
 280ce98:	1005003a 	cmpeq	r2,r2,zero
 280ce9c:	1000061e 	bne	r2,zero,280ceb8 <alt_get_errno+0x3c>
 280cea0:	0080a074 	movhi	r2,641
 280cea4:	10bd4504 	addi	r2,r2,-2796
 280cea8:	10800017 	ldw	r2,0(r2)
 280ceac:	103ee83a 	callr	r2
 280ceb0:	e0bfff15 	stw	r2,-4(fp)
 280ceb4:	00000306 	br	280cec4 <alt_get_errno+0x48>
 280ceb8:	0080a074 	movhi	r2,641
 280cebc:	10842604 	addi	r2,r2,4248
 280cec0:	e0bfff15 	stw	r2,-4(fp)
 280cec4:	e0bfff17 	ldw	r2,-4(fp)
}
 280cec8:	e037883a 	mov	sp,fp
 280cecc:	dfc00117 	ldw	ra,4(sp)
 280ced0:	df000017 	ldw	fp,0(sp)
 280ced4:	dec00204 	addi	sp,sp,8
 280ced8:	f800283a 	ret

0280cedc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 280cedc:	defffa04 	addi	sp,sp,-24
 280cee0:	df000515 	stw	fp,20(sp)
 280cee4:	df000504 	addi	fp,sp,20
 280cee8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 280ceec:	0005303a 	rdctl	r2,status
 280cef0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 280cef4:	e0fffd17 	ldw	r3,-12(fp)
 280cef8:	00bfff84 	movi	r2,-2
 280cefc:	1884703a 	and	r2,r3,r2
 280cf00:	1001703a 	wrctl	status,r2
  
  return context;
 280cf04:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 280cf08:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 280cf0c:	e0bfff17 	ldw	r2,-4(fp)
 280cf10:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 280cf14:	e0bffc17 	ldw	r2,-16(fp)
 280cf18:	10c00017 	ldw	r3,0(r2)
 280cf1c:	e0bffc17 	ldw	r2,-16(fp)
 280cf20:	10800117 	ldw	r2,4(r2)
 280cf24:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 280cf28:	e0bffc17 	ldw	r2,-16(fp)
 280cf2c:	10c00117 	ldw	r3,4(r2)
 280cf30:	e0bffc17 	ldw	r2,-16(fp)
 280cf34:	10800017 	ldw	r2,0(r2)
 280cf38:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 280cf3c:	e0fffc17 	ldw	r3,-16(fp)
 280cf40:	e0bffc17 	ldw	r2,-16(fp)
 280cf44:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 280cf48:	e0fffc17 	ldw	r3,-16(fp)
 280cf4c:	e0bffc17 	ldw	r2,-16(fp)
 280cf50:	18800015 	stw	r2,0(r3)
 280cf54:	e0bffe17 	ldw	r2,-8(fp)
 280cf58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 280cf5c:	e0bffb17 	ldw	r2,-20(fp)
 280cf60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 280cf64:	e037883a 	mov	sp,fp
 280cf68:	df000017 	ldw	fp,0(sp)
 280cf6c:	dec00104 	addi	sp,sp,4
 280cf70:	f800283a 	ret

0280cf74 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 280cf74:	defffb04 	addi	sp,sp,-20
 280cf78:	dfc00415 	stw	ra,16(sp)
 280cf7c:	df000315 	stw	fp,12(sp)
 280cf80:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 280cf84:	d0a01217 	ldw	r2,-32696(gp)
 280cf88:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 280cf8c:	d0a6f417 	ldw	r2,-25648(gp)
 280cf90:	10800044 	addi	r2,r2,1
 280cf94:	d0a6f415 	stw	r2,-25648(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 280cf98:	00003106 	br	280d060 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 280cf9c:	e0bffe17 	ldw	r2,-8(fp)
 280cfa0:	10800017 	ldw	r2,0(r2)
 280cfa4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 280cfa8:	e0bffe17 	ldw	r2,-8(fp)
 280cfac:	10800403 	ldbu	r2,16(r2)
 280cfb0:	10803fcc 	andi	r2,r2,255
 280cfb4:	1005003a 	cmpeq	r2,r2,zero
 280cfb8:	1000051e 	bne	r2,zero,280cfd0 <alt_tick+0x5c>
 280cfbc:	d0a6f417 	ldw	r2,-25648(gp)
 280cfc0:	1004c03a 	cmpne	r2,r2,zero
 280cfc4:	1000021e 	bne	r2,zero,280cfd0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 280cfc8:	e0bffe17 	ldw	r2,-8(fp)
 280cfcc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 280cfd0:	e0bffe17 	ldw	r2,-8(fp)
 280cfd4:	10c00217 	ldw	r3,8(r2)
 280cfd8:	d0a6f417 	ldw	r2,-25648(gp)
 280cfdc:	10c01e36 	bltu	r2,r3,280d058 <alt_tick+0xe4>
 280cfe0:	e0bffe17 	ldw	r2,-8(fp)
 280cfe4:	10800403 	ldbu	r2,16(r2)
 280cfe8:	10803fcc 	andi	r2,r2,255
 280cfec:	1004c03a 	cmpne	r2,r2,zero
 280cff0:	1000191e 	bne	r2,zero,280d058 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 280cff4:	e0bffe17 	ldw	r2,-8(fp)
 280cff8:	10c00317 	ldw	r3,12(r2)
 280cffc:	e0bffe17 	ldw	r2,-8(fp)
 280d000:	11000517 	ldw	r4,20(r2)
 280d004:	183ee83a 	callr	r3
 280d008:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 280d00c:	e0bffd17 	ldw	r2,-12(fp)
 280d010:	1004c03a 	cmpne	r2,r2,zero
 280d014:	1000031e 	bne	r2,zero,280d024 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 280d018:	e13ffe17 	ldw	r4,-8(fp)
 280d01c:	280cedc0 	call	280cedc <alt_alarm_stop>
 280d020:	00000d06 	br	280d058 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 280d024:	e0bffe17 	ldw	r2,-8(fp)
 280d028:	10c00217 	ldw	r3,8(r2)
 280d02c:	e0bffd17 	ldw	r2,-12(fp)
 280d030:	1887883a 	add	r3,r3,r2
 280d034:	e0bffe17 	ldw	r2,-8(fp)
 280d038:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 280d03c:	e0bffe17 	ldw	r2,-8(fp)
 280d040:	10c00217 	ldw	r3,8(r2)
 280d044:	d0a6f417 	ldw	r2,-25648(gp)
 280d048:	1880032e 	bgeu	r3,r2,280d058 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 280d04c:	e0fffe17 	ldw	r3,-8(fp)
 280d050:	00800044 	movi	r2,1
 280d054:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 280d058:	e0bfff17 	ldw	r2,-4(fp)
 280d05c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 280d060:	d0e01204 	addi	r3,gp,-32696
 280d064:	e0bffe17 	ldw	r2,-8(fp)
 280d068:	10ffcc1e 	bne	r2,r3,280cf9c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 280d06c:	e037883a 	mov	sp,fp
 280d070:	dfc00117 	ldw	ra,4(sp)
 280d074:	df000017 	ldw	fp,0(sp)
 280d078:	dec00204 	addi	sp,sp,8
 280d07c:	f800283a 	ret

0280d080 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 280d080:	deffff04 	addi	sp,sp,-4
 280d084:	df000015 	stw	fp,0(sp)
 280d088:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 280d08c:	000170fa 	wrctl	ienable,zero
}
 280d090:	e037883a 	mov	sp,fp
 280d094:	df000017 	ldw	fp,0(sp)
 280d098:	dec00104 	addi	sp,sp,4
 280d09c:	f800283a 	ret

0280d0a0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 280d0a0:	defffa04 	addi	sp,sp,-24
 280d0a4:	dfc00515 	stw	ra,20(sp)
 280d0a8:	df000415 	stw	fp,16(sp)
 280d0ac:	df000404 	addi	fp,sp,16
 280d0b0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 280d0b4:	0080a074 	movhi	r2,641
 280d0b8:	10bd4004 	addi	r2,r2,-2816
 280d0bc:	10800017 	ldw	r2,0(r2)
 280d0c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 280d0c4:	00003306 	br	280d194 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 280d0c8:	e0bffd17 	ldw	r2,-12(fp)
 280d0cc:	11000217 	ldw	r4,8(r2)
 280d0d0:	28004440 	call	2800444 <strlen>
 280d0d4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 280d0d8:	e0bffd17 	ldw	r2,-12(fp)
 280d0dc:	10c00217 	ldw	r3,8(r2)
 280d0e0:	e0bffc17 	ldw	r2,-16(fp)
 280d0e4:	1885883a 	add	r2,r3,r2
 280d0e8:	10bfffc4 	addi	r2,r2,-1
 280d0ec:	10800003 	ldbu	r2,0(r2)
 280d0f0:	10803fcc 	andi	r2,r2,255
 280d0f4:	1080201c 	xori	r2,r2,128
 280d0f8:	10bfe004 	addi	r2,r2,-128
 280d0fc:	10800bd8 	cmpnei	r2,r2,47
 280d100:	1000031e 	bne	r2,zero,280d110 <alt_find_file+0x70>
    {
      len -= 1;
 280d104:	e0bffc17 	ldw	r2,-16(fp)
 280d108:	10bfffc4 	addi	r2,r2,-1
 280d10c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 280d110:	e0bffc17 	ldw	r2,-16(fp)
 280d114:	1007883a 	mov	r3,r2
 280d118:	e0bffe17 	ldw	r2,-8(fp)
 280d11c:	1885883a 	add	r2,r3,r2
 280d120:	10800003 	ldbu	r2,0(r2)
 280d124:	10803fcc 	andi	r2,r2,255
 280d128:	1080201c 	xori	r2,r2,128
 280d12c:	10bfe004 	addi	r2,r2,-128
 280d130:	10800be0 	cmpeqi	r2,r2,47
 280d134:	10000a1e 	bne	r2,zero,280d160 <alt_find_file+0xc0>
 280d138:	e0bffc17 	ldw	r2,-16(fp)
 280d13c:	1007883a 	mov	r3,r2
 280d140:	e0bffe17 	ldw	r2,-8(fp)
 280d144:	1885883a 	add	r2,r3,r2
 280d148:	10800003 	ldbu	r2,0(r2)
 280d14c:	10803fcc 	andi	r2,r2,255
 280d150:	1080201c 	xori	r2,r2,128
 280d154:	10bfe004 	addi	r2,r2,-128
 280d158:	1004c03a 	cmpne	r2,r2,zero
 280d15c:	10000a1e 	bne	r2,zero,280d188 <alt_find_file+0xe8>
 280d160:	e0bffd17 	ldw	r2,-12(fp)
 280d164:	11000217 	ldw	r4,8(r2)
 280d168:	e1bffc17 	ldw	r6,-16(fp)
 280d16c:	e17ffe17 	ldw	r5,-8(fp)
 280d170:	280d2dc0 	call	280d2dc <memcmp>
 280d174:	1004c03a 	cmpne	r2,r2,zero
 280d178:	1000031e 	bne	r2,zero,280d188 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 280d17c:	e0bffd17 	ldw	r2,-12(fp)
 280d180:	e0bfff15 	stw	r2,-4(fp)
 280d184:	00000806 	br	280d1a8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 280d188:	e0bffd17 	ldw	r2,-12(fp)
 280d18c:	10800017 	ldw	r2,0(r2)
 280d190:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 280d194:	00c0a074 	movhi	r3,641
 280d198:	18fd4004 	addi	r3,r3,-2816
 280d19c:	e0bffd17 	ldw	r2,-12(fp)
 280d1a0:	10ffc91e 	bne	r2,r3,280d0c8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 280d1a4:	e03fff15 	stw	zero,-4(fp)
 280d1a8:	e0bfff17 	ldw	r2,-4(fp)
}
 280d1ac:	e037883a 	mov	sp,fp
 280d1b0:	dfc00117 	ldw	ra,4(sp)
 280d1b4:	df000017 	ldw	fp,0(sp)
 280d1b8:	dec00204 	addi	sp,sp,8
 280d1bc:	f800283a 	ret

0280d1c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 280d1c0:	defffa04 	addi	sp,sp,-24
 280d1c4:	dfc00515 	stw	ra,20(sp)
 280d1c8:	df000415 	stw	fp,16(sp)
 280d1cc:	dc000315 	stw	r16,12(sp)
 280d1d0:	df000304 	addi	fp,sp,12
 280d1d4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 280d1d8:	00bffa04 	movi	r2,-24
 280d1dc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 280d1e0:	e03ffe15 	stw	zero,-8(fp)
 280d1e4:	00002006 	br	280d268 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 280d1e8:	e13ffe17 	ldw	r4,-8(fp)
 280d1ec:	0400a074 	movhi	r16,641
 280d1f0:	84388b04 	addi	r16,r16,-7636
 280d1f4:	01400304 	movi	r5,12
 280d1f8:	28096940 	call	2809694 <__mulsi3>
 280d1fc:	1405883a 	add	r2,r2,r16
 280d200:	10800017 	ldw	r2,0(r2)
 280d204:	1004c03a 	cmpne	r2,r2,zero
 280d208:	1000141e 	bne	r2,zero,280d25c <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 280d20c:	e13ffe17 	ldw	r4,-8(fp)
 280d210:	0400a074 	movhi	r16,641
 280d214:	84388b04 	addi	r16,r16,-7636
 280d218:	01400304 	movi	r5,12
 280d21c:	28096940 	call	2809694 <__mulsi3>
 280d220:	1407883a 	add	r3,r2,r16
 280d224:	e0bfff17 	ldw	r2,-4(fp)
 280d228:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 280d22c:	0080a074 	movhi	r2,641
 280d230:	10bd4404 	addi	r2,r2,-2800
 280d234:	10c00017 	ldw	r3,0(r2)
 280d238:	e0bffe17 	ldw	r2,-8(fp)
 280d23c:	1880040e 	bge	r3,r2,280d250 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 280d240:	00c0a074 	movhi	r3,641
 280d244:	18fd4404 	addi	r3,r3,-2800
 280d248:	e0bffe17 	ldw	r2,-8(fp)
 280d24c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 280d250:	e0bffe17 	ldw	r2,-8(fp)
 280d254:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 280d258:	00000606 	br	280d274 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 280d25c:	e0bffe17 	ldw	r2,-8(fp)
 280d260:	10800044 	addi	r2,r2,1
 280d264:	e0bffe15 	stw	r2,-8(fp)
 280d268:	e0bffe17 	ldw	r2,-8(fp)
 280d26c:	10800810 	cmplti	r2,r2,32
 280d270:	103fdd1e 	bne	r2,zero,280d1e8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 280d274:	e0bffd17 	ldw	r2,-12(fp)
}
 280d278:	e037883a 	mov	sp,fp
 280d27c:	dfc00217 	ldw	ra,8(sp)
 280d280:	df000117 	ldw	fp,4(sp)
 280d284:	dc000017 	ldw	r16,0(sp)
 280d288:	dec00304 	addi	sp,sp,12
 280d28c:	f800283a 	ret

0280d290 <atexit>:
 280d290:	200b883a 	mov	r5,r4
 280d294:	000d883a 	mov	r6,zero
 280d298:	0009883a 	mov	r4,zero
 280d29c:	000f883a 	mov	r7,zero
 280d2a0:	280d3501 	jmpi	280d350 <__register_exitproc>

0280d2a4 <exit>:
 280d2a4:	defffe04 	addi	sp,sp,-8
 280d2a8:	000b883a 	mov	r5,zero
 280d2ac:	dc000015 	stw	r16,0(sp)
 280d2b0:	dfc00115 	stw	ra,4(sp)
 280d2b4:	2021883a 	mov	r16,r4
 280d2b8:	280d4880 	call	280d488 <__call_exitprocs>
 280d2bc:	0080a074 	movhi	r2,641
 280d2c0:	10bd3b04 	addi	r2,r2,-2836
 280d2c4:	11000017 	ldw	r4,0(r2)
 280d2c8:	20800f17 	ldw	r2,60(r4)
 280d2cc:	10000126 	beq	r2,zero,280d2d4 <exit+0x30>
 280d2d0:	103ee83a 	callr	r2
 280d2d4:	8009883a 	mov	r4,r16
 280d2d8:	280d6780 	call	280d678 <_exit>

0280d2dc <memcmp>:
 280d2dc:	00c000c4 	movi	r3,3
 280d2e0:	1980032e 	bgeu	r3,r6,280d2f0 <memcmp+0x14>
 280d2e4:	2144b03a 	or	r2,r4,r5
 280d2e8:	10c4703a 	and	r2,r2,r3
 280d2ec:	10000f26 	beq	r2,zero,280d32c <memcmp+0x50>
 280d2f0:	31ffffc4 	addi	r7,r6,-1
 280d2f4:	3000061e 	bne	r6,zero,280d310 <memcmp+0x34>
 280d2f8:	00000a06 	br	280d324 <memcmp+0x48>
 280d2fc:	39ffffc4 	addi	r7,r7,-1
 280d300:	00bfffc4 	movi	r2,-1
 280d304:	21000044 	addi	r4,r4,1
 280d308:	29400044 	addi	r5,r5,1
 280d30c:	38800526 	beq	r7,r2,280d324 <memcmp+0x48>
 280d310:	20c00003 	ldbu	r3,0(r4)
 280d314:	28800003 	ldbu	r2,0(r5)
 280d318:	18bff826 	beq	r3,r2,280d2fc <memcmp+0x20>
 280d31c:	1885c83a 	sub	r2,r3,r2
 280d320:	f800283a 	ret
 280d324:	0005883a 	mov	r2,zero
 280d328:	f800283a 	ret
 280d32c:	180f883a 	mov	r7,r3
 280d330:	20c00017 	ldw	r3,0(r4)
 280d334:	28800017 	ldw	r2,0(r5)
 280d338:	18bfed1e 	bne	r3,r2,280d2f0 <memcmp+0x14>
 280d33c:	31bfff04 	addi	r6,r6,-4
 280d340:	21000104 	addi	r4,r4,4
 280d344:	29400104 	addi	r5,r5,4
 280d348:	39bff936 	bltu	r7,r6,280d330 <memcmp+0x54>
 280d34c:	003fe806 	br	280d2f0 <memcmp+0x14>

0280d350 <__register_exitproc>:
 280d350:	defffa04 	addi	sp,sp,-24
 280d354:	0080a074 	movhi	r2,641
 280d358:	10bd3b04 	addi	r2,r2,-2836
 280d35c:	dc000015 	stw	r16,0(sp)
 280d360:	14000017 	ldw	r16,0(r2)
 280d364:	dd000415 	stw	r20,16(sp)
 280d368:	2829883a 	mov	r20,r5
 280d36c:	81405217 	ldw	r5,328(r16)
 280d370:	dcc00315 	stw	r19,12(sp)
 280d374:	dc800215 	stw	r18,8(sp)
 280d378:	dc400115 	stw	r17,4(sp)
 280d37c:	dfc00515 	stw	ra,20(sp)
 280d380:	2023883a 	mov	r17,r4
 280d384:	3027883a 	mov	r19,r6
 280d388:	3825883a 	mov	r18,r7
 280d38c:	28002526 	beq	r5,zero,280d424 <__register_exitproc+0xd4>
 280d390:	29000117 	ldw	r4,4(r5)
 280d394:	008007c4 	movi	r2,31
 280d398:	11002716 	blt	r2,r4,280d438 <__register_exitproc+0xe8>
 280d39c:	8800101e 	bne	r17,zero,280d3e0 <__register_exitproc+0x90>
 280d3a0:	2105883a 	add	r2,r4,r4
 280d3a4:	1085883a 	add	r2,r2,r2
 280d3a8:	20c00044 	addi	r3,r4,1
 280d3ac:	1145883a 	add	r2,r2,r5
 280d3b0:	0009883a 	mov	r4,zero
 280d3b4:	15000215 	stw	r20,8(r2)
 280d3b8:	28c00115 	stw	r3,4(r5)
 280d3bc:	2005883a 	mov	r2,r4
 280d3c0:	dfc00517 	ldw	ra,20(sp)
 280d3c4:	dd000417 	ldw	r20,16(sp)
 280d3c8:	dcc00317 	ldw	r19,12(sp)
 280d3cc:	dc800217 	ldw	r18,8(sp)
 280d3d0:	dc400117 	ldw	r17,4(sp)
 280d3d4:	dc000017 	ldw	r16,0(sp)
 280d3d8:	dec00604 	addi	sp,sp,24
 280d3dc:	f800283a 	ret
 280d3e0:	29802204 	addi	r6,r5,136
 280d3e4:	00800044 	movi	r2,1
 280d3e8:	110e983a 	sll	r7,r2,r4
 280d3ec:	30c04017 	ldw	r3,256(r6)
 280d3f0:	2105883a 	add	r2,r4,r4
 280d3f4:	1085883a 	add	r2,r2,r2
 280d3f8:	1185883a 	add	r2,r2,r6
 280d3fc:	19c6b03a 	or	r3,r3,r7
 280d400:	14802015 	stw	r18,128(r2)
 280d404:	14c00015 	stw	r19,0(r2)
 280d408:	00800084 	movi	r2,2
 280d40c:	30c04015 	stw	r3,256(r6)
 280d410:	88bfe31e 	bne	r17,r2,280d3a0 <__register_exitproc+0x50>
 280d414:	30804117 	ldw	r2,260(r6)
 280d418:	11c4b03a 	or	r2,r2,r7
 280d41c:	30804115 	stw	r2,260(r6)
 280d420:	003fdf06 	br	280d3a0 <__register_exitproc+0x50>
 280d424:	0080a074 	movhi	r2,641
 280d428:	10847904 	addi	r2,r2,4580
 280d42c:	100b883a 	mov	r5,r2
 280d430:	80805215 	stw	r2,328(r16)
 280d434:	003fd606 	br	280d390 <__register_exitproc+0x40>
 280d438:	00800034 	movhi	r2,0
 280d43c:	10800004 	addi	r2,r2,0
 280d440:	1000021e 	bne	r2,zero,280d44c <__register_exitproc+0xfc>
 280d444:	013fffc4 	movi	r4,-1
 280d448:	003fdc06 	br	280d3bc <__register_exitproc+0x6c>
 280d44c:	01006404 	movi	r4,400
 280d450:	103ee83a 	callr	r2
 280d454:	1007883a 	mov	r3,r2
 280d458:	103ffa26 	beq	r2,zero,280d444 <__register_exitproc+0xf4>
 280d45c:	80805217 	ldw	r2,328(r16)
 280d460:	180b883a 	mov	r5,r3
 280d464:	18000115 	stw	zero,4(r3)
 280d468:	18800015 	stw	r2,0(r3)
 280d46c:	80c05215 	stw	r3,328(r16)
 280d470:	18006215 	stw	zero,392(r3)
 280d474:	18006315 	stw	zero,396(r3)
 280d478:	0009883a 	mov	r4,zero
 280d47c:	883fc826 	beq	r17,zero,280d3a0 <__register_exitproc+0x50>
 280d480:	003fd706 	br	280d3e0 <__register_exitproc+0x90>

0280d484 <register_fini>:
 280d484:	f800283a 	ret

0280d488 <__call_exitprocs>:
 280d488:	0080a074 	movhi	r2,641
 280d48c:	10bd3b04 	addi	r2,r2,-2836
 280d490:	10800017 	ldw	r2,0(r2)
 280d494:	defff304 	addi	sp,sp,-52
 280d498:	df000b15 	stw	fp,44(sp)
 280d49c:	d8800115 	stw	r2,4(sp)
 280d4a0:	00800034 	movhi	r2,0
 280d4a4:	10800004 	addi	r2,r2,0
 280d4a8:	1005003a 	cmpeq	r2,r2,zero
 280d4ac:	d8800215 	stw	r2,8(sp)
 280d4b0:	d8800117 	ldw	r2,4(sp)
 280d4b4:	dd400815 	stw	r21,32(sp)
 280d4b8:	dd000715 	stw	r20,28(sp)
 280d4bc:	10805204 	addi	r2,r2,328
 280d4c0:	dfc00c15 	stw	ra,48(sp)
 280d4c4:	ddc00a15 	stw	r23,40(sp)
 280d4c8:	dd800915 	stw	r22,36(sp)
 280d4cc:	dcc00615 	stw	r19,24(sp)
 280d4d0:	dc800515 	stw	r18,20(sp)
 280d4d4:	dc400415 	stw	r17,16(sp)
 280d4d8:	dc000315 	stw	r16,12(sp)
 280d4dc:	282b883a 	mov	r21,r5
 280d4e0:	2039883a 	mov	fp,r4
 280d4e4:	d8800015 	stw	r2,0(sp)
 280d4e8:	2829003a 	cmpeq	r20,r5,zero
 280d4ec:	d8800117 	ldw	r2,4(sp)
 280d4f0:	14405217 	ldw	r17,328(r2)
 280d4f4:	88001026 	beq	r17,zero,280d538 <__call_exitprocs+0xb0>
 280d4f8:	ddc00017 	ldw	r23,0(sp)
 280d4fc:	88800117 	ldw	r2,4(r17)
 280d500:	8c802204 	addi	r18,r17,136
 280d504:	143fffc4 	addi	r16,r2,-1
 280d508:	80000916 	blt	r16,zero,280d530 <__call_exitprocs+0xa8>
 280d50c:	05bfffc4 	movi	r22,-1
 280d510:	a000151e 	bne	r20,zero,280d568 <__call_exitprocs+0xe0>
 280d514:	8409883a 	add	r4,r16,r16
 280d518:	2105883a 	add	r2,r4,r4
 280d51c:	1485883a 	add	r2,r2,r18
 280d520:	10c02017 	ldw	r3,128(r2)
 280d524:	a8c01126 	beq	r21,r3,280d56c <__call_exitprocs+0xe4>
 280d528:	843fffc4 	addi	r16,r16,-1
 280d52c:	85bff81e 	bne	r16,r22,280d510 <__call_exitprocs+0x88>
 280d530:	d8800217 	ldw	r2,8(sp)
 280d534:	10003126 	beq	r2,zero,280d5fc <__call_exitprocs+0x174>
 280d538:	dfc00c17 	ldw	ra,48(sp)
 280d53c:	df000b17 	ldw	fp,44(sp)
 280d540:	ddc00a17 	ldw	r23,40(sp)
 280d544:	dd800917 	ldw	r22,36(sp)
 280d548:	dd400817 	ldw	r21,32(sp)
 280d54c:	dd000717 	ldw	r20,28(sp)
 280d550:	dcc00617 	ldw	r19,24(sp)
 280d554:	dc800517 	ldw	r18,20(sp)
 280d558:	dc400417 	ldw	r17,16(sp)
 280d55c:	dc000317 	ldw	r16,12(sp)
 280d560:	dec00d04 	addi	sp,sp,52
 280d564:	f800283a 	ret
 280d568:	8409883a 	add	r4,r16,r16
 280d56c:	88c00117 	ldw	r3,4(r17)
 280d570:	2105883a 	add	r2,r4,r4
 280d574:	1445883a 	add	r2,r2,r17
 280d578:	18ffffc4 	addi	r3,r3,-1
 280d57c:	11800217 	ldw	r6,8(r2)
 280d580:	1c001526 	beq	r3,r16,280d5d8 <__call_exitprocs+0x150>
 280d584:	10000215 	stw	zero,8(r2)
 280d588:	303fe726 	beq	r6,zero,280d528 <__call_exitprocs+0xa0>
 280d58c:	00c00044 	movi	r3,1
 280d590:	1c06983a 	sll	r3,r3,r16
 280d594:	90804017 	ldw	r2,256(r18)
 280d598:	8cc00117 	ldw	r19,4(r17)
 280d59c:	1884703a 	and	r2,r3,r2
 280d5a0:	10001426 	beq	r2,zero,280d5f4 <__call_exitprocs+0x16c>
 280d5a4:	90804117 	ldw	r2,260(r18)
 280d5a8:	1884703a 	and	r2,r3,r2
 280d5ac:	10000c1e 	bne	r2,zero,280d5e0 <__call_exitprocs+0x158>
 280d5b0:	2105883a 	add	r2,r4,r4
 280d5b4:	1485883a 	add	r2,r2,r18
 280d5b8:	11400017 	ldw	r5,0(r2)
 280d5bc:	e009883a 	mov	r4,fp
 280d5c0:	303ee83a 	callr	r6
 280d5c4:	88800117 	ldw	r2,4(r17)
 280d5c8:	98bfc81e 	bne	r19,r2,280d4ec <__call_exitprocs+0x64>
 280d5cc:	b8800017 	ldw	r2,0(r23)
 280d5d0:	147fd526 	beq	r2,r17,280d528 <__call_exitprocs+0xa0>
 280d5d4:	003fc506 	br	280d4ec <__call_exitprocs+0x64>
 280d5d8:	8c000115 	stw	r16,4(r17)
 280d5dc:	003fea06 	br	280d588 <__call_exitprocs+0x100>
 280d5e0:	2105883a 	add	r2,r4,r4
 280d5e4:	1485883a 	add	r2,r2,r18
 280d5e8:	11000017 	ldw	r4,0(r2)
 280d5ec:	303ee83a 	callr	r6
 280d5f0:	003ff406 	br	280d5c4 <__call_exitprocs+0x13c>
 280d5f4:	303ee83a 	callr	r6
 280d5f8:	003ff206 	br	280d5c4 <__call_exitprocs+0x13c>
 280d5fc:	88800117 	ldw	r2,4(r17)
 280d600:	1000081e 	bne	r2,zero,280d624 <__call_exitprocs+0x19c>
 280d604:	89000017 	ldw	r4,0(r17)
 280d608:	20000726 	beq	r4,zero,280d628 <__call_exitprocs+0x1a0>
 280d60c:	b9000015 	stw	r4,0(r23)
 280d610:	8809883a 	mov	r4,r17
 280d614:	00000000 	call	0 <__alt_mem_sdram_ctrl-0x2800000>
 280d618:	bc400017 	ldw	r17,0(r23)
 280d61c:	883fb71e 	bne	r17,zero,280d4fc <__call_exitprocs+0x74>
 280d620:	003fc506 	br	280d538 <__call_exitprocs+0xb0>
 280d624:	89000017 	ldw	r4,0(r17)
 280d628:	882f883a 	mov	r23,r17
 280d62c:	2023883a 	mov	r17,r4
 280d630:	883fb21e 	bne	r17,zero,280d4fc <__call_exitprocs+0x74>
 280d634:	003fc006 	br	280d538 <__call_exitprocs+0xb0>

0280d638 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 280d638:	defffd04 	addi	sp,sp,-12
 280d63c:	df000215 	stw	fp,8(sp)
 280d640:	df000204 	addi	fp,sp,8
 280d644:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 280d648:	e0bfff17 	ldw	r2,-4(fp)
 280d64c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 280d650:	e0bffe17 	ldw	r2,-8(fp)
 280d654:	1005003a 	cmpeq	r2,r2,zero
 280d658:	1000021e 	bne	r2,zero,280d664 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 280d65c:	002af070 	cmpltui	zero,zero,43969
 280d660:	00000106 	br	280d668 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 280d664:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 280d668:	e037883a 	mov	sp,fp
 280d66c:	df000017 	ldw	fp,0(sp)
 280d670:	dec00104 	addi	sp,sp,4
 280d674:	f800283a 	ret

0280d678 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 280d678:	defffd04 	addi	sp,sp,-12
 280d67c:	dfc00215 	stw	ra,8(sp)
 280d680:	df000115 	stw	fp,4(sp)
 280d684:	df000104 	addi	fp,sp,4
 280d688:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 280d68c:	e13fff17 	ldw	r4,-4(fp)
 280d690:	280d6380 	call	280d638 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 280d694:	003fff06 	br	280d694 <_exit+0x1c>
 280d698:	0280d484 	movi	r10,850
